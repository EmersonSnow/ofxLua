/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif

/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif


/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

// Can be used to create namespaces. Currently used to
// wrap class static methods/variables/constants
typedef struct {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    cls_static;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1)); /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
  return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,1));  /* just in case */
#else
  assert(lua_istable(L,1)); /* default Lua action */
#endif
  lua_getmetatable(L,1);  /* get the metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  assert(lua_isrotable(L,-1));  /* just in case */
#else
  assert(lua_istable(L,-1));
#endif
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
  if (lua_isrotable(L,-1))
#else
  if (lua_istable(L,-1))
#endif
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) 
    else {
      return 0; // Exits stoically if an invalid key is initialized.
    }
#endif
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* registering a module in lua. Pushes the module table on the stack. */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
#ifdef SWIG_LUA_MODULE_GLOBAL
  /* If requested, install the module directly into the global namespace. */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
#else
  /* Do not install the module table as global name. The stack top has
     the module table with the name below. We pop the top and replace
     the name with it. */
  lua_replace(L,-2);
#endif
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}
#endif

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: namespaces
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  return 0;
}

SWIGINTERN void SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]); // forward declaration
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn); // forward declaration

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State* L, swig_lua_namespace* ns)
{
  int i = 0;
  assert(lua_istable(L,-1));
  /* There must be table at the top of the stack */
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].method);
  }
  lua_pop(L,1);

  /* clear stack - remove metatble */
  lua_pop(L,1);

}

/* helper function. creates namespace table and add it to module table */
SWIGINTERN int SWIG_Lua_namespace_register(lua_State* L, swig_lua_namespace* ns)
{
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table */
  lua_checkstack(L,5);
  lua_pushstring(L, ns->name);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */
  lua_rawset(L,-3); /* add namespace to module table */
}
/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State* L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  assert(lua_isuserdata(L,1));  /* just in case */
  unsigned long userData = (unsigned long)lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  
  lua_getfield(L, -1, ".type");
  const char* className = lua_tostring(L, -1);
  
  char output[256];
  sprintf(output, "<%s userdata: %lX>", className, userData);
  
  lua_pushstring(L, (const char*)output);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* Constructor proxy. Used when class name entry in module is not class constructor,
but special table instead. */
SWIGINTERN int SWIG_Lua_constructor_proxy(lua_State* L)
{
  /* unlimited number of parameters
     First one is our proxy table and we should remove it
     Other we should pass to real constructor
   */
   assert(lua_istable(L,1));
   lua_pushstring(L,".constructor");
   lua_rawget(L,1);
   assert(!lua_isnil(L,-1));
   lua_replace(L,1); /* replace our table with real constructor */
   lua_call(L,lua_gettop(L)-1,1);
   return 1;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State* L, swig_lua_class* clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, &clss->cls_static);
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State* L, swig_lua_class* clss)
{
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static.name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,&clss->cls_static);

  SWIG_Lua_get_table(L,clss->name); // Get namespace table back
  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    SWIG_Lua_add_function(L,".constructor", clss->constructor);
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", SWIG_Lua_constructor_proxy);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  SWIG_Lua_class_register_static(L,clss);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add tostring method for better output */
  SWIG_Lua_add_function(L,"__tostring",SWIG_Lua_class_tostring);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GLenum swig_types[0]
#define SWIGTYPE_p_GLint swig_types[1]
#define SWIGTYPE_p_GLsizei swig_types[2]
#define SWIGTYPE_p_GLuint swig_types[3]
#define SWIGTYPE_p_Poco__FastMutex swig_types[4]
#define SWIGTYPE_p_Poco__FastMutex__ScopedLock swig_types[5]
#define SWIGTYPE_p_TESSindex swig_types[6]
#define SWIGTYPE_p_double swig_types[7]
#define SWIGTYPE_p_float swig_types[8]
#define SWIGTYPE_p_int swig_types[9]
#define SWIGTYPE_p_ofAbstractHasPixels swig_types[10]
#define SWIGTYPE_p_ofAbstractImage swig_types[11]
#define SWIGTYPE_p_ofAppBaseWindow swig_types[12]
#define SWIGTYPE_p_ofBaseApp swig_types[13]
#define SWIGTYPE_p_ofBaseDraws swig_types[14]
#define SWIGTYPE_p_ofBaseFileSerializer swig_types[15]
#define SWIGTYPE_p_ofBaseGLRenderer swig_types[16]
#define SWIGTYPE_p_ofBaseHasPixels_T_float_t swig_types[17]
#define SWIGTYPE_p_ofBaseHasPixels_T_unsigned_short_t swig_types[18]
#define SWIGTYPE_p_ofBaseHasTexture swig_types[19]
#define SWIGTYPE_p_ofBaseImage_T_float_t swig_types[20]
#define SWIGTYPE_p_ofBaseImage_T_unsigned_short_t swig_types[21]
#define SWIGTYPE_p_ofBaseRenderer swig_types[22]
#define SWIGTYPE_p_ofBaseSerializer swig_types[23]
#define SWIGTYPE_p_ofBaseSoundInput swig_types[24]
#define SWIGTYPE_p_ofBaseSoundOutput swig_types[25]
#define SWIGTYPE_p_ofBaseUpdates swig_types[26]
#define SWIGTYPE_p_ofBaseVideo swig_types[27]
#define SWIGTYPE_p_ofBaseVideoDraws swig_types[28]
#define SWIGTYPE_p_ofBaseVideoGrabber swig_types[29]
#define SWIGTYPE_p_ofBaseVideoPlayer swig_types[30]
#define SWIGTYPE_p_ofBuffer swig_types[31]
#define SWIGTYPE_p_ofColor_T_float_t swig_types[32]
#define SWIGTYPE_p_ofColor_T_unsigned_char_t swig_types[33]
#define SWIGTYPE_p_ofColor_T_unsigned_short_t swig_types[34]
#define SWIGTYPE_p_ofDragInfo swig_types[35]
#define SWIGTYPE_p_ofFbo swig_types[36]
#define SWIGTYPE_p_ofFbo__Settings swig_types[37]
#define SWIGTYPE_p_ofFile swig_types[38]
#define SWIGTYPE_p_ofImage_T_float_t swig_types[39]
#define SWIGTYPE_p_ofImage_T_unsigned_char_t swig_types[40]
#define SWIGTYPE_p_ofImage_T_unsigned_short_t swig_types[41]
#define SWIGTYPE_p_ofLight swig_types[42]
#define SWIGTYPE_p_ofMaterial swig_types[43]
#define SWIGTYPE_p_ofMatrix3x3 swig_types[44]
#define SWIGTYPE_p_ofMatrix4x4 swig_types[45]
#define SWIGTYPE_p_ofMesh swig_types[46]
#define SWIGTYPE_p_ofMeshFace swig_types[47]
#define SWIGTYPE_p_ofNode swig_types[48]
#define SWIGTYPE_p_ofPath swig_types[49]
#define SWIGTYPE_p_ofPixels_T_float_t swig_types[50]
#define SWIGTYPE_p_ofPixels_T_unsigned_char_t swig_types[51]
#define SWIGTYPE_p_ofPixels_T_unsigned_short_t swig_types[52]
#define SWIGTYPE_p_ofPolyRenderMode swig_types[53]
#define SWIGTYPE_p_ofPolyline swig_types[54]
#define SWIGTYPE_p_ofPrimitiveMode swig_types[55]
#define SWIGTYPE_p_ofPtrT_ofAppBaseWindow_t swig_types[56]
#define SWIGTYPE_p_ofPtrT_ofBaseApp_t swig_types[57]
#define SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t swig_types[58]
#define SWIGTYPE_p_ofPtrT_ofBaseSoundStream_t swig_types[59]
#define SWIGTYPE_p_ofQuaternion swig_types[60]
#define SWIGTYPE_p_ofRectangle swig_types[61]
#define SWIGTYPE_p_ofShader swig_types[62]
#define SWIGTYPE_p_ofSoundPlayer swig_types[63]
#define SWIGTYPE_p_ofSoundStream swig_types[64]
#define SWIGTYPE_p_ofStyle swig_types[65]
#define SWIGTYPE_p_ofTTFCharacter swig_types[66]
#define SWIGTYPE_p_ofTexture swig_types[67]
#define SWIGTYPE_p_ofTextureData swig_types[68]
#define SWIGTYPE_p_ofTrueTypeFont swig_types[69]
#define SWIGTYPE_p_ofVbo swig_types[70]
#define SWIGTYPE_p_ofVboMesh swig_types[71]
#define SWIGTYPE_p_ofVec2f swig_types[72]
#define SWIGTYPE_p_ofVec3f swig_types[73]
#define SWIGTYPE_p_ofVec4f swig_types[74]
#define SWIGTYPE_p_std__string swig_types[75]
#define SWIGTYPE_p_std__vectorT_TESSindex_t swig_types[76]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[77]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[78]
#define SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t swig_types[79]
#define SWIGTYPE_p_std__vectorT_ofMeshFace_t swig_types[80]
#define SWIGTYPE_p_std__vectorT_ofPath__Command_t swig_types[81]
#define SWIGTYPE_p_std__vectorT_ofPolyline_t swig_types[82]
#define SWIGTYPE_p_std__vectorT_ofTTFCharacter_t swig_types[83]
#define SWIGTYPE_p_std__vectorT_ofVec2f_t swig_types[84]
#define SWIGTYPE_p_std__vectorT_ofVec3f_t swig_types[85]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[86]
#define SWIGTYPE_p_unsigned_char swig_types[87]
#define SWIGTYPE_p_unsigned_int swig_types[88]
#define SWIGTYPE_p_unsigned_short swig_types[89]
static swig_type_info *swig_types[91];
static swig_module_info swig_module = {swig_types, 90, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "of"
#define SWIG_init      luaopen_of
#define SWIG_init_user luaopen_of_user

#define SWIG_LUACODE   luaopen_of_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR)
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			SWIG_Lua_pusherrstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			SWIG_Lua_pusherrstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			SWIG_Lua_pusherrstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(schar,signed char);
SWIG_DECLARE_TYPEMAP_ARR_FN(uchar,unsigned char);
SWIG_DECLARE_TYPEMAP_ARR_FN(int,int);
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int);
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short);
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short);
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long);
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long);
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float);
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double);

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		SWIG_Lua_pushferrstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		SWIG_Lua_pusherrstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		SWIG_Lua_pusherrstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		SWIG_Lua_pushferrstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>

SWIGINTERN float std_vector_Sl_float_Sg____getitem__(std::vector< float > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_float_Sg____setitem__(std::vector< float > *self,unsigned int idx,float val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN std::string std_vector_Sl_std_string_Sg____getitem__(std::vector< std::string > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem__(std::vector< std::string > *self,unsigned int idx,std::string val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}

#include "ofMain.h"


#include <stdio.h>

SWIGINTERN unsigned char ofColor__Sl_unsigned_SS_char_Sg__getR(ofColor_< unsigned char > *self){return self->r;}
SWIGINTERN unsigned char ofColor__Sl_unsigned_SS_char_Sg__getG(ofColor_< unsigned char > *self){return self->g;}
SWIGINTERN unsigned char ofColor__Sl_unsigned_SS_char_Sg__getB(ofColor_< unsigned char > *self){return self->b;}
SWIGINTERN unsigned char ofColor__Sl_unsigned_SS_char_Sg__getA(ofColor_< unsigned char > *self){return self->a;}
SWIGINTERN void ofColor__Sl_unsigned_SS_char_Sg__setR(ofColor_< unsigned char > *self,unsigned char r){self->r = r;}
SWIGINTERN void ofColor__Sl_unsigned_SS_char_Sg__setG(ofColor_< unsigned char > *self,unsigned char g){self->g = g;}
SWIGINTERN void ofColor__Sl_unsigned_SS_char_Sg__setB(ofColor_< unsigned char > *self,unsigned char b){self->b = b;}
SWIGINTERN void ofColor__Sl_unsigned_SS_char_Sg__setA(ofColor_< unsigned char > *self,unsigned char a){self->a = a;}
SWIGINTERN char const *ofColor__Sl_unsigned_SS_char_Sg____str__(ofColor_< unsigned char > *self){
		stringstream str;
		str << (*self);
		return str.str().c_str();
	}

#define ofRectangle_x_get(self_) self_->getX()
#define ofRectangle_x_set(self_, val_) self_->setX(val_)
  

#define ofRectangle_y_get(self_) self_->getY()
#define ofRectangle_y_set(self_, val_) self_->setY(val_)
  
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *result = 0 ;
  SWIG_check_num_args("std::string::string",0,0) result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_string__SWIG_1(lua_State* L) { int SWIG_arg = 0; char *arg1 = (char *) 0 ; std::string *result = 0 ;
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *"); arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_string(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);}  if (argc == 1) { int _v; { _v = SWIG_lua_isnilstring(L,argv[0]); }  if (_v) {
      return _wrap_new_string__SWIG_1(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
  "  Possible C/C++ prototypes are:\n" "    std::string::string()\n" "    std::string::string(char const *)\n");
  lua_error(L);return 0; }
static int _wrap_string_size(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_length(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; unsigned int result;
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string); }  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_empty(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; bool result;
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string); }  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_c_str(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_data(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ; char *result = 0 ;
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string); }  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_string_assign(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ; SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string); }  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_string_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_string_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_string_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, { "string", swig_std_string_cls_methods, swig_std_string_cls_attributes, swig_std_string_cls_constants }, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_new_FloatVector__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< float > *result = 0 ;
  SWIG_check_num_args("std::vector< float >::vector",0,0) result = (std::vector< float > *)new std::vector< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_FloatVector__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_FloatVector__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = 0 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("std::vector< float >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"std::vector< float > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_FloatVector",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_FloatVector__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; float arg2 ;
  std::vector< float > *result = 0 ; SWIG_check_num_args("std::vector< float >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< float >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::vector",2,"float");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (std::vector< float > *)new std::vector< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_FloatVector(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_FloatVector__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_FloatVector__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_FloatVector__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_FloatVector__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatVector'\n" "  Possible C/C++ prototypes are:\n"
  "    std::vector< float >::vector()\n" "    std::vector< float >::vector(unsigned int)\n"
  "    std::vector< float >::vector(std::vector< float > const &)\n" "    std::vector< float >::vector(unsigned int,float)\n");
  lua_error(L);return 0; }
static int _wrap_FloatVector_size(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  unsigned int result; SWIG_check_num_args("std::vector< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::size",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_size",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (unsigned int)((std::vector< float > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_max_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< float >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::max_size",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_max_size",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (unsigned int)((std::vector< float > const *)arg1)->max_size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_empty(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result; SWIG_check_num_args("std::vector< float >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::empty",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_empty",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (bool)((std::vector< float > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_clear(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  SWIG_check_num_args("std::vector< float >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::clear",1,"std::vector< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_clear",1,SWIGTYPE_p_std__vectorT_float_t); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_push_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; float arg2 ;
  SWIG_check_num_args("std::vector< float >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::push_back",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::push_back",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_push_back",1,SWIGTYPE_p_std__vectorT_float_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->push_back(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_pop_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; SWIG_check_num_args("std::vector< float >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::pop_back",1,"std::vector< float > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_pop_back",1,SWIGTYPE_p_std__vectorT_float_t); }  (arg1)->pop_back(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_front(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float result; SWIG_check_num_args("std::vector< float >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::front",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_front",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (float)((std::vector< float > const *)arg1)->front(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector_back(lua_State* L) { int SWIG_arg = 0; std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  float result; SWIG_check_num_args("std::vector< float >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::back",1,"std::vector< float > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector_back",1,SWIGTYPE_p_std__vectorT_float_t); } 
  result = (float)((std::vector< float > const *)arg1)->back(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector___getitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int arg2 ; float result;
  SWIG_check_num_args("std::vector< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__getitem__",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___getitem",1,SWIGTYPE_p_std__vectorT_float_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = (float)std_vector_Sl_float_Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_FloatVector___setitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ; unsigned int arg2 ; float arg3 ;
  SWIG_check_num_args("std::vector< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< float >::__setitem__",1,"std::vector< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< float >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< float >::__setitem__",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("FloatVector___setitem",1,SWIGTYPE_p_std__vectorT_float_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); try { std_vector_Sl_float_Sg____setitem__(arg1,arg2,arg3);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_FloatVector(void *obj) {
std::vector< float > *arg1 = (std::vector< float > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_float_Sg__methods[] = {
    {"size", _wrap_FloatVector_size}, 
    {"max_size", _wrap_FloatVector_max_size}, 
    {"empty", _wrap_FloatVector_empty}, 
    {"clear", _wrap_FloatVector_clear}, 
    {"push_back", _wrap_FloatVector_push_back}, 
    {"pop_back", _wrap_FloatVector_pop_back}, 
    {"front", _wrap_FloatVector_front}, 
    {"back", _wrap_FloatVector_back}, 
    {"__getitem", _wrap_FloatVector___getitem}, 
    {"__setitem", _wrap_FloatVector___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_float_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_vector_Sl_float_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_Sl_float_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_vector_Sl_float_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_float_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_float_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_float_Sg_ = { "FloatVector", &SWIGTYPE_p_std__vectorT_float_t,_wrap_new_FloatVector, swig_delete_FloatVector, swig_std_vector_Sl_float_Sg__methods, swig_std_vector_Sl_float_Sg__attributes, { "FloatVector", swig_std_vector_Sl_float_Sg__cls_methods, swig_std_vector_Sl_float_Sg__cls_attributes, swig_std_vector_Sl_float_Sg__cls_constants }, swig_std_vector_Sl_float_Sg__bases, swig_std_vector_Sl_float_Sg__base_names };

static int _wrap_new_StringVector__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::vector< std::string > *result = 0 ;
  SWIG_check_num_args("std::vector< std::string >::vector",0,0)
  result = (std::vector< std::string > *)new std::vector< std::string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_StringVector__SWIG_1(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ;
  std::vector< std::string > *result = 0 ; SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_StringVector__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ; SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"std::vector< std::string > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("new_StringVector",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_StringVector__SWIG_3(lua_State* L) { int SWIG_arg = 0; unsigned int arg1 ; std::string arg2 ;
  std::vector< std::string > *result = 0 ; SWIG_check_num_args("std::vector< std::string >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::vector",2,"std::string");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative") arg1 = (unsigned int)lua_tonumber(L, 1);
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_StringVector(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_StringVector__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_StringVector__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_new_StringVector__SWIG_3(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StringVector'\n" "  Possible C/C++ prototypes are:\n"
  "    std::vector< std::string >::vector()\n" "    std::vector< std::string >::vector(unsigned int)\n"
  "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
  "    std::vector< std::string >::vector(unsigned int,std::string)\n"); lua_error(L);return 0; }
static int _wrap_StringVector_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< std::string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::size",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_size",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (unsigned int)((std::vector< std::string > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_max_size(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; unsigned int result;
  SWIG_check_num_args("std::vector< std::string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::max_size",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_max_size",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (unsigned int)((std::vector< std::string > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_empty(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; bool result;
  SWIG_check_num_args("std::vector< std::string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::empty",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_empty",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = (bool)((std::vector< std::string > const *)arg1)->empty(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_clear(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  SWIG_check_num_args("std::vector< std::string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::clear",1,"std::vector< std::string > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_clear",1,SWIGTYPE_p_std__vectorT_std__string_t); }  (arg1)->clear(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_push_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; std::string arg2 ;
  SWIG_check_num_args("std::vector< std::string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::push_back",1,"std::vector< std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::push_back",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_push_back",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->push_back(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_pop_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  SWIG_check_num_args("std::vector< std::string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::pop_back",1,"std::vector< std::string > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_pop_back",1,SWIGTYPE_p_std__vectorT_std__string_t); }  (arg1)->pop_back(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector_front(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; std::string result;
  SWIG_check_num_args("std::vector< std::string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::front",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_front",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = ((std::vector< std::string > const *)arg1)->front();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_StringVector_back(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; std::string result;
  SWIG_check_num_args("std::vector< std::string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::back",1,"std::vector< std::string > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_back",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  result = ((std::vector< std::string > const *)arg1)->back();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_StringVector___getitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; unsigned int arg2 ; std::string result;
  SWIG_check_num_args("std::vector< std::string >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__getitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__getitem__",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector___getitem",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2); try {
    result = std_vector_Sl_std_string_Sg____getitem__(arg1,arg2);}  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what()); }  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_StringVector___setitem(lua_State* L) { int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ; unsigned int arg2 ; std::string arg3 ;
  SWIG_check_num_args("std::vector< std::string >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__setitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__setitem__",2,"unsigned int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("std::vector< std::string >::__setitem__",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector___setitem",1,SWIGTYPE_p_std__vectorT_std__string_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); try { std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,arg3);} 
  catch(std::out_of_range &_e) { SWIG_exception(SWIG_IndexError, (&_e)->what()); }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_StringVector(void *obj) {
std::vector< std::string > *arg1 = (std::vector< std::string > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_std_string_Sg__methods[] = {
    {"size", _wrap_StringVector_size}, 
    {"max_size", _wrap_StringVector_max_size}, 
    {"empty", _wrap_StringVector_empty}, 
    {"clear", _wrap_StringVector_clear}, 
    {"push_back", _wrap_StringVector_push_back}, 
    {"pop_back", _wrap_StringVector_pop_back}, 
    {"front", _wrap_StringVector_front}, 
    {"back", _wrap_StringVector_back}, 
    {"__getitem", _wrap_StringVector___getitem}, 
    {"__setitem", _wrap_StringVector___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_std_string_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_std_vector_Sl_std_string_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_std_vector_Sl_std_string_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_std_vector_Sl_std_string_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_std_string_Sg__bases[] = {0};
static const char *swig_std_vector_Sl_std_string_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_std_string_Sg_ = { "StringVector", &SWIGTYPE_p_std__vectorT_std__string_t,_wrap_new_StringVector, swig_delete_StringVector, swig_std_vector_Sl_std_string_Sg__methods, swig_std_vector_Sl_std_string_Sg__attributes, { "StringVector", swig_std_vector_Sl_std_string_Sg__cls_methods, swig_std_vector_Sl_std_string_Sg__cls_attributes, swig_std_vector_Sl_std_string_Sg__cls_constants }, swig_std_vector_Sl_std_string_Sg__bases, swig_std_vector_Sl_std_string_Sg__base_names };

static int _wrap_ofIsVFlipped(lua_State* L) { int SWIG_arg = 0; bool result; SWIG_check_num_args("ofIsVFlipped",0,0)
  result = (bool)ofIsVFlipped(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseHasTexture_getTextureReference(lua_State* L) { int SWIG_arg = 0;
  ofBaseHasTexture *arg1 = (ofBaseHasTexture *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofBaseHasTexture::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseHasTexture::getTextureReference",1,"ofBaseHasTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseHasTexture,0))){
    SWIG_fail_ptr("ofBaseHasTexture_getTextureReference",1,SWIGTYPE_p_ofBaseHasTexture); } 
  result = (ofTexture *) &(arg1)->getTextureReference(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseHasTexture_setUseTexture(lua_State* L) { int SWIG_arg = 0;
  ofBaseHasTexture *arg1 = (ofBaseHasTexture *) 0 ; bool arg2 ; SWIG_check_num_args("ofBaseHasTexture::setUseTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseHasTexture::setUseTexture",1,"ofBaseHasTexture *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBaseHasTexture::setUseTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseHasTexture,0))){
    SWIG_fail_ptr("ofBaseHasTexture_setUseTexture",1,SWIGTYPE_p_ofBaseHasTexture); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseTexture(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofBaseHasTexture(void *obj) {
ofBaseHasTexture *arg1 = (ofBaseHasTexture *) obj;
delete arg1;
}
static swig_lua_method swig_ofBaseHasTexture_methods[] = {
    {"getTextureReference", _wrap_ofBaseHasTexture_getTextureReference}, 
    {"setUseTexture", _wrap_ofBaseHasTexture_setUseTexture}, 
    {0,0}
};
static swig_lua_attribute swig_ofBaseHasTexture_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofBaseHasTexture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofBaseHasTexture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofBaseHasTexture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofBaseHasTexture_bases[] = {0};
static const char *swig_ofBaseHasTexture_base_names[] = {0};
static swig_lua_class _wrap_class_ofBaseHasTexture = { "ofBaseHasTexture", &SWIGTYPE_p_ofBaseHasTexture,0, swig_delete_ofBaseHasTexture, swig_ofBaseHasTexture_methods, swig_ofBaseHasTexture_attributes, { "ofBaseHasTexture", swig_ofBaseHasTexture_cls_methods, swig_ofBaseHasTexture_cls_attributes, swig_ofBaseHasTexture_cls_constants }, swig_ofBaseHasTexture_bases, swig_ofBaseHasTexture_base_names };

static int _wrap_new_ofAbstractHasPixels(lua_State* L) { int SWIG_arg = 0; ofAbstractHasPixels *result = 0 ;
  SWIG_check_num_args("ofAbstractHasPixels::ofAbstractHasPixels",0,0) result = (ofAbstractHasPixels *)new ofAbstractHasPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofAbstractHasPixels,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_ofAbstractHasPixels(void *obj) {
ofAbstractHasPixels *arg1 = (ofAbstractHasPixels *) obj;
delete arg1;
}
static swig_lua_method swig_ofAbstractHasPixels_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ofAbstractHasPixels_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofAbstractHasPixels_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofAbstractHasPixels_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofAbstractHasPixels_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofAbstractHasPixels_bases[] = {0};
static const char *swig_ofAbstractHasPixels_base_names[] = {0};
static swig_lua_class _wrap_class_ofAbstractHasPixels = { "ofAbstractHasPixels", &SWIGTYPE_p_ofAbstractHasPixels,_wrap_new_ofAbstractHasPixels, swig_delete_ofAbstractHasPixels, swig_ofAbstractHasPixels_methods, swig_ofAbstractHasPixels_attributes, { "ofAbstractHasPixels", swig_ofAbstractHasPixels_cls_methods, swig_ofAbstractHasPixels_cls_attributes, swig_ofAbstractHasPixels_cls_constants }, swig_ofAbstractHasPixels_bases, swig_ofAbstractHasPixels_base_names };

static void swig_delete_ofAbstractImage(void *obj) {
ofAbstractImage *arg1 = (ofAbstractImage *) obj;
delete arg1;
}
static swig_lua_method swig_ofAbstractImage_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ofAbstractImage_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofAbstractImage_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofAbstractImage_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofAbstractImage_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofAbstractImage_bases[] = {0,0};
static const char *swig_ofAbstractImage_base_names[] = {"ofBaseHasTexture *",0};
static swig_lua_class _wrap_class_ofAbstractImage = { "ofAbstractImage", &SWIGTYPE_p_ofAbstractImage,0, swig_delete_ofAbstractImage, swig_ofAbstractImage_methods, swig_ofAbstractImage_attributes, { "ofAbstractImage", swig_ofAbstractImage_cls_methods, swig_ofAbstractImage_cls_attributes, swig_ofAbstractImage_cls_constants }, swig_ofAbstractImage_bases, swig_ofAbstractImage_base_names };

static int _wrap_ofBaseGLRenderer_setCurrentFBO(lua_State* L) { int SWIG_arg = 0;
  ofBaseGLRenderer *arg1 = (ofBaseGLRenderer *) 0 ; ofFbo *arg2 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofBaseGLRenderer::setCurrentFBO",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseGLRenderer::setCurrentFBO",1,"ofBaseGLRenderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofBaseGLRenderer::setCurrentFBO",2,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseGLRenderer,0))){
    SWIG_fail_ptr("ofBaseGLRenderer_setCurrentFBO",1,SWIGTYPE_p_ofBaseGLRenderer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("ofBaseGLRenderer_setCurrentFBO",2,SWIGTYPE_p_ofFbo); }  (arg1)->setCurrentFBO(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseGLRenderer_enableTextureTarget(lua_State* L) { int SWIG_arg = 0;
  ofBaseGLRenderer *arg1 = (ofBaseGLRenderer *) 0 ; int arg2 ; SWIG_check_num_args("ofBaseGLRenderer::enableTextureTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseGLRenderer::enableTextureTarget",1,"ofBaseGLRenderer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBaseGLRenderer::enableTextureTarget",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseGLRenderer,0))){
    SWIG_fail_ptr("ofBaseGLRenderer_enableTextureTarget",1,SWIGTYPE_p_ofBaseGLRenderer); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->enableTextureTarget(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofBaseGLRenderer_disableTextureTarget(lua_State* L) { int SWIG_arg = 0;
  ofBaseGLRenderer *arg1 = (ofBaseGLRenderer *) 0 ; int arg2 ; SWIG_check_num_args("ofBaseGLRenderer::disableTextureTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofBaseGLRenderer::disableTextureTarget",1,"ofBaseGLRenderer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBaseGLRenderer::disableTextureTarget",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofBaseGLRenderer,0))){
    SWIG_fail_ptr("ofBaseGLRenderer_disableTextureTarget",1,SWIGTYPE_p_ofBaseGLRenderer); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->disableTextureTarget(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofBaseGLRenderer(void *obj) {
ofBaseGLRenderer *arg1 = (ofBaseGLRenderer *) obj;
delete arg1;
}
static swig_lua_method swig_ofBaseGLRenderer_methods[] = {
    {"setCurrentFBO", _wrap_ofBaseGLRenderer_setCurrentFBO}, 
    {"enableTextureTarget", _wrap_ofBaseGLRenderer_enableTextureTarget}, 
    {"disableTextureTarget", _wrap_ofBaseGLRenderer_disableTextureTarget}, 
    {0,0}
};
static swig_lua_attribute swig_ofBaseGLRenderer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofBaseGLRenderer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofBaseGLRenderer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofBaseGLRenderer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofBaseGLRenderer_bases[] = {0};
static const char *swig_ofBaseGLRenderer_base_names[] = {0};
static swig_lua_class _wrap_class_ofBaseGLRenderer = { "ofBaseGLRenderer", &SWIGTYPE_p_ofBaseGLRenderer,0, swig_delete_ofBaseGLRenderer, swig_ofBaseGLRenderer_methods, swig_ofBaseGLRenderer_attributes, { "ofBaseGLRenderer", swig_ofBaseGLRenderer_cls_methods, swig_ofBaseGLRenderer_cls_attributes, swig_ofBaseGLRenderer_cls_constants }, swig_ofBaseGLRenderer_bases, swig_ofBaseGLRenderer_base_names };

static int _wrap_new_Style(lua_State* L) { int SWIG_arg = 0; ofStyle *result = 0 ; SWIG_check_num_args("ofStyle::ofStyle",0,0)
  result = (ofStyle *)new ofStyle(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofStyle,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_color_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ;
  ofColor *arg2 = (ofColor *) 0 ; SWIG_check_num_args("ofStyle::color",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::color",1,"ofStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofStyle::color",2,"ofColor *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_color_set",1,SWIGTYPE_p_ofStyle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Style_color_set",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  if (arg1) (arg1)->color = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_color_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofColor *result = 0 ;
  SWIG_check_num_args("ofStyle::color",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::color",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_color_get",1,SWIGTYPE_p_ofStyle); }  result = (ofColor *)& ((arg1)->color);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Style_bgColor_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ;
  ofColor *arg2 = (ofColor *) 0 ; SWIG_check_num_args("ofStyle::bgColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::bgColor",1,"ofStyle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofStyle::bgColor",2,"ofColor *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_bgColor_set",1,SWIGTYPE_p_ofStyle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Style_bgColor_set",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  if (arg1) (arg1)->bgColor = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_bgColor_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofColor *result = 0 ;
  SWIG_check_num_args("ofStyle::bgColor",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::bgColor",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_bgColor_get",1,SWIGTYPE_p_ofStyle); }  result = (ofColor *)& ((arg1)->bgColor);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Style_polyMode_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofPolyWindingMode arg2 ;
  SWIG_check_num_args("ofStyle::polyMode",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::polyMode",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::polyMode",2,"ofPolyWindingMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_polyMode_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (ofPolyWindingMode)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->polyMode = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_polyMode_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofPolyWindingMode result;
  SWIG_check_num_args("ofStyle::polyMode",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::polyMode",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_polyMode_get",1,SWIGTYPE_p_ofStyle); }  result = (ofPolyWindingMode) ((arg1)->polyMode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Style_rectMode_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofRectMode arg2 ;
  SWIG_check_num_args("ofStyle::rectMode",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::rectMode",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::rectMode",2,"ofRectMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_rectMode_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (ofRectMode)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rectMode = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_rectMode_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofRectMode result;
  SWIG_check_num_args("ofStyle::rectMode",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::rectMode",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_rectMode_get",1,SWIGTYPE_p_ofStyle); }  result = (ofRectMode) ((arg1)->rectMode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Style_bFill_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofStyle::bFill",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::bFill",1,"ofStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofStyle::bFill",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_bFill_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (lua_toboolean(L, 2)!=0); if (arg1) (arg1)->bFill = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_bFill_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; bool result;
  SWIG_check_num_args("ofStyle::bFill",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::bFill",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_bFill_get",1,SWIGTYPE_p_ofStyle); }  result = (bool) ((arg1)->bFill);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_drawBitmapMode_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ;
  ofDrawBitmapMode arg2 ; SWIG_check_num_args("ofStyle::drawBitmapMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::drawBitmapMode",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::drawBitmapMode",2,"ofDrawBitmapMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_drawBitmapMode_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (ofDrawBitmapMode)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->drawBitmapMode = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_drawBitmapMode_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ;
  ofDrawBitmapMode result; SWIG_check_num_args("ofStyle::drawBitmapMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::drawBitmapMode",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_drawBitmapMode_get",1,SWIGTYPE_p_ofStyle); }  result = (ofDrawBitmapMode) ((arg1)->drawBitmapMode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Style_blendingMode_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofBlendMode arg2 ;
  SWIG_check_num_args("ofStyle::blendingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::blendingMode",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::blendingMode",2,"ofBlendMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_blendingMode_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (ofBlendMode)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->blendingMode = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_blendingMode_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; ofBlendMode result;
  SWIG_check_num_args("ofStyle::blendingMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::blendingMode",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_blendingMode_get",1,SWIGTYPE_p_ofStyle); }  result = (ofBlendMode) ((arg1)->blendingMode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Style_smoothing_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofStyle::smoothing",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::smoothing",1,"ofStyle *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofStyle::smoothing",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_smoothing_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->smoothing = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_smoothing_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; bool result;
  SWIG_check_num_args("ofStyle::smoothing",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::smoothing",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_smoothing_get",1,SWIGTYPE_p_ofStyle); }  result = (bool) ((arg1)->smoothing);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_circleResolution_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int arg2 ;
  SWIG_check_num_args("ofStyle::circleResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::circleResolution",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::circleResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_circleResolution_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->circleResolution = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_circleResolution_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int result;
  SWIG_check_num_args("ofStyle::circleResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::circleResolution",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_circleResolution_get",1,SWIGTYPE_p_ofStyle); }  result = (int) ((arg1)->circleResolution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_sphereResolution_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int arg2 ;
  SWIG_check_num_args("ofStyle::sphereResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::sphereResolution",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::sphereResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_sphereResolution_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sphereResolution = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_sphereResolution_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int result;
  SWIG_check_num_args("ofStyle::sphereResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::sphereResolution",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_sphereResolution_get",1,SWIGTYPE_p_ofStyle); }  result = (int) ((arg1)->sphereResolution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_curveResolution_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int arg2 ;
  SWIG_check_num_args("ofStyle::curveResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::curveResolution",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::curveResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_curveResolution_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->curveResolution = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_curveResolution_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; int result;
  SWIG_check_num_args("ofStyle::curveResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::curveResolution",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_curveResolution_get",1,SWIGTYPE_p_ofStyle); }  result = (int) ((arg1)->curveResolution);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_lineWidth_set(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofStyle::lineWidth",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::lineWidth",1,"ofStyle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofStyle::lineWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_lineWidth_set",1,SWIGTYPE_p_ofStyle); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->lineWidth = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Style_lineWidth_get(lua_State* L) { int SWIG_arg = 0; ofStyle *arg1 = (ofStyle *) 0 ; float result;
  SWIG_check_num_args("ofStyle::lineWidth",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofStyle::lineWidth",1,"ofStyle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofStyle,0))){
    SWIG_fail_ptr("Style_lineWidth_get",1,SWIGTYPE_p_ofStyle); }  result = (float) ((arg1)->lineWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Style(void *obj) {
ofStyle *arg1 = (ofStyle *) obj;
delete arg1;
}
static swig_lua_method swig_ofStyle_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ofStyle_attributes[] = {
    { "color", _wrap_Style_color_get, _wrap_Style_color_set},
    { "bgColor", _wrap_Style_bgColor_get, _wrap_Style_bgColor_set},
    { "polyMode", _wrap_Style_polyMode_get, _wrap_Style_polyMode_set},
    { "rectMode", _wrap_Style_rectMode_get, _wrap_Style_rectMode_set},
    { "bFill", _wrap_Style_bFill_get, _wrap_Style_bFill_set},
    { "drawBitmapMode", _wrap_Style_drawBitmapMode_get, _wrap_Style_drawBitmapMode_set},
    { "blendingMode", _wrap_Style_blendingMode_get, _wrap_Style_blendingMode_set},
    { "smoothing", _wrap_Style_smoothing_get, _wrap_Style_smoothing_set},
    { "circleResolution", _wrap_Style_circleResolution_get, _wrap_Style_circleResolution_set},
    { "sphereResolution", _wrap_Style_sphereResolution_get, _wrap_Style_sphereResolution_set},
    { "curveResolution", _wrap_Style_curveResolution_get, _wrap_Style_curveResolution_set},
    { "lineWidth", _wrap_Style_lineWidth_get, _wrap_Style_lineWidth_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofStyle_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofStyle_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofStyle_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofStyle_bases[] = {0};
static const char *swig_ofStyle_base_names[] = {0};
static swig_lua_class _wrap_class_ofStyle = { "Style", &SWIGTYPE_p_ofStyle,_wrap_new_Style, swig_delete_Style, swig_ofStyle_methods, swig_ofStyle_attributes, { "Style", swig_ofStyle_cls_methods, swig_ofStyle_cls_attributes, swig_ofStyle_cls_constants }, swig_ofStyle_bases, swig_ofStyle_base_names };

static int _wrap_nextPow2(lua_State* L) { int SWIG_arg = 0; int arg1 ; int result; SWIG_check_num_args("ofNextPow2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNextPow2",1,"int"); arg1 = (int)lua_tonumber(L, 1); result = (int)ofNextPow2(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_resetElapsedTimeCounter(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofResetElapsedTimeCounter",0,0)
  ofResetElapsedTimeCounter(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getElapsedTimef(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofGetElapsedTimef",0,0)
  result = (float)ofGetElapsedTimef(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_getElapsedTimeMillis(lua_State* L) { int SWIG_arg = 0; unsigned long long result;
  SWIG_check_num_args("ofGetElapsedTimeMillis",0,0) result = (unsigned long long)ofGetElapsedTimeMillis();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getElapsedTimeMicros(lua_State* L) { int SWIG_arg = 0; unsigned long long result;
  SWIG_check_num_args("ofGetElapsedTimeMicros",0,0) result = (unsigned long long)ofGetElapsedTimeMicros();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getFraneNum(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetFrameNum",0,0)
  result = (int)ofGetFrameNum(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getSeconds(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetSeconds",0,0)
  result = (int)ofGetSeconds(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getMinutes(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetMinutes",0,0)
  result = (int)ofGetMinutes(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getHours(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetHours",0,0)
  result = (int)ofGetHours(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getUnixTime(lua_State* L) { int SWIG_arg = 0; unsigned int result; SWIG_check_num_args("ofGetUnixTime",0,0)
  result = (unsigned int)ofGetUnixTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_getSystemTime(lua_State* L) { int SWIG_arg = 0; unsigned long long result;
  SWIG_check_num_args("ofGetSystemTime",0,0) result = (unsigned long long)ofGetSystemTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getSystemTimeMicros(lua_State* L) { int SWIG_arg = 0; unsigned long long result;
  SWIG_check_num_args("ofGetSystemTimeMicros",0,0) result = (unsigned long long)ofGetSystemTimeMicros();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getTimestampString__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string result;
  SWIG_check_num_args("ofGetTimestampString",0,0) result = ofGetTimestampString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_getTimestampString__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofGetTimestampString",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofGetTimestampString",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofGetTimestampString(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_getTimestampString(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_getTimestampString__SWIG_0(L);}  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) {
      return _wrap_getTimestampString__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'getTimestampString'\n" "  Possible C/C++ prototypes are:\n"
  "    ofGetTimestampString()\n" "    ofGetTimestampString(std::string)\n"); lua_error(L);return 0; }
static int _wrap_getYear(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetYear",0,0)
  result = (int)ofGetYear(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getMonth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetMonth",0,0)
  result = (int)ofGetMonth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getDay(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetDay",0,0)
  result = (int)ofGetDay(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getWeekday(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWeekday",0,0)
  result = (int)ofGetWeekday(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_launchBrowser__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  SWIG_check_num_args("ofLaunchBrowser",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofLaunchBrowser",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofLaunchBrowser",2,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); ofLaunchBrowser(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_launchBrowser__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ;
  SWIG_check_num_args("ofLaunchBrowser",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofLaunchBrowser",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); ofLaunchBrowser(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_launchBrowser(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_launchBrowser__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_launchBrowser__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'launchBrowser'\n" "  Possible C/C++ prototypes are:\n"
  "    ofLaunchBrowser(std::string,bool)\n" "    ofLaunchBrowser(std::string)\n"); lua_error(L);return 0; }
static int _wrap_enableDataPath(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableDataPath",0,0)
  ofEnableDataPath(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_disableDataPath(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableDataPath",0,0)
  ofDisableDataPath(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_toDataPath__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; std::string result;
  SWIG_check_num_args("ofToDataPath",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofToDataPath",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofToDataPath",2,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); result = ofToDataPath(arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_toDataPath__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofToDataPath",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofToDataPath",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofToDataPath(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_toDataPath(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_toDataPath__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_toDataPath__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'toDataPath'\n" "  Possible C/C++ prototypes are:\n"
  "    ofToDataPath(std::string,bool)\n" "    ofToDataPath(std::string)\n"); lua_error(L);return 0; }
static int _wrap_setWorkingDirectoryToDefault(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofSetWorkingDirectoryToDefault",0,0) ofSetWorkingDirectoryToDefault(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_setDataPathRoot(lua_State* L) { int SWIG_arg = 0; std::string arg1 ;
  SWIG_check_num_args("ofSetDataPathRoot",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSetDataPathRoot",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); ofSetDataPathRoot(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getVersionInfo(lua_State* L) { int SWIG_arg = 0; std::string result;
  SWIG_check_num_args("ofGetVersionInfo",0,0) result = ofGetVersionInfo();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_getVersionMajor(lua_State* L) { int SWIG_arg = 0; unsigned int result;
  SWIG_check_num_args("ofGetVersionMajor",0,0) result = (unsigned int)ofGetVersionMajor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getVersionMinor(lua_State* L) { int SWIG_arg = 0; unsigned int result;
  SWIG_check_num_args("ofGetVersionMinor",0,0) result = (unsigned int)ofGetVersionMinor();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getVersionPath(lua_State* L) { int SWIG_arg = 0; unsigned int result;
  SWIG_check_num_args("ofGetVersionPatch",0,0) result = (unsigned int)ofGetVersionPatch();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_saveScreen(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; SWIG_check_num_args("ofSaveScreen",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSaveScreen",1,"std::string"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  ofSaveScreen(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_saveFrame__SWIG_0(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSaveFrame",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSaveFrame",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofSaveFrame(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_saveFrame__SWIG_1(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSaveFrame",0,0) ofSaveFrame();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_saveFrame(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_saveFrame__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isboolean(L,argv[0]); }  if (_v) {
      return _wrap_saveFrame__SWIG_0(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'saveFrame'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSaveFrame(bool)\n" "    ofSaveFrame()\n"); lua_error(L);return 0; }
static int _wrap_saveViewport(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; SWIG_check_num_args("ofSaveViewport",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSaveViewport",1,"std::string"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  ofSaveViewport(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_splitString__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  bool arg3 ; bool arg4 ; std::string temp1 ; std::string temp2 ; std::vector< std::string > result;
  SWIG_check_num_args("ofSplitString",4,4) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSplitString",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSplitString",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofSplitString",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofSplitString",4,"bool"); temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0); result = ofSplitString((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4); {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_splitString__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  bool arg3 ; std::string temp1 ; std::string temp2 ; std::vector< std::string > result;
  SWIG_check_num_args("ofSplitString",3,3) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSplitString",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSplitString",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofSplitString",3,"bool"); temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (lua_toboolean(L, 3)!=0);
  result = ofSplitString((std::string const &)*arg1,(std::string const &)*arg2,arg3); {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_splitString__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string *arg2 = 0 ;
  std::string temp1 ; std::string temp2 ; std::vector< std::string > result; SWIG_check_num_args("ofSplitString",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSplitString",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSplitString",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ofSplitString((std::string const &)*arg1,(std::string const &)*arg2); {
    std::vector< std::string > * resultptr = new std::vector< std::string >((const std::vector< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_splitString(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_splitString__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { {
        _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_splitString__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) {
      { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_splitString__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'splitString'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSplitString(std::string const &,std::string const &,bool,bool)\n"
  "    ofSplitString(std::string const &,std::string const &,bool)\n"
  "    ofSplitString(std::string const &,std::string const &)\n"); lua_error(L);return 0; }
static int _wrap_joinString(lua_State* L) { int SWIG_arg = 0; std::vector< std::string > arg1 ; std::string *arg2 = 0 ;
  std::vector< std::string > *argp1 ; std::string temp2 ; std::string result; SWIG_check_num_args("ofJoinString",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofJoinString",1,"std::vector< std::string >");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofJoinString",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("joinString",1,SWIGTYPE_p_std__vectorT_std__string_t); }  arg1 = *argp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; result = ofJoinString(arg1,(std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_stringReplace(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string arg2 ; std::string arg3 ;
  SWIG_check_num_args("ofStringReplace",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofStringReplace",1,"std::string &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofStringReplace",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofStringReplace",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("stringReplace",1,SWIGTYPE_p_std__string); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); ofStringReplace(*arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_isStringInString(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; bool result;
  SWIG_check_num_args("ofIsStringInString",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofIsStringInString",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofIsStringInString",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)ofIsStringInString(arg1,arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofStringTimesInString(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string arg2 ; int result;
  SWIG_check_num_args("ofStringTimesInString",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofStringTimesInString",1,"std::string");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofStringTimesInString",2,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (int)ofStringTimesInString(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_toLower(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; std::string result;
  SWIG_check_num_args("ofToLower",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofToLower",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofToLower((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_toUpper(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ; std::string result;
  SWIG_check_num_args("ofToUpper",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofToUpper",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1; result = ofToUpper((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_system(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; std::string result;
  SWIG_check_num_args("ofSystem",1,1) if(!lua_isstring(L,1)) SWIG_fail_arg("ofSystem",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); result = ofSystem(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_getTargetPlatform(lua_State* L) { int SWIG_arg = 0; ofTargetPlatform result;
  SWIG_check_num_args("ofGetTargetPlatform",0,0) result = (ofTargetPlatform)ofGetTargetPlatform();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Color__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",0,0)
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Color__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Color__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Color__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *arg1 = 0 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >((ofColor_< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Color__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *arg1 = 0 ; float arg2 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"ofColor_< unsigned char > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >((ofColor_< unsigned char > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Color__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Color__SWIG_6(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::ofColor_",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::ofColor_",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (ofColor_< unsigned char > *)new ofColor_< unsigned char >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Color(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Color__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Color__SWIG_3(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_Color__SWIG_6(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_new_Color__SWIG_4(L);}  }  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_Color__SWIG_5(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_Color__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_Color__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Color'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::ofColor_()\n" "    ofColor_< unsigned char >::ofColor_(float,float,float,float)\n"
  "    ofColor_< unsigned char >::ofColor_(float,float,float)\n"
  "    ofColor_< unsigned char >::ofColor_(ofColor_< unsigned char > const &)\n"
  "    ofColor_< unsigned char >::ofColor_(ofColor_< unsigned char > const &,float)\n"
  "    ofColor_< unsigned char >::ofColor_(float,float)\n" "    ofColor_< unsigned char >::ofColor_(float)\n");
  lua_error(L);return 0; }
static int _wrap_Color_fromHsb__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::fromHsb",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3,arg4); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_fromHsb__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::fromHsb",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::fromHsb",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHsb(arg1,arg2,arg3); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_fromHsb(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Color_fromHsb__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Color_fromHsb__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color_fromHsb'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::fromHsb(float,float,float,float)\n"
  "    ofColor_< unsigned char >::fromHsb(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Color_fromHex__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; float arg2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::fromHex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::fromHex",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::fromHex",2,"float"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1,arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_fromHex__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofColor_< unsigned char >::fromHex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::fromHex",1,"int"); arg1 = (int)lua_tonumber(L, 1);
  result = ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR fromHex(arg1); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_fromHex(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_Color_fromHex__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Color_fromHex__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color_fromHex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::fromHex(int,float)\n" "    ofColor_< unsigned char >::fromHex(int)\n");
  lua_error(L);return 0; }
static int _wrap_Color_white_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::white",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::white;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_gray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::gray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::gray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_black_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::black",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::black;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_red_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::red",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::red;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_green_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::green",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::green;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_blue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::blue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_cyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::cyan",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_magenta_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::magenta",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::magenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_yellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::yellow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::yellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_aliceBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::aliceBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::aliceBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_antiqueWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::antiqueWhite",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::antiqueWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_aqua_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::aqua",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::aqua;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_aquamarine_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::aquamarine",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::aquamarine;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_azure_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::azure",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::azure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_beige_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::beige",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::beige;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_bisque_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::bisque",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::bisque;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_blanchedAlmond_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::blanchedAlmond",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blanchedAlmond;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_blueViolet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::blueViolet",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blueViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_brown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::brown",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::brown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_burlyWood_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::burlyWood",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::burlyWood;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_cadetBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::cadetBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cadetBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_chartreuse_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::chartreuse",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::chartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_chocolate_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::chocolate",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::chocolate;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_coral_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::coral",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::coral;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_cornflowerBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::cornflowerBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cornflowerBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_cornsilk_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::cornsilk",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::cornsilk;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_crimson_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::crimson",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::crimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkCyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkCyan",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkGoldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkGoldenRod",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGoldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkKhaki_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkKhaki",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkKhaki;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkMagenta_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkMagenta",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkOliveGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkOliveGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkOliveGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkorange_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkorange",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkorange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkOrchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkOrchid",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkOrchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkSalmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSalmon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSalmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSeaGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkSlateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSlateBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSlateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkSlateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSlateGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSlateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkSlateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkSlateGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkSlateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkTurquoise",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_darkViolet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::darkViolet",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::darkViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_deepPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::deepPink",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::deepPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_deepSkyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::deepSkyBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::deepSkyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_dimGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::dimGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::dimGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_dimGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::dimGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::dimGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_dodgerBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::dodgerBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::dodgerBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_fireBrick_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::fireBrick",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::fireBrick;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_floralWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::floralWhite",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::floralWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_forestGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::forestGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::forestGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_fuchsia_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::fuchsia",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::fuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_gainsboro_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::gainsboro",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::gainsboro;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_ghostWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::ghostWhite",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::ghostWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_gold_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::gold",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::gold;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_goldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::goldenRod",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::goldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_grey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::grey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::grey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_greenYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::greenYellow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::greenYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_honeyDew_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::honeyDew",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::honeyDew;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_hotPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::hotPink",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::hotPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_indianRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::indianRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::indianRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_indigo_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::indigo",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::indigo;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_ivory_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::ivory",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::ivory;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_khaki_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::khaki",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::khaki;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lavender_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lavender",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lavender;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lavenderBlush_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lavenderBlush",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lavenderBlush;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lawnGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lawnGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lawnGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lemonChiffon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lemonChiffon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lemonChiffon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightCoral_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightCoral",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightCoral;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightCyan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightCyan",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightGoldenRodYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightGoldenRodYellow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGoldenRodYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightPink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightPink",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightSalmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSalmon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSalmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSeaGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightSkyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSkyBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSkyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightSlateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSlateGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSlateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightSlateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSlateGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSlateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightSteelBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightSteelBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightSteelBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lightYellow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lightYellow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lightYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lime_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::lime",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::lime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_limeGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::limeGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::limeGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_linen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::linen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::linen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_maroon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::maroon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::maroon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mediumAquaMarine_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumAquaMarine",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumAquaMarine;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mediumBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mediumOrchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumOrchid",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumOrchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mediumPurple_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumPurple",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mediumSeaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumSeaGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumSeaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mediumSlateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumSlateBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumSlateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mediumSpringGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumSpringGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumSpringGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mediumTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumTurquoise",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mediumVioletRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mediumVioletRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mediumVioletRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_midnightBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::midnightBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::midnightBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mintCream_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mintCream",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mintCream;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_mistyRose_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::mistyRose",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::mistyRose;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_moccasin_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::moccasin",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::moccasin;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_navajoWhite_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::navajoWhite",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::navajoWhite;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_navy_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::navy",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::navy;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_oldLace_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::oldLace",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::oldLace;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_olive_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::olive",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::olive;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_oliveDrab_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::oliveDrab",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::oliveDrab;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_orange_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::orange",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::orange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_orangeRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::orangeRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::orangeRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_orchid_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::orchid",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::orchid;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_paleGoldenRod_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::paleGoldenRod",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleGoldenRod;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_paleGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::paleGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_paleTurquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::paleTurquoise",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_paleVioletRed_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::paleVioletRed",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::paleVioletRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_papayaWhip_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::papayaWhip",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::papayaWhip;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_peachPuff_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::peachPuff",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::peachPuff;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_peru_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::peru",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::peru;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_pink_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::pink",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::pink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_plum_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::plum",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::plum;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_powderBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::powderBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::powderBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_purple_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::purple",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::purple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_rosyBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::rosyBrown",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::rosyBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_royalBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::royalBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::royalBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_saddleBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::saddleBrown",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::saddleBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_salmon_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::salmon",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::salmon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_sandyBrown_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::sandyBrown",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::sandyBrown;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_seaGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::seaGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::seaGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_seaShell_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::seaShell",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::seaShell;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_sienna_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::sienna",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::sienna;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_silver_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::silver",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::silver;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_skyBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::skyBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::skyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_slateBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::slateBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::slateBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_slateGray_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::slateGray",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::slateGray;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_slateGrey_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::slateGrey",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::slateGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_snow_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::snow",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::snow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_springGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::springGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::springGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_steelBlue_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::steelBlue",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::steelBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_blueSteel_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::blueSteel",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::blueSteel;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_tan_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::tan",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::tan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_teal_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::teal",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::teal;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_thistle_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::thistle",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::thistle;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_tomato_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::tomato",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::tomato;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_turquoise_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::turquoise",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::turquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_violet_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::violet",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::violet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_wheat_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::wheat",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::wheat;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_whiteSmoke_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::whiteSmoke",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::whiteSmoke;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_yellowGreen_get(lua_State* L) { int SWIG_arg = 0; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::yellowGreen",0,0)
  result = (ofColor_< unsigned char > *)&ofColor_< unsigned char >::yellowGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofColor_< unsigned char >::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::set",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->set(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_set__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Color_set__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_set__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::set",1,"ofColor_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::set",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_set",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_set",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  (arg1)->set((ofColor_< unsigned char > const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Color_set__SWIG_4(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Color_set__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Color_set__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Color_set__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Color_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::set(float,float,float,float)\n" "    ofColor_< unsigned char >::set(float,float,float)\n"
  "    ofColor_< unsigned char >::set(float,float)\n" "    ofColor_< unsigned char >::set(float)\n"
  "    ofColor_< unsigned char >::set(ofColor_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_Color_setHex__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; int arg2 ; float arg3 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setHex",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setHex(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Color_setHex__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setHex",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setHex(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setHex(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Color_setHex__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Color_setHex__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color_setHex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::setHex(int,float)\n" "    ofColor_< unsigned char >::setHex(int)\n"); lua_error(L);return 0; }
static int _wrap_Color_getHex(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofColor_< unsigned char >::getHex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getHex",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getHex",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (int)((ofColor_< unsigned char > const *)arg1)->getHex(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_clamp(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::clamp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::clamp",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_clamp",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (ofColor_< unsigned char > *) &(arg1)->clamp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_invert(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::invert",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_invert",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (ofColor_< unsigned char > *) &(arg1)->invert();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_normalize(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::normalize",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_normalize",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (ofColor_< unsigned char > *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_lerp(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ; float arg3 ;
  ofColor_< unsigned char > *result = 0 ; SWIG_check_num_args("ofColor_< unsigned char >::lerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::lerp",1,"ofColor_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::lerp",2,"ofColor_< unsigned char > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::lerp",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_lerp",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_lerp",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofColor_< unsigned char > *) &(arg1)->lerp((ofColor_< unsigned char > const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Color_getClamped(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofColor_< unsigned char >::getClamped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getClamped",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getClamped",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->getClamped(); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getInverted(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofColor_< unsigned char >::getInverted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getInverted",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getInverted",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->getInverted(); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getNormalized(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofColor_< unsigned char >::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getNormalized",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getNormalized",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->getNormalized(); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getLerped(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ; float arg3 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::getLerped",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getLerped",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::getLerped",2,"ofColor_< unsigned char > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::getLerped",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getLerped",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getLerped",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofColor_< unsigned char > const *)arg1)->getLerped((ofColor_< unsigned char > const &)*arg2,arg3); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getHue(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::getHue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getHue",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getHue",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (float)((ofColor_< unsigned char > const *)arg1)->getHue(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getSaturation(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::getSaturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getSaturation",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getSaturation",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (float)((ofColor_< unsigned char > const *)arg1)->getSaturation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getBrightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::getBrightness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getBrightness",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getBrightness",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (float)((ofColor_< unsigned char > const *)arg1)->getBrightness();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getLightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::getLightness",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getLightness",1,"ofColor_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getLightness",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (float)((ofColor_< unsigned char > const *)arg1)->getLightness(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getHsb(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::getHsb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getHsb",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::getHsb",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::getHsb",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::getHsb",4,"float &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getHsb",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("Color_getHsb",2,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("Color_getHsb",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("Color_getHsb",4,SWIGTYPE_p_float); } 
  ((ofColor_< unsigned char > const *)arg1)->getHsb(*arg2,*arg3,*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Color_setHue(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHue",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHue",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setHue",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHue(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setSaturation(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setSaturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setSaturation",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setSaturation",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setSaturation",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSaturation(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setBrightness(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setBrightness",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setBrightness",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setBrightness",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setBrightness",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setBrightness(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setHsb__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHsb",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setHsb",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setHsb(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setHsb__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setHsb",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofColor_< unsigned char >::setHsb",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setHsb",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setHsb(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setHsb(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Color_setHsb__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Color_setHsb__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color_setHsb'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::setHsb(float,float,float,float)\n"
  "    ofColor_< unsigned char >::setHsb(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Color___eq(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofColor_< unsigned char >::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator ==",1,"ofColor_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator ==",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___eq",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___eq",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (bool)(arg1)->operator ==((ofColor_< unsigned char > const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___add__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator +",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator +",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___add",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___add",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->operator +((ofColor_< unsigned char > const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___add__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator +",1,"ofColor_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator +",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___add",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned char > const *)arg1)->operator +((float const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Color___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Color___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::operator +(ofColor_< unsigned char > const &) const\n"
  "    ofColor_< unsigned char >::operator +(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_Color___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator -",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator -",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___sub",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___sub",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->operator -((ofColor_< unsigned char > const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator -",1,"ofColor_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator -",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___sub",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned char > const *)arg1)->operator -((float const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Color___sub__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Color___sub__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::operator -(ofColor_< unsigned char > const &) const\n"
  "    ofColor_< unsigned char >::operator -(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_Color___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator *",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator *",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___mul",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___mul",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->operator *((ofColor_< unsigned char > const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator *",1,"ofColor_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator *",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___mul",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned char > const *)arg1)->operator *((float const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Color___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Color___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::operator *(ofColor_< unsigned char > const &) const\n"
  "    ofColor_< unsigned char >::operator *(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_Color___div__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator /",1,"ofColor_< unsigned char > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator /",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___div",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___div",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = ((ofColor_< unsigned char > const *)arg1)->operator /((ofColor_< unsigned char > const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___div__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; float *arg2 = 0 ; float temp2 ;
  ofColor_< unsigned char > result; SWIG_check_num_args("ofColor_< unsigned char >::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::operator /",1,"ofColor_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::operator /",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___div",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((ofColor_< unsigned char > const *)arg1)->operator /((float const &)*arg2); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Color___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Color___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Color___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofColor_< unsigned char >::operator /(ofColor_< unsigned char > const &) const\n"
  "    ofColor_< unsigned char >::operator /(float const &) const\n"); lua_error(L);return 0; }
static int _wrap_Color_limit(lua_State* L) { int SWIG_arg = 0; float result;
  SWIG_check_num_args("ofColor_< unsigned char >::limit",0,0)
  result = (float)ofColor_< unsigned char >::SWIGTEMPLATEDISAMBIGUATOR limit();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getR(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::getR",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getR",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getR",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__getR(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getG(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::getG",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getG",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getG",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__getG(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getB(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::getB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getB",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getB",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__getB(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_getA(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char result;
  SWIG_check_num_args("ofColor_< unsigned char >::getA",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::getA",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_getA",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (unsigned char)ofColor__Sl_unsigned_SS_char_Sg__getA(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setR(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setR",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setR",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setR",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setR",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__setR(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setG(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setG",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setG",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setG",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setG",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__setG(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setB(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setB",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setB",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setB",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__setB(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color_setA(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofColor_< unsigned char >::setA",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::setA",1,"ofColor_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofColor_< unsigned char >::setA",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color_setA",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  ofColor__Sl_unsigned_SS_char_Sg__setA(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Color___tostring(lua_State* L) { int SWIG_arg = 0;
  ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) 0 ; char *result = 0 ;
  SWIG_check_num_args("ofColor_< unsigned char >::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofColor_< unsigned char >::__str__",1,"ofColor_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Color___tostring",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  result = (char *)ofColor__Sl_unsigned_SS_char_Sg____str__(arg1); lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Color(void *obj) {
ofColor_< unsigned char > *arg1 = (ofColor_< unsigned char > *) obj;
delete arg1;
}
static swig_lua_method swig_ofColor__Sl_unsigned_SS_char_Sg__methods[] = {
    {"set", _wrap_Color_set}, 
    {"setHex", _wrap_Color_setHex}, 
    {"getHex", _wrap_Color_getHex}, 
    {"clamp", _wrap_Color_clamp}, 
    {"invert", _wrap_Color_invert}, 
    {"normalize", _wrap_Color_normalize}, 
    {"lerp", _wrap_Color_lerp}, 
    {"getClamped", _wrap_Color_getClamped}, 
    {"getInverted", _wrap_Color_getInverted}, 
    {"getNormalized", _wrap_Color_getNormalized}, 
    {"getLerped", _wrap_Color_getLerped}, 
    {"getHue", _wrap_Color_getHue}, 
    {"getSaturation", _wrap_Color_getSaturation}, 
    {"getBrightness", _wrap_Color_getBrightness}, 
    {"getLightness", _wrap_Color_getLightness}, 
    {"getHsb", _wrap_Color_getHsb}, 
    {"setHue", _wrap_Color_setHue}, 
    {"setSaturation", _wrap_Color_setSaturation}, 
    {"setBrightness", _wrap_Color_setBrightness}, 
    {"setHsb", _wrap_Color_setHsb}, 
    {"__eq", _wrap_Color___eq}, 
    {"__add", _wrap_Color___add}, 
    {"__sub", _wrap_Color___sub}, 
    {"__mul", _wrap_Color___mul}, 
    {"__div", _wrap_Color___div}, 
    {"getR", _wrap_Color_getR}, 
    {"getG", _wrap_Color_getG}, 
    {"getB", _wrap_Color_getB}, 
    {"getA", _wrap_Color_getA}, 
    {"setR", _wrap_Color_setR}, 
    {"setG", _wrap_Color_setG}, 
    {"setB", _wrap_Color_setB}, 
    {"setA", _wrap_Color_setA}, 
    {"__tostring", _wrap_Color___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_ofColor__Sl_unsigned_SS_char_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofColor__Sl_unsigned_SS_char_Sg__cls_attributes[] = {
    { "white", _wrap_Color_white_get, SWIG_Lua_set_immutable},
    { "gray", _wrap_Color_gray_get, SWIG_Lua_set_immutable},
    { "black", _wrap_Color_black_get, SWIG_Lua_set_immutable},
    { "red", _wrap_Color_red_get, SWIG_Lua_set_immutable},
    { "green", _wrap_Color_green_get, SWIG_Lua_set_immutable},
    { "blue", _wrap_Color_blue_get, SWIG_Lua_set_immutable},
    { "cyan", _wrap_Color_cyan_get, SWIG_Lua_set_immutable},
    { "magenta", _wrap_Color_magenta_get, SWIG_Lua_set_immutable},
    { "yellow", _wrap_Color_yellow_get, SWIG_Lua_set_immutable},
    { "aliceBlue", _wrap_Color_aliceBlue_get, SWIG_Lua_set_immutable},
    { "antiqueWhite", _wrap_Color_antiqueWhite_get, SWIG_Lua_set_immutable},
    { "aqua", _wrap_Color_aqua_get, SWIG_Lua_set_immutable},
    { "aquamarine", _wrap_Color_aquamarine_get, SWIG_Lua_set_immutable},
    { "azure", _wrap_Color_azure_get, SWIG_Lua_set_immutable},
    { "beige", _wrap_Color_beige_get, SWIG_Lua_set_immutable},
    { "bisque", _wrap_Color_bisque_get, SWIG_Lua_set_immutable},
    { "blanchedAlmond", _wrap_Color_blanchedAlmond_get, SWIG_Lua_set_immutable},
    { "blueViolet", _wrap_Color_blueViolet_get, SWIG_Lua_set_immutable},
    { "brown", _wrap_Color_brown_get, SWIG_Lua_set_immutable},
    { "burlyWood", _wrap_Color_burlyWood_get, SWIG_Lua_set_immutable},
    { "cadetBlue", _wrap_Color_cadetBlue_get, SWIG_Lua_set_immutable},
    { "chartreuse", _wrap_Color_chartreuse_get, SWIG_Lua_set_immutable},
    { "chocolate", _wrap_Color_chocolate_get, SWIG_Lua_set_immutable},
    { "coral", _wrap_Color_coral_get, SWIG_Lua_set_immutable},
    { "cornflowerBlue", _wrap_Color_cornflowerBlue_get, SWIG_Lua_set_immutable},
    { "cornsilk", _wrap_Color_cornsilk_get, SWIG_Lua_set_immutable},
    { "crimson", _wrap_Color_crimson_get, SWIG_Lua_set_immutable},
    { "darkBlue", _wrap_Color_darkBlue_get, SWIG_Lua_set_immutable},
    { "darkCyan", _wrap_Color_darkCyan_get, SWIG_Lua_set_immutable},
    { "darkGoldenRod", _wrap_Color_darkGoldenRod_get, SWIG_Lua_set_immutable},
    { "darkGray", _wrap_Color_darkGray_get, SWIG_Lua_set_immutable},
    { "darkGrey", _wrap_Color_darkGrey_get, SWIG_Lua_set_immutable},
    { "darkGreen", _wrap_Color_darkGreen_get, SWIG_Lua_set_immutable},
    { "darkKhaki", _wrap_Color_darkKhaki_get, SWIG_Lua_set_immutable},
    { "darkMagenta", _wrap_Color_darkMagenta_get, SWIG_Lua_set_immutable},
    { "darkOliveGreen", _wrap_Color_darkOliveGreen_get, SWIG_Lua_set_immutable},
    { "darkorange", _wrap_Color_darkorange_get, SWIG_Lua_set_immutable},
    { "darkOrchid", _wrap_Color_darkOrchid_get, SWIG_Lua_set_immutable},
    { "darkRed", _wrap_Color_darkRed_get, SWIG_Lua_set_immutable},
    { "darkSalmon", _wrap_Color_darkSalmon_get, SWIG_Lua_set_immutable},
    { "darkSeaGreen", _wrap_Color_darkSeaGreen_get, SWIG_Lua_set_immutable},
    { "darkSlateBlue", _wrap_Color_darkSlateBlue_get, SWIG_Lua_set_immutable},
    { "darkSlateGray", _wrap_Color_darkSlateGray_get, SWIG_Lua_set_immutable},
    { "darkSlateGrey", _wrap_Color_darkSlateGrey_get, SWIG_Lua_set_immutable},
    { "darkTurquoise", _wrap_Color_darkTurquoise_get, SWIG_Lua_set_immutable},
    { "darkViolet", _wrap_Color_darkViolet_get, SWIG_Lua_set_immutable},
    { "deepPink", _wrap_Color_deepPink_get, SWIG_Lua_set_immutable},
    { "deepSkyBlue", _wrap_Color_deepSkyBlue_get, SWIG_Lua_set_immutable},
    { "dimGray", _wrap_Color_dimGray_get, SWIG_Lua_set_immutable},
    { "dimGrey", _wrap_Color_dimGrey_get, SWIG_Lua_set_immutable},
    { "dodgerBlue", _wrap_Color_dodgerBlue_get, SWIG_Lua_set_immutable},
    { "fireBrick", _wrap_Color_fireBrick_get, SWIG_Lua_set_immutable},
    { "floralWhite", _wrap_Color_floralWhite_get, SWIG_Lua_set_immutable},
    { "forestGreen", _wrap_Color_forestGreen_get, SWIG_Lua_set_immutable},
    { "fuchsia", _wrap_Color_fuchsia_get, SWIG_Lua_set_immutable},
    { "gainsboro", _wrap_Color_gainsboro_get, SWIG_Lua_set_immutable},
    { "ghostWhite", _wrap_Color_ghostWhite_get, SWIG_Lua_set_immutable},
    { "gold", _wrap_Color_gold_get, SWIG_Lua_set_immutable},
    { "goldenRod", _wrap_Color_goldenRod_get, SWIG_Lua_set_immutable},
    { "grey", _wrap_Color_grey_get, SWIG_Lua_set_immutable},
    { "greenYellow", _wrap_Color_greenYellow_get, SWIG_Lua_set_immutable},
    { "honeyDew", _wrap_Color_honeyDew_get, SWIG_Lua_set_immutable},
    { "hotPink", _wrap_Color_hotPink_get, SWIG_Lua_set_immutable},
    { "indianRed", _wrap_Color_indianRed_get, SWIG_Lua_set_immutable},
    { "indigo", _wrap_Color_indigo_get, SWIG_Lua_set_immutable},
    { "ivory", _wrap_Color_ivory_get, SWIG_Lua_set_immutable},
    { "khaki", _wrap_Color_khaki_get, SWIG_Lua_set_immutable},
    { "lavender", _wrap_Color_lavender_get, SWIG_Lua_set_immutable},
    { "lavenderBlush", _wrap_Color_lavenderBlush_get, SWIG_Lua_set_immutable},
    { "lawnGreen", _wrap_Color_lawnGreen_get, SWIG_Lua_set_immutable},
    { "lemonChiffon", _wrap_Color_lemonChiffon_get, SWIG_Lua_set_immutable},
    { "lightBlue", _wrap_Color_lightBlue_get, SWIG_Lua_set_immutable},
    { "lightCoral", _wrap_Color_lightCoral_get, SWIG_Lua_set_immutable},
    { "lightCyan", _wrap_Color_lightCyan_get, SWIG_Lua_set_immutable},
    { "lightGoldenRodYellow", _wrap_Color_lightGoldenRodYellow_get, SWIG_Lua_set_immutable},
    { "lightGray", _wrap_Color_lightGray_get, SWIG_Lua_set_immutable},
    { "lightGrey", _wrap_Color_lightGrey_get, SWIG_Lua_set_immutable},
    { "lightGreen", _wrap_Color_lightGreen_get, SWIG_Lua_set_immutable},
    { "lightPink", _wrap_Color_lightPink_get, SWIG_Lua_set_immutable},
    { "lightSalmon", _wrap_Color_lightSalmon_get, SWIG_Lua_set_immutable},
    { "lightSeaGreen", _wrap_Color_lightSeaGreen_get, SWIG_Lua_set_immutable},
    { "lightSkyBlue", _wrap_Color_lightSkyBlue_get, SWIG_Lua_set_immutable},
    { "lightSlateGray", _wrap_Color_lightSlateGray_get, SWIG_Lua_set_immutable},
    { "lightSlateGrey", _wrap_Color_lightSlateGrey_get, SWIG_Lua_set_immutable},
    { "lightSteelBlue", _wrap_Color_lightSteelBlue_get, SWIG_Lua_set_immutable},
    { "lightYellow", _wrap_Color_lightYellow_get, SWIG_Lua_set_immutable},
    { "lime", _wrap_Color_lime_get, SWIG_Lua_set_immutable},
    { "limeGreen", _wrap_Color_limeGreen_get, SWIG_Lua_set_immutable},
    { "linen", _wrap_Color_linen_get, SWIG_Lua_set_immutable},
    { "maroon", _wrap_Color_maroon_get, SWIG_Lua_set_immutable},
    { "mediumAquaMarine", _wrap_Color_mediumAquaMarine_get, SWIG_Lua_set_immutable},
    { "mediumBlue", _wrap_Color_mediumBlue_get, SWIG_Lua_set_immutable},
    { "mediumOrchid", _wrap_Color_mediumOrchid_get, SWIG_Lua_set_immutable},
    { "mediumPurple", _wrap_Color_mediumPurple_get, SWIG_Lua_set_immutable},
    { "mediumSeaGreen", _wrap_Color_mediumSeaGreen_get, SWIG_Lua_set_immutable},
    { "mediumSlateBlue", _wrap_Color_mediumSlateBlue_get, SWIG_Lua_set_immutable},
    { "mediumSpringGreen", _wrap_Color_mediumSpringGreen_get, SWIG_Lua_set_immutable},
    { "mediumTurquoise", _wrap_Color_mediumTurquoise_get, SWIG_Lua_set_immutable},
    { "mediumVioletRed", _wrap_Color_mediumVioletRed_get, SWIG_Lua_set_immutable},
    { "midnightBlue", _wrap_Color_midnightBlue_get, SWIG_Lua_set_immutable},
    { "mintCream", _wrap_Color_mintCream_get, SWIG_Lua_set_immutable},
    { "mistyRose", _wrap_Color_mistyRose_get, SWIG_Lua_set_immutable},
    { "moccasin", _wrap_Color_moccasin_get, SWIG_Lua_set_immutable},
    { "navajoWhite", _wrap_Color_navajoWhite_get, SWIG_Lua_set_immutable},
    { "navy", _wrap_Color_navy_get, SWIG_Lua_set_immutable},
    { "oldLace", _wrap_Color_oldLace_get, SWIG_Lua_set_immutable},
    { "olive", _wrap_Color_olive_get, SWIG_Lua_set_immutable},
    { "oliveDrab", _wrap_Color_oliveDrab_get, SWIG_Lua_set_immutable},
    { "orange", _wrap_Color_orange_get, SWIG_Lua_set_immutable},
    { "orangeRed", _wrap_Color_orangeRed_get, SWIG_Lua_set_immutable},
    { "orchid", _wrap_Color_orchid_get, SWIG_Lua_set_immutable},
    { "paleGoldenRod", _wrap_Color_paleGoldenRod_get, SWIG_Lua_set_immutable},
    { "paleGreen", _wrap_Color_paleGreen_get, SWIG_Lua_set_immutable},
    { "paleTurquoise", _wrap_Color_paleTurquoise_get, SWIG_Lua_set_immutable},
    { "paleVioletRed", _wrap_Color_paleVioletRed_get, SWIG_Lua_set_immutable},
    { "papayaWhip", _wrap_Color_papayaWhip_get, SWIG_Lua_set_immutable},
    { "peachPuff", _wrap_Color_peachPuff_get, SWIG_Lua_set_immutable},
    { "peru", _wrap_Color_peru_get, SWIG_Lua_set_immutable},
    { "pink", _wrap_Color_pink_get, SWIG_Lua_set_immutable},
    { "plum", _wrap_Color_plum_get, SWIG_Lua_set_immutable},
    { "powderBlue", _wrap_Color_powderBlue_get, SWIG_Lua_set_immutable},
    { "purple", _wrap_Color_purple_get, SWIG_Lua_set_immutable},
    { "rosyBrown", _wrap_Color_rosyBrown_get, SWIG_Lua_set_immutable},
    { "royalBlue", _wrap_Color_royalBlue_get, SWIG_Lua_set_immutable},
    { "saddleBrown", _wrap_Color_saddleBrown_get, SWIG_Lua_set_immutable},
    { "salmon", _wrap_Color_salmon_get, SWIG_Lua_set_immutable},
    { "sandyBrown", _wrap_Color_sandyBrown_get, SWIG_Lua_set_immutable},
    { "seaGreen", _wrap_Color_seaGreen_get, SWIG_Lua_set_immutable},
    { "seaShell", _wrap_Color_seaShell_get, SWIG_Lua_set_immutable},
    { "sienna", _wrap_Color_sienna_get, SWIG_Lua_set_immutable},
    { "silver", _wrap_Color_silver_get, SWIG_Lua_set_immutable},
    { "skyBlue", _wrap_Color_skyBlue_get, SWIG_Lua_set_immutable},
    { "slateBlue", _wrap_Color_slateBlue_get, SWIG_Lua_set_immutable},
    { "slateGray", _wrap_Color_slateGray_get, SWIG_Lua_set_immutable},
    { "slateGrey", _wrap_Color_slateGrey_get, SWIG_Lua_set_immutable},
    { "snow", _wrap_Color_snow_get, SWIG_Lua_set_immutable},
    { "springGreen", _wrap_Color_springGreen_get, SWIG_Lua_set_immutable},
    { "steelBlue", _wrap_Color_steelBlue_get, SWIG_Lua_set_immutable},
    { "blueSteel", _wrap_Color_blueSteel_get, SWIG_Lua_set_immutable},
    { "tan", _wrap_Color_tan_get, SWIG_Lua_set_immutable},
    { "teal", _wrap_Color_teal_get, SWIG_Lua_set_immutable},
    { "thistle", _wrap_Color_thistle_get, SWIG_Lua_set_immutable},
    { "tomato", _wrap_Color_tomato_get, SWIG_Lua_set_immutable},
    { "turquoise", _wrap_Color_turquoise_get, SWIG_Lua_set_immutable},
    { "violet", _wrap_Color_violet_get, SWIG_Lua_set_immutable},
    { "wheat", _wrap_Color_wheat_get, SWIG_Lua_set_immutable},
    { "whiteSmoke", _wrap_Color_whiteSmoke_get, SWIG_Lua_set_immutable},
    { "yellowGreen", _wrap_Color_yellowGreen_get, SWIG_Lua_set_immutable},
    {0,0,0}
};
static swig_lua_method swig_ofColor__Sl_unsigned_SS_char_Sg__cls_methods[] = {
    {"fromHsb", _wrap_Color_fromHsb}, 
    {"fromHex", _wrap_Color_fromHex}, 
    {"limit", _wrap_Color_limit}, 
    {0,0}
};
static swig_lua_const_info swig_ofColor__Sl_unsigned_SS_char_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofColor__Sl_unsigned_SS_char_Sg__bases[] = {0};
static const char *swig_ofColor__Sl_unsigned_SS_char_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_ofColor__Sl_unsigned_SS_char_Sg_ = { "Color", &SWIGTYPE_p_ofColor_T_unsigned_char_t,_wrap_new_Color, swig_delete_Color, swig_ofColor__Sl_unsigned_SS_char_Sg__methods, swig_ofColor__Sl_unsigned_SS_char_Sg__attributes, { "Color", swig_ofColor__Sl_unsigned_SS_char_Sg__cls_methods, swig_ofColor__Sl_unsigned_SS_char_Sg__cls_attributes, swig_ofColor__Sl_unsigned_SS_char_Sg__cls_constants }, swig_ofColor__Sl_unsigned_SS_char_Sg__bases, swig_ofColor__Sl_unsigned_SS_char_Sg__base_names };

static int _wrap_new_Rectangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *result = 0 ;
  SWIG_check_num_args("ofRectangle::ofRectangle",0,0) result = (ofRectangle *)new ofRectangle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Rectangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofRectangle *result = 0 ; SWIG_check_num_args("ofRectangle::ofRectangle",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRectangle::ofRectangle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::ofRectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::ofRectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::ofRectangle",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofRectangle *)new ofRectangle(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Rectangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  ofRectangle *result = 0 ; SWIG_check_num_args("ofRectangle::ofRectangle",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectangle::ofRectangle",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::ofRectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::ofRectangle",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_Rectangle",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (ofRectangle *)new ofRectangle((ofPoint const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Rectangle__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; ofRectangle *result = 0 ;
  SWIG_check_num_args("ofRectangle::ofRectangle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectangle::ofRectangle",1,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("new_Rectangle",1,SWIGTYPE_p_ofRectangle); } 
  result = (ofRectangle *)new ofRectangle((ofRectangle const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Rectangle__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  ofRectangle *result = 0 ; SWIG_check_num_args("ofRectangle::ofRectangle",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectangle::ofRectangle",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::ofRectangle",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_Rectangle",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_Rectangle",2,SWIGTYPE_p_ofVec3f); } 
  result = (ofRectangle *)new ofRectangle((ofPoint const &)*arg1,(ofPoint const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofRectangle,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Rectangle(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Rectangle__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_Rectangle__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_new_Rectangle__SWIG_4(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_new_Rectangle__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_Rectangle__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Rectangle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::ofRectangle()\n" "    ofRectangle::ofRectangle(float,float,float,float)\n"
  "    ofRectangle::ofRectangle(ofPoint const &,float,float)\n" "    ofRectangle::ofRectangle(ofRectangle const &)\n"
  "    ofRectangle::ofRectangle(ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_Rectangle_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofRectangle::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::set",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofRectangle::set",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::set",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::set",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::set",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_set",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_set",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::set",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::set",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_set",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_set",2,SWIGTYPE_p_ofRectangle); }  (arg1)->set((ofRectangle const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_set__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; SWIG_check_num_args("ofRectangle::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::set",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::set",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofRectangle::set",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_set",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_set",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_set",3,SWIGTYPE_p_ofVec3f); }  (arg1)->set((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_set__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_set__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Rectangle_set__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Rectangle_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::set(float,float,float,float)\n" "    ofRectangle::set(ofPoint const &,float,float)\n"
  "    ofRectangle::set(ofRectangle const &)\n" "    ofRectangle::set(ofPoint const &,ofPoint const &)\n");
  lua_error(L);return 0; }
static int _wrap_Rectangle_setWidth(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::setWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setWidth",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_setWidth",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setWidth(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_setHeight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::setHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setHeight",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_setHeight",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setHeight(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_setPosition__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofRectangle::setPosition",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setPosition",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::setPosition",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_setPosition",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setPosition(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_setPosition__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setPosition",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::setPosition",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_setPosition",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_setPosition",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setPosition((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_setPosition(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_setPosition__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Rectangle_setPosition__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_setPosition'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::setPosition(float,float)\n"
  "    ofRectangle::setPosition(ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_Rectangle_setFromCenter__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofRectangle::setFromCenter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setFromCenter",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::setFromCenter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::setFromCenter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::setFromCenter",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::setFromCenter",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_setFromCenter",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setFromCenter(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_setFromCenter__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofRectangle::setFromCenter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::setFromCenter",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::setFromCenter",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::setFromCenter",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::setFromCenter",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_setFromCenter",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_setFromCenter",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); (arg1)->setFromCenter((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_setFromCenter(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Rectangle_setFromCenter__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Rectangle_setFromCenter__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_setFromCenter'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::setFromCenter(float,float,float,float)\n"
  "    ofRectangle::setFromCenter(ofPoint const &,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Rectangle_translate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofRectangle::translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::translate",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::translate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_translate",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->translate(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_translate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::translate",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::translate",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_translate",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_translate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->translate((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_translate(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_translate__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Rectangle_translate__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_translate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::translate(float,float)\n"
  "    ofRectangle::translate(ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_Rectangle_translateX(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::translateX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::translateX",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::translateX",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_translateX",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->translateX(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_translateY(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::translateY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::translateY",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::translateY",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_translateY",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->translateY(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::scale",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scale",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scale",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scale",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->scale(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofRectangle::scale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scale",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scale",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scale",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->scale(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_scale__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scale",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scale",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scale",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_scale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->scale((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scale(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_scale__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Rectangle_scale__SWIG_0(L);}  }
     }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Rectangle_scale__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_scale'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::scale(float)\n" "    ofRectangle::scale(float,float)\n" "    ofRectangle::scale(ofPoint const &)\n");
  lua_error(L);return 0; }
static int _wrap_Rectangle_scaleWidth(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::scaleWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleWidth",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scaleWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleWidth",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scaleWidth(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scaleHeight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::scaleHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleHeight",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scaleHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleHeight",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scaleHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scaleFromCenter__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; SWIG_check_num_args("ofRectangle::scaleFromCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleFromCenter",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scaleFromCenter",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleFromCenter",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scaleFromCenter(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scaleFromCenter__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofRectangle::scaleFromCenter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleFromCenter",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::scaleFromCenter",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleFromCenter",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleFromCenter",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->scaleFromCenter(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_scaleFromCenter__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::scaleFromCenter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleFromCenter",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleFromCenter",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleFromCenter",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_scaleFromCenter",2,SWIGTYPE_p_ofVec3f); }  (arg1)->scaleFromCenter((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scaleFromCenter(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_scaleFromCenter__SWIG_2(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Rectangle_scaleFromCenter__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Rectangle_scaleFromCenter__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_scaleFromCenter'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::scaleFromCenter(float)\n"
  "    ofRectangle::scaleFromCenter(float,float)\n" "    ofRectangle::scaleFromCenter(ofPoint const &)\n");
  lua_error(L);return 0; }
static int _wrap_Rectangle_scaleTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofScaleMode arg3 ; SWIG_check_num_args("ofRectangle::scaleTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofScaleMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofScaleMode)(int)lua_tonumber(L, 3);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scaleTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::scaleTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  (arg1)->scaleTo((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scaleTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAspectRatioMode arg3 ; ofAlignHorz arg4 ; ofAlignVert arg5 ;
  SWIG_check_num_args("ofRectangle::scaleTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofAspectRatioMode");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::scaleTo",4,"ofAlignHorz");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::scaleTo",5,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAspectRatioMode)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignHorz)(int)lua_tonumber(L, 4); arg5 = (ofAlignVert)(int)lua_tonumber(L, 5);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_scaleTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAspectRatioMode arg3 ; ofAlignHorz arg4 ; SWIG_check_num_args("ofRectangle::scaleTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofAspectRatioMode");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::scaleTo",4,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAspectRatioMode)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignHorz)(int)lua_tonumber(L, 4); (arg1)->scaleTo((ofRectangle const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scaleTo__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAspectRatioMode arg3 ; SWIG_check_num_args("ofRectangle::scaleTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofAspectRatioMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAspectRatioMode)(int)lua_tonumber(L, 3);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_scaleTo__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAspectRatioMode arg3 ; ofAlignHorz arg4 ; ofAlignVert arg5 ; ofAlignHorz arg6 ; ofAlignVert arg7 ;
  SWIG_check_num_args("ofRectangle::scaleTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::scaleTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::scaleTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::scaleTo",3,"ofAspectRatioMode");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::scaleTo",4,"ofAlignHorz");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::scaleTo",5,"ofAlignVert");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofRectangle::scaleTo",6,"ofAlignHorz");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofRectangle::scaleTo",7,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_scaleTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAspectRatioMode)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignHorz)(int)lua_tonumber(L, 4); arg5 = (ofAlignVert)(int)lua_tonumber(L, 5);
  arg6 = (ofAlignHorz)(int)lua_tonumber(L, 6); arg7 = (ofAlignVert)(int)lua_tonumber(L, 7);
  (arg1)->scaleTo((ofRectangle const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_scaleTo(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_scaleTo__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Rectangle_scaleTo__SWIG_0(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Rectangle_scaleTo__SWIG_4(L);}
         }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Rectangle_scaleTo__SWIG_3(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Rectangle_scaleTo__SWIG_2(L);}  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { return _wrap_Rectangle_scaleTo__SWIG_5(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_scaleTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::scaleTo(ofRectangle const &,ofScaleMode)\n" "    ofRectangle::scaleTo(ofRectangle const &)\n"
  "    ofRectangle::scaleTo(ofRectangle const &,ofAspectRatioMode,ofAlignHorz,ofAlignVert)\n"
  "    ofRectangle::scaleTo(ofRectangle const &,ofAspectRatioMode,ofAlignHorz)\n"
  "    ofRectangle::scaleTo(ofRectangle const &,ofAspectRatioMode)\n"
  "    ofRectangle::scaleTo(ofRectangle const &,ofAspectRatioMode,ofAlignHorz,ofAlignVert,ofAlignHorz,ofAlignVert)\n");
  lua_error(L);return 0; }
static int _wrap_Rectangle_alignToHorz__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ; ofAlignHorz arg3 ; float temp2 ; SWIG_check_num_args("ofRectangle::alignToHorz",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToHorz",3,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3); (arg1)->alignToHorz((float const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToHorz__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ; float temp2 ; SWIG_check_num_args("ofRectangle::alignToHorz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->alignToHorz((float const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToHorz__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; SWIG_check_num_args("ofRectangle::alignToHorz",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToHorz",3,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToHorz",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  (arg1)->alignToHorz((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToHorz__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::alignToHorz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToHorz",2,SWIGTYPE_p_ofRectangle); }  (arg1)->alignToHorz((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToHorz__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; ofAlignHorz arg4 ; SWIG_check_num_args("ofRectangle::alignToHorz",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToHorz",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToHorz",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToHorz",3,"ofAlignHorz");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignToHorz",4,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToHorz",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToHorz",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignHorz)(int)lua_tonumber(L, 4); (arg1)->alignToHorz((ofRectangle const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToHorz(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_alignToHorz__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Rectangle_alignToHorz__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Rectangle_alignToHorz__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Rectangle_alignToHorz__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Rectangle_alignToHorz__SWIG_4(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_alignToHorz'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::alignToHorz(float const &,ofAlignHorz)\n"
  "    ofRectangle::alignToHorz(float const &)\n" "    ofRectangle::alignToHorz(ofRectangle const &,ofAlignHorz)\n"
  "    ofRectangle::alignToHorz(ofRectangle const &)\n"
  "    ofRectangle::alignToHorz(ofRectangle const &,ofAlignHorz,ofAlignHorz)\n"); lua_error(L);return 0; }
static int _wrap_Rectangle_alignToVert__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ; ofAlignVert arg3 ; float temp2 ; SWIG_check_num_args("ofRectangle::alignToVert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToVert",3,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  arg3 = (ofAlignVert)(int)lua_tonumber(L, 3); (arg1)->alignToVert((float const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToVert__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float *arg2 = 0 ; float temp2 ; SWIG_check_num_args("ofRectangle::alignToVert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"float const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); }  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->alignToVert((float const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToVert__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignVert arg3 ; SWIG_check_num_args("ofRectangle::alignToVert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToVert",3,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToVert",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignVert)(int)lua_tonumber(L, 3);
  (arg1)->alignToVert((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToVert__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::alignToVert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToVert",2,SWIGTYPE_p_ofRectangle); }  (arg1)->alignToVert((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToVert__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignVert arg3 ; ofAlignVert arg4 ; SWIG_check_num_args("ofRectangle::alignToVert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignToVert",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignToVert",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignToVert",3,"ofAlignVert");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignToVert",4,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToVert",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignToVert",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignVert)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignVert)(int)lua_tonumber(L, 4); (arg1)->alignToVert((ofRectangle const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignToVert(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_alignToVert__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Rectangle_alignToVert__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Rectangle_alignToVert__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Rectangle_alignToVert__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Rectangle_alignToVert__SWIG_4(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_alignToVert'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::alignToVert(float const &,ofAlignVert)\n"
  "    ofRectangle::alignToVert(float const &)\n" "    ofRectangle::alignToVert(ofRectangle const &,ofAlignVert)\n"
  "    ofRectangle::alignToVert(ofRectangle const &)\n"
  "    ofRectangle::alignToVert(ofRectangle const &,ofAlignVert,ofAlignVert)\n"); lua_error(L);return 0; }
static int _wrap_Rectangle_alignTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofAlignHorz arg3 ; ofAlignVert arg4 ; SWIG_check_num_args("ofRectangle::alignTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignTo",4,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_alignTo",2,SWIGTYPE_p_ofVec3f); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignVert)(int)lua_tonumber(L, 4); (arg1)->alignTo((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofAlignHorz arg3 ; SWIG_check_num_args("ofRectangle::alignTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_alignTo",2,SWIGTYPE_p_ofVec3f); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  (arg1)->alignTo((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::alignTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_alignTo",2,SWIGTYPE_p_ofVec3f); }  (arg1)->alignTo((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; ofAlignVert arg4 ; SWIG_check_num_args("ofRectangle::alignTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignTo",4,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignVert)(int)lua_tonumber(L, 4); (arg1)->alignTo((ofRectangle const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignTo__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; SWIG_check_num_args("ofRectangle::alignTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  (arg1)->alignTo((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignTo__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::alignTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",2,SWIGTYPE_p_ofRectangle); }  (arg1)->alignTo((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignTo__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofAlignHorz arg3 ; ofAlignVert arg4 ; ofAlignHorz arg5 ; ofAlignVert arg6 ;
  SWIG_check_num_args("ofRectangle::alignTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::alignTo",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::alignTo",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::alignTo",3,"ofAlignHorz");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectangle::alignTo",4,"ofAlignVert");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectangle::alignTo",5,"ofAlignHorz");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofRectangle::alignTo",6,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_alignTo",2,SWIGTYPE_p_ofRectangle); }  arg3 = (ofAlignHorz)(int)lua_tonumber(L, 3);
  arg4 = (ofAlignVert)(int)lua_tonumber(L, 4); arg5 = (ofAlignHorz)(int)lua_tonumber(L, 5);
  arg6 = (ofAlignVert)(int)lua_tonumber(L, 6); (arg1)->alignTo((ofRectangle const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_alignTo(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_alignTo__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_alignTo__SWIG_5(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Rectangle_alignTo__SWIG_4(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Rectangle_alignTo__SWIG_1(L);}
         }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Rectangle_alignTo__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Rectangle_alignTo__SWIG_3(L);}  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_Rectangle_alignTo__SWIG_6(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_alignTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::alignTo(ofPoint const &,ofAlignHorz,ofAlignVert)\n"
  "    ofRectangle::alignTo(ofPoint const &,ofAlignHorz)\n" "    ofRectangle::alignTo(ofPoint const &)\n"
  "    ofRectangle::alignTo(ofRectangle const &,ofAlignHorz,ofAlignVert)\n"
  "    ofRectangle::alignTo(ofRectangle const &,ofAlignHorz)\n" "    ofRectangle::alignTo(ofRectangle const &)\n"
  "    ofRectangle::alignTo(ofRectangle const &,ofAlignHorz,ofAlignVert,ofAlignHorz,ofAlignVert)\n"); lua_error(L);return 0; }
static int _wrap_Rectangle_inside__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  float arg3 ; bool result; SWIG_check_num_args("ofRectangle::inside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::inside",1,"ofRectangle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::inside",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::inside",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_inside",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (bool)((ofRectangle const *)arg1)->inside(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_inside__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; bool result; SWIG_check_num_args("ofRectangle::inside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::inside",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::inside",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_inside",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_inside",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofRectangle const *)arg1)->inside((ofPoint const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_inside__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; bool result; SWIG_check_num_args("ofRectangle::inside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::inside",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::inside",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_inside",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_inside",2,SWIGTYPE_p_ofRectangle); } 
  result = (bool)((ofRectangle const *)arg1)->inside((ofRectangle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_inside__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; bool result; SWIG_check_num_args("ofRectangle::inside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::inside",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::inside",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofRectangle::inside",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_inside",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_inside",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_inside",3,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofRectangle const *)arg1)->inside((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_inside(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_inside__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_inside__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_inside__SWIG_3(L);}  }  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Rectangle_inside__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_inside'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectangle::inside(float,float) const\n" "    ofRectangle::inside(ofPoint const &) const\n"
  "    ofRectangle::inside(ofRectangle const &) const\n" "    ofRectangle::inside(ofPoint const &,ofPoint const &) const\n");
  lua_error(L);return 0; }
static int _wrap_Rectangle_intersects__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; bool result; SWIG_check_num_args("ofRectangle::intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::intersects",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::intersects",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_intersects",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_intersects",2,SWIGTYPE_p_ofRectangle); } 
  result = (bool)((ofRectangle const *)arg1)->intersects((ofRectangle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_intersects__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; bool result; SWIG_check_num_args("ofRectangle::intersects",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::intersects",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::intersects",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofRectangle::intersects",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_intersects",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_intersects",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_intersects",3,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofRectangle const *)arg1)->intersects((ofPoint const &)*arg2,(ofPoint const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_intersects(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_intersects__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_intersects__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_intersects'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::intersects(ofRectangle const &) const\n"
  "    ofRectangle::intersects(ofPoint const &,ofPoint const &) const\n"); lua_error(L);return 0; }
static int _wrap_Rectangle_growToInclude__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float arg2 ; float arg3 ; SWIG_check_num_args("ofRectangle::growToInclude",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::growToInclude",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::growToInclude",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectangle::growToInclude",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_growToInclude",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->growToInclude(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_growToInclude__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofRectangle::growToInclude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::growToInclude",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::growToInclude",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_growToInclude",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_growToInclude",2,SWIGTYPE_p_ofVec3f); }  (arg1)->growToInclude((ofPoint const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_growToInclude__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("ofRectangle::growToInclude",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::growToInclude",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::growToInclude",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_growToInclude",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_growToInclude",2,SWIGTYPE_p_ofRectangle); }  (arg1)->growToInclude((ofRectangle const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_growToInclude__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; SWIG_check_num_args("ofRectangle::growToInclude",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::growToInclude",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::growToInclude",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofRectangle::growToInclude",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_growToInclude",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_growToInclude",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_growToInclude",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->growToInclude((ofPoint const &)*arg2,(ofPoint const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_growToInclude(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_growToInclude__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_growToInclude__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Rectangle_growToInclude__SWIG_3(L);}  }  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Rectangle_growToInclude__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Rectangle_growToInclude'\n"
  "  Possible C/C++ prototypes are:\n" "    ofRectangle::growToInclude(float,float)\n"
  "    ofRectangle::growToInclude(ofPoint const &)\n" "    ofRectangle::growToInclude(ofRectangle const &)\n"
  "    ofRectangle::growToInclude(ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_Rectangle_getIntersection(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofRectangle result; SWIG_check_num_args("ofRectangle::getIntersection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getIntersection",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::getIntersection",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getIntersection",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getIntersection",2,SWIGTYPE_p_ofRectangle); } 
  result = ((ofRectangle const *)arg1)->getIntersection((ofRectangle const &)*arg2); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getUnion(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; ofRectangle result; SWIG_check_num_args("ofRectangle::getUnion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getUnion",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::getUnion",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getUnion",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getUnion",2,SWIGTYPE_p_ofRectangle); } 
  result = ((ofRectangle const *)arg1)->getUnion((ofRectangle const &)*arg2); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_standardize(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  SWIG_check_num_args("ofRectangle::standardize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::standardize",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_standardize",1,SWIGTYPE_p_ofRectangle); }  (arg1)->standardize(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getStandardized(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle result; SWIG_check_num_args("ofRectangle::getStandardized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getStandardized",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getStandardized",1,SWIGTYPE_p_ofRectangle); } 
  result = ((ofRectangle const *)arg1)->getStandardized(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_isStandardized(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; bool result;
  SWIG_check_num_args("ofRectangle::isStandardized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::isStandardized",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_isStandardized",1,SWIGTYPE_p_ofRectangle); } 
  result = (bool)((ofRectangle const *)arg1)->isStandardized(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getArea(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getArea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getArea",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getArea",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getArea();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getPerimeter(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getPerimeter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getPerimeter",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getPerimeter",1,SWIGTYPE_p_ofRectangle); } 
  result = (float)((ofRectangle const *)arg1)->getPerimeter(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getAspectRatio(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  float result; SWIG_check_num_args("ofRectangle::getAspectRatio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getAspectRatio",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getAspectRatio",1,SWIGTYPE_p_ofRectangle); } 
  result = (float)((ofRectangle const *)arg1)->getAspectRatio(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_isEmpty(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; bool result;
  SWIG_check_num_args("ofRectangle::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::isEmpty",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_isEmpty",1,SWIGTYPE_p_ofRectangle); }  result = (bool)((ofRectangle const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getMin(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint result;
  SWIG_check_num_args("ofRectangle::getMin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMin",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getMin",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getMin(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getMax(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint result;
  SWIG_check_num_args("ofRectangle::getMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMax",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getMax",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getMax(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getMinX(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getMinX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMinX",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getMinX",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getMinX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getMaxX(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getMaxX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMaxX",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getMaxX",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getMaxX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getMinY(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getMinY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMinY",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getMinY",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getMinY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getMaxY(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getMaxY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getMaxY",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getMaxY",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getMaxY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getLeft(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getLeft",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getLeft",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getLeft();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getRight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getRight",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getRight",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getRight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getTop(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getTop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getTop",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getTop",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getTop();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getBottom(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getBottom",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getBottom",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getBottom",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getBottom();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getTopLeft(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint result;
  SWIG_check_num_args("ofRectangle::getTopLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getTopLeft",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getTopLeft",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getTopLeft(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getTopRight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint result;
  SWIG_check_num_args("ofRectangle::getTopRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getTopRight",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getTopRight",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getTopRight(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getBottomLeft(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint result; SWIG_check_num_args("ofRectangle::getBottomLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getBottomLeft",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getBottomLeft",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getBottomLeft();
  { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getBottomRight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint result; SWIG_check_num_args("ofRectangle::getBottomRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getBottomRight",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getBottomRight",1,SWIGTYPE_p_ofRectangle); } 
  result = ((ofRectangle const *)arg1)->getBottomRight(); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getHorzAnchor(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofAlignHorz arg2 ; float result; SWIG_check_num_args("ofRectangle::getHorzAnchor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getHorzAnchor",1,"ofRectangle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::getHorzAnchor",2,"ofAlignHorz");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getHorzAnchor",1,SWIGTYPE_p_ofRectangle); }  arg2 = (ofAlignHorz)(int)lua_tonumber(L, 2);
  result = (float)((ofRectangle const *)arg1)->getHorzAnchor(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getVertAnchor(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofAlignVert arg2 ; float result; SWIG_check_num_args("ofRectangle::getVertAnchor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getVertAnchor",1,"ofRectangle const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::getVertAnchor",2,"ofAlignVert");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getVertAnchor",1,SWIGTYPE_p_ofRectangle); }  arg2 = (ofAlignVert)(int)lua_tonumber(L, 2);
  result = (float)((ofRectangle const *)arg1)->getVertAnchor(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getPosition(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint result;
  SWIG_check_num_args("ofRectangle::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getPosition",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getPosition",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getPosition(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getPositionRef(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *result = 0 ; SWIG_check_num_args("ofRectangle::getPositionRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getPositionRef",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getPositionRef",1,SWIGTYPE_p_ofRectangle); }  result = (ofPoint *) &(arg1)->getPositionRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_getCenter(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint result;
  SWIG_check_num_args("ofRectangle::getCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getCenter",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getCenter",1,SWIGTYPE_p_ofRectangle); }  result = ((ofRectangle const *)arg1)->getCenter(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getWidth(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getWidth",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getWidth",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_getHeight(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::getHeight",1,"ofRectangle const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_getHeight",1,SWIGTYPE_p_ofRectangle); }  result = (float)((ofRectangle const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle___add(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; ofPoint *arg2 = 0 ;
  ofRectangle result; SWIG_check_num_args("ofRectangle::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::operator +",1,"ofRectangle *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::operator +",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle___add",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle___add",2,SWIGTYPE_p_ofVec3f); }  result = (arg1)->operator +((ofPoint const &)*arg2); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle___eq(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofRectangle *arg2 = 0 ; bool result; SWIG_check_num_args("ofRectangle::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::operator ==",1,"ofRectangle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofRectangle::operator ==",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle___eq",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle___eq",2,SWIGTYPE_p_ofRectangle); } 
  result = (bool)((ofRectangle const *)arg1)->operator ==((ofRectangle const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_position_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ; SWIG_check_num_args("ofRectangle::position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::position",1,"ofRectangle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofRectangle::position",2,"ofPoint *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_position_set",1,SWIGTYPE_p_ofRectangle); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Rectangle_position_set",2,SWIGTYPE_p_ofVec3f); }  if (arg1) (arg1)->position = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_position_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ;
  ofPoint *result = 0 ; SWIG_check_num_args("ofRectangle::position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::position",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_position_get",1,SWIGTYPE_p_ofRectangle); }  result = (ofPoint *)& ((arg1)->position);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Rectangle_width_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::width",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::width",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::width",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_width_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_width_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::width",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::width",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_width_get",1,SWIGTYPE_p_ofRectangle); }  result = (float) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_height_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::height",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::height",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_height_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_height_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::height",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_height_get",1,SWIGTYPE_p_ofRectangle); }  result = (float) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_x_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::x",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::x",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_x_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  ofRectangle_x_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_x_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::x",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_x_get",1,SWIGTYPE_p_ofRectangle); }  result = (float)ofRectangle_x_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_y_set(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float arg2 ;
  SWIG_check_num_args("ofRectangle::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::y",1,"ofRectangle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectangle::y",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_y_set",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  ofRectangle_y_set(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Rectangle_y_get(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = (ofRectangle *) 0 ; float result;
  SWIG_check_num_args("ofRectangle::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofRectangle::y",1,"ofRectangle *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Rectangle_y_get",1,SWIGTYPE_p_ofRectangle); }  result = (float)ofRectangle_y_get(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Rectangle(void *obj) {
ofRectangle *arg1 = (ofRectangle *) obj;
delete arg1;
}
static swig_lua_method swig_ofRectangle_methods[] = {
    {"set", _wrap_Rectangle_set}, 
    {"setWidth", _wrap_Rectangle_setWidth}, 
    {"setHeight", _wrap_Rectangle_setHeight}, 
    {"setPosition", _wrap_Rectangle_setPosition}, 
    {"setFromCenter", _wrap_Rectangle_setFromCenter}, 
    {"translate", _wrap_Rectangle_translate}, 
    {"translateX", _wrap_Rectangle_translateX}, 
    {"translateY", _wrap_Rectangle_translateY}, 
    {"scale", _wrap_Rectangle_scale}, 
    {"scaleWidth", _wrap_Rectangle_scaleWidth}, 
    {"scaleHeight", _wrap_Rectangle_scaleHeight}, 
    {"scaleFromCenter", _wrap_Rectangle_scaleFromCenter}, 
    {"scaleTo", _wrap_Rectangle_scaleTo}, 
    {"alignToHorz", _wrap_Rectangle_alignToHorz}, 
    {"alignToVert", _wrap_Rectangle_alignToVert}, 
    {"alignTo", _wrap_Rectangle_alignTo}, 
    {"inside", _wrap_Rectangle_inside}, 
    {"intersects", _wrap_Rectangle_intersects}, 
    {"growToInclude", _wrap_Rectangle_growToInclude}, 
    {"getIntersection", _wrap_Rectangle_getIntersection}, 
    {"getUnion", _wrap_Rectangle_getUnion}, 
    {"standardize", _wrap_Rectangle_standardize}, 
    {"getStandardized", _wrap_Rectangle_getStandardized}, 
    {"isStandardized", _wrap_Rectangle_isStandardized}, 
    {"getArea", _wrap_Rectangle_getArea}, 
    {"getPerimeter", _wrap_Rectangle_getPerimeter}, 
    {"getAspectRatio", _wrap_Rectangle_getAspectRatio}, 
    {"isEmpty", _wrap_Rectangle_isEmpty}, 
    {"getMin", _wrap_Rectangle_getMin}, 
    {"getMax", _wrap_Rectangle_getMax}, 
    {"getMinX", _wrap_Rectangle_getMinX}, 
    {"getMaxX", _wrap_Rectangle_getMaxX}, 
    {"getMinY", _wrap_Rectangle_getMinY}, 
    {"getMaxY", _wrap_Rectangle_getMaxY}, 
    {"getLeft", _wrap_Rectangle_getLeft}, 
    {"getRight", _wrap_Rectangle_getRight}, 
    {"getTop", _wrap_Rectangle_getTop}, 
    {"getBottom", _wrap_Rectangle_getBottom}, 
    {"getTopLeft", _wrap_Rectangle_getTopLeft}, 
    {"getTopRight", _wrap_Rectangle_getTopRight}, 
    {"getBottomLeft", _wrap_Rectangle_getBottomLeft}, 
    {"getBottomRight", _wrap_Rectangle_getBottomRight}, 
    {"getHorzAnchor", _wrap_Rectangle_getHorzAnchor}, 
    {"getVertAnchor", _wrap_Rectangle_getVertAnchor}, 
    {"getPosition", _wrap_Rectangle_getPosition}, 
    {"getPositionRef", _wrap_Rectangle_getPositionRef}, 
    {"getCenter", _wrap_Rectangle_getCenter}, 
    {"getWidth", _wrap_Rectangle_getWidth}, 
    {"getHeight", _wrap_Rectangle_getHeight}, 
    {"__add", _wrap_Rectangle___add}, 
    {"__eq", _wrap_Rectangle___eq}, 
    {0,0}
};
static swig_lua_attribute swig_ofRectangle_attributes[] = {
    { "position", _wrap_Rectangle_position_get, _wrap_Rectangle_position_set},
    { "width", _wrap_Rectangle_width_get, _wrap_Rectangle_width_set},
    { "height", _wrap_Rectangle_height_get, _wrap_Rectangle_height_set},
    { "x", _wrap_Rectangle_x_get, _wrap_Rectangle_x_set},
    { "y", _wrap_Rectangle_y_get, _wrap_Rectangle_y_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofRectangle_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofRectangle_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofRectangle_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofRectangle_bases[] = {0};
static const char *swig_ofRectangle_base_names[] = {0};
static swig_lua_class _wrap_class_ofRectangle = { "Rectangle", &SWIGTYPE_p_ofRectangle,_wrap_new_Rectangle, swig_delete_Rectangle, swig_ofRectangle_methods, swig_ofRectangle_attributes, { "Rectangle", swig_ofRectangle_cls_methods, swig_ofRectangle_cls_attributes, swig_ofRectangle_cls_constants }, swig_ofRectangle_bases, swig_ofRectangle_base_names };

static int _wrap_Matrix3x3_a_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::a",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::a",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::a",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_a_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->a = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_a_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::a",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::a",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_a_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_b_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::b",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::b",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::b",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_b_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->b = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_b_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::b",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::b",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_b_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_c_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::c",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::c",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::c",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_c_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->c = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_c_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::c",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::c",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_c_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->c);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_d_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::d",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::d",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::d",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_d_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->d = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_d_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::d",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::d",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_d_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->d);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_e_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::e",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::e",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::e",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_e_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->e = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_e_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::e",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::e",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_e_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->e);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_f_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::f",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::f",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::f",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_f_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->f = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_f_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::f",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::f",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_f_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->f);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_g_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::g",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::g",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::g",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_g_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->g = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_g_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::g",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::g",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_g_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_h_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::h",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::h",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::h",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_h_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->h = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_h_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::h",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::h",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_h_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->h);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_i_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMatrix3x3::i",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::i",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::i",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_i_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->i = arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_i_get(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float result;
  SWIG_check_num_args("ofMatrix3x3::i",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::i",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_i_get",1,SWIGTYPE_p_ofMatrix3x3); }  result = (float) ((arg1)->i);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",8,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",7,7)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",7,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_6(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofMatrix3x3 *result = 0 ; SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_7(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofMatrix3x3 *)new ofMatrix3x3(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_8(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix3x3::ofMatrix3x3",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (ofMatrix3x3 *)new ofMatrix3x3(arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Matrix3x3__SWIG_9(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *result = 0 ;
  SWIG_check_num_args("ofMatrix3x3::ofMatrix3x3",0,0) result = (ofMatrix3x3 *)new ofMatrix3x3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix3x3(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_new_Matrix3x3__SWIG_9(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { return _wrap_new_Matrix3x3__SWIG_8(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_Matrix3x3__SWIG_7(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_new_Matrix3x3__SWIG_6(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_Matrix3x3__SWIG_5(L);}  }  }  }  }  if (argc == 5) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_new_Matrix3x3__SWIG_4(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_new_Matrix3x3__SWIG_3(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_new_Matrix3x3__SWIG_2(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_new_Matrix3x3__SWIG_1(L);}  }  }  }  }  }  }  }  } 
  if (argc == 9) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) { {
                      _v = lua_isnumber(L,argv[8]); }  if (_v) { return _wrap_new_Matrix3x3__SWIG_0(L);}  }  }  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Matrix3x3'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float,float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float,float,float)\n" "    ofMatrix3x3::ofMatrix3x3(float,float,float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float,float,float)\n" "    ofMatrix3x3::ofMatrix3x3(float,float)\n"
  "    ofMatrix3x3::ofMatrix3x3(float)\n" "    ofMatrix3x3::ofMatrix3x3()\n"); lua_error(L);return 0; }
static int _wrap_Matrix3x3_set(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofMatrix3x3::set",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::set",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix3x3::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix3x3::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix3x3::set",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix3x3::set",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix3x3::set",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix3x3::set",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofMatrix3x3::set",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofMatrix3x3::set",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_set",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Matrix3x3_transpose__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  SWIG_check_num_args("ofMatrix3x3::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::transpose",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_transpose",1,SWIGTYPE_p_ofMatrix3x3); }  (arg1)->transpose(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_transpose__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::transpose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::transpose",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::transpose",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_transpose",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_transpose",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->transpose((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_transpose(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Matrix3x3_transpose__SWIG_0(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix3x3_transpose__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix3x3_transpose'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix3x3::transpose()\n" "    ofMatrix3x3::transpose(ofMatrix3x3 const &)\n");
  lua_error(L);return 0; }
static int _wrap_Matrix3x3_determinant__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  float result; SWIG_check_num_args("ofMatrix3x3::determinant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::determinant",1,"ofMatrix3x3 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_determinant",1,SWIGTYPE_p_ofMatrix3x3); } 
  result = (float)((ofMatrix3x3 const *)arg1)->determinant(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_determinant__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; float result; SWIG_check_num_args("ofMatrix3x3::determinant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::determinant",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::determinant",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_determinant",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_determinant",2,SWIGTYPE_p_ofMatrix3x3); } 
  result = (float)(arg1)->determinant((ofMatrix3x3 const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_determinant(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Matrix3x3_determinant__SWIG_0(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix3x3_determinant__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix3x3_determinant'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix3x3::determinant() const\n"
  "    ofMatrix3x3::determinant(ofMatrix3x3 const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix3x3_invert(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  SWIG_check_num_args("ofMatrix3x3::invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::invert",1,"ofMatrix3x3 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_invert",1,SWIGTYPE_p_ofMatrix3x3); }  (arg1)->invert(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_inverse(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::inverse",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::inverse",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_inverse",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_inverse",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->inverse((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3___add(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator +",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::operator +",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3___add",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3___add",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->operator +((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3___sub(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator -",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::operator -",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3___sub",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3___sub",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->operator -((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator *",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::operator *",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3___mul",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2); { ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3_entrywiseTimes(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::entrywiseTimes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::entrywiseTimes",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::entrywiseTimes",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_entrywiseTimes",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3_entrywiseTimes",2,SWIGTYPE_p_ofMatrix3x3); } 
  result = (arg1)->entrywiseTimes((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ;
  ofMatrix3x3 *arg2 = 0 ; ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator *",1,"ofMatrix3x3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix3x3::operator *",2,"ofMatrix3x3 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3___mul",1,SWIGTYPE_p_ofMatrix3x3); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3___mul",2,SWIGTYPE_p_ofMatrix3x3); }  result = (arg1)->operator *((ofMatrix3x3 const &)*arg2); {
    ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix3x3___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix3x3___mul__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix3x3, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Matrix3x3___mul__SWIG_0(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix3x3___mul'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix3x3::operator *(float)\n"
  "    ofMatrix3x3::operator *(ofMatrix3x3 const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix3x3___div(lua_State* L) { int SWIG_arg = 0; ofMatrix3x3 *arg1 = (ofMatrix3x3 *) 0 ; float arg2 ;
  ofMatrix3x3 result; SWIG_check_num_args("ofMatrix3x3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix3x3::operator /",1,"ofMatrix3x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix3x3::operator /",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix3x3,0))){
    SWIG_fail_ptr("Matrix3x3___div",1,SWIGTYPE_p_ofMatrix3x3); }  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->operator /(arg2); { ofMatrix3x3 * resultptr = new ofMatrix3x3((const ofMatrix3x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix3x3,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_Matrix3x3(void *obj) {
ofMatrix3x3 *arg1 = (ofMatrix3x3 *) obj;
delete arg1;
}
static swig_lua_method swig_ofMatrix3x3_methods[] = {
    {"set", _wrap_Matrix3x3_set}, 
    {"transpose", _wrap_Matrix3x3_transpose}, 
    {"determinant", _wrap_Matrix3x3_determinant}, 
    {"invert", _wrap_Matrix3x3_invert}, 
    {"inverse", _wrap_Matrix3x3_inverse}, 
    {"__add", _wrap_Matrix3x3___add}, 
    {"__sub", _wrap_Matrix3x3___sub}, 
    {"entrywiseTimes", _wrap_Matrix3x3_entrywiseTimes}, 
    {"__mul", _wrap_Matrix3x3___mul}, 
    {"__div", _wrap_Matrix3x3___div}, 
    {0,0}
};
static swig_lua_attribute swig_ofMatrix3x3_attributes[] = {
    { "a", _wrap_Matrix3x3_a_get, _wrap_Matrix3x3_a_set},
    { "b", _wrap_Matrix3x3_b_get, _wrap_Matrix3x3_b_set},
    { "c", _wrap_Matrix3x3_c_get, _wrap_Matrix3x3_c_set},
    { "d", _wrap_Matrix3x3_d_get, _wrap_Matrix3x3_d_set},
    { "e", _wrap_Matrix3x3_e_get, _wrap_Matrix3x3_e_set},
    { "f", _wrap_Matrix3x3_f_get, _wrap_Matrix3x3_f_set},
    { "g", _wrap_Matrix3x3_g_get, _wrap_Matrix3x3_g_set},
    { "h", _wrap_Matrix3x3_h_get, _wrap_Matrix3x3_h_set},
    { "i", _wrap_Matrix3x3_i_get, _wrap_Matrix3x3_i_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofMatrix3x3_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofMatrix3x3_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofMatrix3x3_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofMatrix3x3_bases[] = {0};
static const char *swig_ofMatrix3x3_base_names[] = {0};
static swig_lua_class _wrap_class_ofMatrix3x3 = { "Matrix3x3", &SWIGTYPE_p_ofMatrix3x3,_wrap_new_Matrix3x3, swig_delete_Matrix3x3, swig_ofMatrix3x3_methods, swig_ofMatrix3x3_attributes, { "Matrix3x3", swig_ofMatrix3x3_cls_methods, swig_ofMatrix3x3_cls_attributes, swig_ofMatrix3x3_cls_constants }, swig_ofMatrix3x3_bases, swig_ofMatrix3x3_base_names };

static int _wrap_Matrix4x4__mat_set(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; ofVec4f *arg2 ;
  SWIG_check_num_args("ofMatrix4x4::_mat",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::_mat",1,"ofMatrix4x4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMatrix4x4::_mat",2,"ofVec4f [4]");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4__mat_set",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Matrix4x4__mat_set",2,SWIGTYPE_p_ofVec4f); }  { size_t ii; ofVec4f *b = (ofVec4f *) arg1->_mat;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((ofVec4f *) arg2 + ii); }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4__mat_get(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofMatrix4x4::_mat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::_mat",1,"ofMatrix4x4 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4__mat_get",1,SWIGTYPE_p_ofMatrix4x4); }  result = (ofVec4f *)(ofVec4f *) ((arg1)->_mat);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix4x4__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",0,0) result = (ofMatrix4x4 *)new ofMatrix4x4();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix4x4__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("new_Matrix4x4",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = (ofMatrix4x4 *)new ofMatrix4x4((ofMatrix4x4 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix4x4__SWIG_2(lua_State* L) { int SWIG_arg = 0; float *arg1 = (float *) (float *)0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",1,"float const *const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("new_Matrix4x4",1,SWIGTYPE_p_float); } 
  result = (ofMatrix4x4 *)new ofMatrix4x4((float const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix4x4__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = 0 ; ofMatrix4x4 *result = 0 ;
  SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",1,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("new_Matrix4x4",1,SWIGTYPE_p_ofQuaternion); } 
  result = (ofMatrix4x4 *)new ofMatrix4x4((ofQuaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix4x4__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ; float arg12 ; float arg13 ;
  float arg14 ; float arg15 ; float arg16 ; ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofMatrix4x4::ofMatrix4x4",16,16)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",12,"float");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",13,"float");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",14,"float");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",15,"float");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("ofMatrix4x4::ofMatrix4x4",16,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11); arg12 = (float)lua_tonumber(L, 12); arg13 = (float)lua_tonumber(L, 13);
  arg14 = (float)lua_tonumber(L, 14); arg15 = (float)lua_tonumber(L, 15); arg16 = (float)lua_tonumber(L, 16);
  result = (ofMatrix4x4 *)new ofMatrix4x4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Matrix4x4(lua_State* L) { int argc; int argv[17]={ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17} ;
  argc = lua_gettop(L); if (argc == 0) { return _wrap_new_Matrix4x4__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_Matrix4x4__SWIG_1(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Matrix4x4__SWIG_2(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_Matrix4x4__SWIG_3(L);}  }  if (argc == 16) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { { _v = lua_isnumber(L,argv[12]); }  if (_v) { {
                                _v = lua_isnumber(L,argv[13]); }  if (_v) { { _v = lua_isnumber(L,argv[14]); }  if (_v) { {
                                    _v = lua_isnumber(L,argv[15]); }  if (_v) { return _wrap_new_Matrix4x4__SWIG_4(L);}  }  }  }
                             }  }  }  }  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Matrix4x4'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::ofMatrix4x4()\n" "    ofMatrix4x4::ofMatrix4x4(ofMatrix4x4 const &)\n"
  "    ofMatrix4x4::ofMatrix4x4(float const *const)\n" "    ofMatrix4x4::ofMatrix4x4(ofQuaternion const &)\n"
  "    ofMatrix4x4::ofMatrix4x4(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_Matrix4x4___call__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; int arg2 ;
  int arg3 ; float *result = 0 ; SWIG_check_num_args("ofMatrix4x4::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::operator ()",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::operator ()",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___call",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (float *) &(arg1)->operator ()(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Matrix4x4___call__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; int arg2 ;
  int arg3 ; float result; SWIG_check_num_args("ofMatrix4x4::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::operator ()",1,"ofMatrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::operator ()",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::operator ()",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___call",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (float)((ofMatrix4x4 const *)arg1)->operator ()(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4___call(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Matrix4x4___call__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Matrix4x4___call__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4___call'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::operator ()(int,int)\n" "    ofMatrix4x4::operator ()(int,int) const\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_getRowAsVec3f(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; int arg2 ;
  ofVec3f result; SWIG_check_num_args("ofMatrix4x4::getRowAsVec3f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getRowAsVec3f",1,"ofMatrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::getRowAsVec3f",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getRowAsVec3f",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofMatrix4x4 const *)arg1)->getRowAsVec3f(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getRowAsVec4f(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; int arg2 ;
  ofVec4f result; SWIG_check_num_args("ofMatrix4x4::getRowAsVec4f",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getRowAsVec4f",1,"ofMatrix4x4 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::getRowAsVec4f",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getRowAsVec4f",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofMatrix4x4 const *)arg1)->getRowAsVec4f(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_isValid(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::isValid",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_isValid",1,SWIGTYPE_p_ofMatrix4x4); }  result = (bool)((ofMatrix4x4 const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_isNaN(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::isNaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::isNaN",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_isNaN",1,SWIGTYPE_p_ofMatrix4x4); }  result = (bool)((ofMatrix4x4 const *)arg1)->isNaN();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::set",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::set",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_set",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_set",2,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->set((ofMatrix4x4 const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float *arg2 = (float *) (float *)0 ; SWIG_check_num_args("ofMatrix4x4::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::set",1,"ofMatrix4x4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMatrix4x4::set",2,"float const *const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_set",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("Matrix4x4_set",2,SWIGTYPE_p_float); } 
  (arg1)->set((float const *)arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = (double *) (double *)0 ; SWIG_check_num_args("ofMatrix4x4::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::set",1,"ofMatrix4x4 *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMatrix4x4::set",2,"double const *const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_set",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){ SWIG_fail_ptr("Matrix4x4_set",2,SWIGTYPE_p_double); }
   (arg1)->set((double const *)arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_set__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ;
  float arg12 ; float arg13 ; float arg14 ; float arg15 ; float arg16 ; float arg17 ;
  SWIG_check_num_args("ofMatrix4x4::set",17,17) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::set",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::set",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::set",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix4x4::set",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofMatrix4x4::set",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofMatrix4x4::set",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofMatrix4x4::set",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofMatrix4x4::set",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofMatrix4x4::set",12,"float");
  if(!lua_isnumber(L,13)) SWIG_fail_arg("ofMatrix4x4::set",13,"float");
  if(!lua_isnumber(L,14)) SWIG_fail_arg("ofMatrix4x4::set",14,"float");
  if(!lua_isnumber(L,15)) SWIG_fail_arg("ofMatrix4x4::set",15,"float");
  if(!lua_isnumber(L,16)) SWIG_fail_arg("ofMatrix4x4::set",16,"float");
  if(!lua_isnumber(L,17)) SWIG_fail_arg("ofMatrix4x4::set",17,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_set",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10); arg11 = (float)lua_tonumber(L, 11);
  arg12 = (float)lua_tonumber(L, 12); arg13 = (float)lua_tonumber(L, 13); arg14 = (float)lua_tonumber(L, 14);
  arg15 = (float)lua_tonumber(L, 15); arg16 = (float)lua_tonumber(L, 16); arg17 = (float)lua_tonumber(L, 17);
  (arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_set(lua_State* L) { int argc; int argv[18]={ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18} ;
  argc = lua_gettop(L); if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_set__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_set__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_set__SWIG_2(L);}  }  }  if (argc == 17) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { { _v = lua_isnumber(L,argv[12]); }  if (_v) { {
                                _v = lua_isnumber(L,argv[13]); }  if (_v) { { _v = lua_isnumber(L,argv[14]); }  if (_v) { {
                                    _v = lua_isnumber(L,argv[15]); }  if (_v) { { _v = lua_isnumber(L,argv[16]); }  if (_v) {
                                      return _wrap_Matrix4x4_set__SWIG_3(L);}  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::set(ofMatrix4x4 const &)\n" "    ofMatrix4x4::set(float const *const)\n"
  "    ofMatrix4x4::set(double const *const)\n"
  "    ofMatrix4x4::set(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_Matrix4x4_getPtr__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float *result = 0 ; SWIG_check_num_args("ofMatrix4x4::getPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getPtr",1,"ofMatrix4x4 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getPtr",1,SWIGTYPE_p_ofMatrix4x4); }  result = (float *)(arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Matrix4x4_getPtr__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float *result = 0 ; SWIG_check_num_args("ofMatrix4x4::getPtr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getPtr",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getPtr",1,SWIGTYPE_p_ofMatrix4x4); }  result = (float *)((ofMatrix4x4 const *)arg1)->getPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Matrix4x4_getPtr(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_getPtr__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_getPtr__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_getPtr'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::getPtr()\n" "    ofMatrix4x4::getPtr() const\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_isIdentity(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::isIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::isIdentity",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_isIdentity",1,SWIGTYPE_p_ofMatrix4x4); }  result = (bool)((ofMatrix4x4 const *)arg1)->isIdentity();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeIdentityMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  SWIG_check_num_args("ofMatrix4x4::makeIdentityMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeIdentityMatrix",1,"ofMatrix4x4 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeIdentityMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->makeIdentityMatrix(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeScaleMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeScaleMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeScaleMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeScaleMatrix",2,SWIGTYPE_p_ofVec3f); }  (arg1)->makeScaleMatrix((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeScaleMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::makeScaleMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeScaleMatrix",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeScaleMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->makeScaleMatrix(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeScaleMatrix(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_makeScaleMatrix__SWIG_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_makeScaleMatrix__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_makeScaleMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::makeScaleMatrix(ofVec3f const &)\n"
  "    ofMatrix4x4::makeScaleMatrix(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_makeTranslationMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeTranslationMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeTranslationMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeTranslationMatrix",2,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeTranslationMatrix((ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeTranslationMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofMatrix4x4::makeTranslationMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeTranslationMatrix",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeTranslationMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->makeTranslationMatrix(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeTranslationMatrix(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_makeTranslationMatrix__SWIG_0(L);}  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_makeTranslationMatrix__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_makeTranslationMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::makeTranslationMatrix(ofVec3f const &)\n"
  "    ofMatrix4x4::makeTranslationMatrix(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_makeRotationMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotationMatrix((ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeRotationMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotationMatrix(arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Matrix4x4_makeRotationMatrix__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->makeRotationMatrix(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeRotationMatrix__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",2,SWIGTYPE_p_ofQuaternion); } 
  (arg1)->makeRotationMatrix((ofQuaternion const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Matrix4x4_makeRotationMatrix__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; ofVec3f *arg3 = 0 ; float arg4 ; ofVec3f *arg5 = 0 ; float arg6 ; ofVec3f *arg7 = 0 ;
  SWIG_check_num_args("ofMatrix4x4::makeRotationMatrix",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",3,"ofVec3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",5,"ofVec3f const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",6,"float");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofMatrix4x4::makeRotationMatrix",7,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",3,SWIGTYPE_p_ofVec3f); }  arg4 = (float)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",5,SWIGTYPE_p_ofVec3f); }  arg6 = (float)lua_tonumber(L, 6);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeRotationMatrix",7,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotationMatrix(arg2,(ofVec3f const &)*arg3,arg4,(ofVec3f const &)*arg5,arg6,(ofVec3f const &)*arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeRotationMatrix(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_makeRotationMatrix__SWIG_3(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_makeRotationMatrix__SWIG_0(L);}  }  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_makeRotationMatrix__SWIG_1(L);}  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Matrix4x4_makeRotationMatrix__SWIG_2(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_makeRotationMatrix__SWIG_4(L);}  }  }  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_makeRotationMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::makeRotationMatrix(ofVec3f const &,ofVec3f const &)\n"
  "    ofMatrix4x4::makeRotationMatrix(float,ofVec3f const &)\n"
  "    ofMatrix4x4::makeRotationMatrix(float,float,float,float)\n" "    ofMatrix4x4::makeRotationMatrix(ofQuaternion const &)\n"
  "    ofMatrix4x4::makeRotationMatrix(float,ofVec3f const &,float,ofVec3f const &,float,ofVec3f const &)\n");
  lua_error(L);return 0; }
static int _wrap_Matrix4x4_makeInvertOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; bool result; SWIG_check_num_args("ofMatrix4x4::makeInvertOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeInvertOf",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeInvertOf",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeInvertOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeInvertOf",2,SWIGTYPE_p_ofMatrix4x4); } 
  result = (bool)(arg1)->makeInvertOf((ofMatrix4x4 const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeOrthoNormalOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeOrthoNormalOf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeOrthoNormalOf",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeOrthoNormalOf",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeOrthoNormalOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeOrthoNormalOf",2,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->makeOrthoNormalOf((ofMatrix4x4 const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeFromMultiplicationOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; ofMatrix4x4 *arg3 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeFromMultiplicationOf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeFromMultiplicationOf",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeFromMultiplicationOf",2,"ofMatrix4x4 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeFromMultiplicationOf",3,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeFromMultiplicationOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeFromMultiplicationOf",2,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeFromMultiplicationOf",3,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->makeFromMultiplicationOf((ofMatrix4x4 const &)*arg2,(ofMatrix4x4 const &)*arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getInverse(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::getInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getInverse",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInverse",1,SWIGTYPE_p_ofMatrix4x4); }  result = ((ofMatrix4x4 const *)arg1)->getInverse(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeOrthoMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; double arg6 ; double arg7 ;
  SWIG_check_num_args("ofMatrix4x4::makeOrthoMatrix",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",6,"double");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix4x4::makeOrthoMatrix",7,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeOrthoMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6); arg7 = (double)lua_tonumber(L, 7); (arg1)->makeOrthoMatrix(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeOrtho2DMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; SWIG_check_num_args("ofMatrix4x4::makeOrtho2DMatrix",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makeOrtho2DMatrix",5,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeOrtho2DMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  (arg1)->makeOrtho2DMatrix(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeFrustumMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; double arg6 ; double arg7 ;
  SWIG_check_num_args("ofMatrix4x4::makeFrustumMatrix",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",6,"double");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofMatrix4x4::makeFrustumMatrix",7,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeFrustumMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6); arg7 = (double)lua_tonumber(L, 7);
  (arg1)->makeFrustumMatrix(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Matrix4x4_makePerspectiveMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double arg2 ; double arg3 ; double arg4 ; double arg5 ; SWIG_check_num_args("ofMatrix4x4::makePerspectiveMatrix",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::makePerspectiveMatrix",5,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makePerspectiveMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5);
  (arg1)->makePerspectiveMatrix(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeLookAtMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeLookAtMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeLookAtMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeLookAtMatrix",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeLookAtMatrix",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::makeLookAtMatrix",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeLookAtMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeLookAtMatrix",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeLookAtMatrix",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeLookAtMatrix",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeLookAtMatrix((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_makeLookAtViewMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; SWIG_check_num_args("ofMatrix4x4::makeLookAtViewMatrix",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::makeLookAtViewMatrix",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::makeLookAtViewMatrix",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::makeLookAtViewMatrix",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::makeLookAtViewMatrix",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_makeLookAtViewMatrix",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeLookAtViewMatrix",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeLookAtViewMatrix",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_makeLookAtViewMatrix",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeLookAtViewMatrix((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getOrtho(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; double *arg2 = 0 ;
  double *arg3 = 0 ; double *arg4 = 0 ; double *arg5 = 0 ; double *arg6 = 0 ; double *arg7 = 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::getOrtho",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getOrtho",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getOrtho",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getOrtho",3,"double &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getOrtho",4,"double &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::getOrtho",5,"double &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofMatrix4x4::getOrtho",6,"double &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofMatrix4x4::getOrtho",7,"double &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getOrtho",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getOrtho",2,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getOrtho",3,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getOrtho",4,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getOrtho",5,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getOrtho",6,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getOrtho",7,SWIGTYPE_p_double); } 
  result = (bool)((ofMatrix4x4 const *)arg1)->getOrtho(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getFrustum(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = 0 ; double *arg3 = 0 ; double *arg4 = 0 ; double *arg5 = 0 ; double *arg6 = 0 ; double *arg7 = 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::getFrustum",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getFrustum",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getFrustum",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getFrustum",3,"double &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getFrustum",4,"double &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::getFrustum",5,"double &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofMatrix4x4::getFrustum",6,"double &");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofMatrix4x4::getFrustum",7,"double &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getFrustum",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getFrustum",2,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getFrustum",3,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getFrustum",4,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getFrustum",5,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getFrustum",6,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getFrustum",7,SWIGTYPE_p_double); } 
  result = (bool)((ofMatrix4x4 const *)arg1)->getFrustum(*arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getPerspective(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  double *arg2 = 0 ; double *arg3 = 0 ; double *arg4 = 0 ; double *arg5 = 0 ; bool result;
  SWIG_check_num_args("ofMatrix4x4::getPerspective",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getPerspective",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getPerspective",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getPerspective",3,"double &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getPerspective",4,"double &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::getPerspective",5,"double &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getPerspective",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getPerspective",2,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getPerspective",3,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getPerspective",4,SWIGTYPE_p_double); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix4x4_getPerspective",5,SWIGTYPE_p_double); } 
  result = (bool)((ofMatrix4x4 const *)arg1)->getPerspective(*arg2,*arg3,*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getLookAt__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::getLookAt",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getLookAt",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getLookAt",2,"ofVec3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getLookAt",3,"ofVec3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getLookAt",4,"ofVec3f &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::getLookAt",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getLookAt",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_getLookAt",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_getLookAt",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_getLookAt",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  ((ofMatrix4x4 const *)arg1)->getLookAt(*arg2,*arg3,*arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Matrix4x4_getLookAt__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; SWIG_check_num_args("ofMatrix4x4::getLookAt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getLookAt",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::getLookAt",2,"ofVec3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::getLookAt",3,"ofVec3f &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::getLookAt",4,"ofVec3f &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getLookAt",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_getLookAt",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_getLookAt",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_getLookAt",4,SWIGTYPE_p_ofVec3f); }  ((ofMatrix4x4 const *)arg1)->getLookAt(*arg2,*arg3,*arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getLookAt(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_getLookAt__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Matrix4x4_getLookAt__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_getLookAt'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::getLookAt(ofVec3f &,ofVec3f &,ofVec3f &,float) const\n"
  "    ofMatrix4x4::getLookAt(ofVec3f &,ofVec3f &,ofVec3f &) const\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_decompose(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofQuaternion *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofQuaternion *arg5 = 0 ;
  SWIG_check_num_args("ofMatrix4x4::decompose",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::decompose",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::decompose",2,"ofVec3f &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::decompose",3,"ofQuaternion &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::decompose",4,"ofVec3f &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMatrix4x4::decompose",5,"ofQuaternion &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_decompose",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_decompose",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Matrix4x4_decompose",3,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_decompose",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Matrix4x4_decompose",5,SWIGTYPE_p_ofQuaternion); } 
  ((ofMatrix4x4 const *)arg1)->decompose(*arg2,*arg3,*arg4,*arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Matrix4x4_newIdentityMatrix(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::newIdentityMatrix",0,0) result = ofMatrix4x4::newIdentityMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newScaleMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::newScaleMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newScaleMatrix",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newScaleMatrix",1,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newScaleMatrix((ofVec3f const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newScaleMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newScaleMatrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newScaleMatrix",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newScaleMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newScaleMatrix",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = ofMatrix4x4::newScaleMatrix(arg1,arg2,arg3); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newScaleMatrix(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_newScaleMatrix__SWIG_0(L);}  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_Matrix4x4_newScaleMatrix__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_newScaleMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::newScaleMatrix(ofVec3f const &)\n"
  "    ofMatrix4x4::newScaleMatrix(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_newTranslationMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newTranslationMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newTranslationMatrix",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newTranslationMatrix",1,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newTranslationMatrix((ofVec3f const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newTranslationMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newTranslationMatrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newTranslationMatrix",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newTranslationMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newTranslationMatrix",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = ofMatrix4x4::newTranslationMatrix(arg1,arg2,arg3); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newTranslationMatrix(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_newTranslationMatrix__SWIG_0(L);}  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_Matrix4x4_newTranslationMatrix__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_newTranslationMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::newTranslationMatrix(ofVec3f const &)\n"
  "    ofMatrix4x4::newTranslationMatrix(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_newRotationMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec3f *arg2 = 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newRotationMatrix",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newRotationMatrix",2,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newRotationMatrix((ofVec3f const &)*arg1,(ofVec3f const &)*arg2); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newRotationMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  float arg4 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ofMatrix4x4::newRotationMatrix(arg1,arg2,arg3,arg4); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newRotationMatrix__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *arg2 = 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",2,"ofVec3f const &");
  arg1 = (float)lua_tonumber(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newRotationMatrix",2,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newRotationMatrix(arg1,(ofVec3f const &)*arg2); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newRotationMatrix__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *arg2 = 0 ;
  float arg3 ; ofVec3f *arg4 = 0 ; float arg5 ; ofVec3f *arg6 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",4,"ofVec3f const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",6,"ofVec3f const &");
  arg1 = (float)lua_tonumber(L, 1); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newRotationMatrix",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newRotationMatrix",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newRotationMatrix",6,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newRotationMatrix(arg1,(ofVec3f const &)*arg2,arg3,(ofVec3f const &)*arg4,arg5,(ofVec3f const &)*arg6);
  { ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newRotationMatrix__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newRotationMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newRotationMatrix",1,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Matrix4x4_newRotationMatrix",1,SWIGTYPE_p_ofQuaternion); } 
  result = ofMatrix4x4::newRotationMatrix((ofQuaternion const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newRotationMatrix(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_newRotationMatrix__SWIG_4(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_newRotationMatrix__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_newRotationMatrix__SWIG_2(L);}  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_newRotationMatrix__SWIG_1(L);}  }  }  }  }
   if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_newRotationMatrix__SWIG_3(L);}  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_newRotationMatrix'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::newRotationMatrix(ofVec3f const &,ofVec3f const &)\n"
  "    ofMatrix4x4::newRotationMatrix(float,float,float,float)\n" "    ofMatrix4x4::newRotationMatrix(float,ofVec3f const &)\n"
  "    ofMatrix4x4::newRotationMatrix(float,ofVec3f const &,float,ofVec3f const &,float,ofVec3f const &)\n"
  "    ofMatrix4x4::newRotationMatrix(ofQuaternion const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_getInverseOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::getInverseOf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::getInverseOf",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getInverseOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = ofMatrix4x4::getInverseOf((ofMatrix4x4 const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getTransposedOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::getTransposedOf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::getTransposedOf",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTransposedOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = ofMatrix4x4::getTransposedOf((ofMatrix4x4 const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getOrthoNormalOf(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofMatrix4x4 result;
  SWIG_check_num_args("ofMatrix4x4::getOrthoNormalOf",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::getOrthoNormalOf",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getOrthoNormalOf",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = ofMatrix4x4::getOrthoNormalOf((ofMatrix4x4 const &)*arg1); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newOrthoMatrix(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; double arg5 ; double arg6 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newOrthoMatrix",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::newOrthoMatrix",6,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5); arg6 = (double)lua_tonumber(L, 6);
  result = ofMatrix4x4::newOrthoMatrix(arg1,arg2,arg3,arg4,arg5,arg6); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newOrtho2DMatrix(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newOrtho2DMatrix",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newOrtho2DMatrix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newOrtho2DMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newOrtho2DMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newOrtho2DMatrix",4,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  result = ofMatrix4x4::newOrtho2DMatrix(arg1,arg2,arg3,arg4); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newFrustumMatrix(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; double arg5 ; double arg6 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newFrustumMatrix",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMatrix4x4::newFrustumMatrix",6,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5); arg6 = (double)lua_tonumber(L, 6);
  result = ofMatrix4x4::newFrustumMatrix(arg1,arg2,arg3,arg4,arg5,arg6); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newPerspectiveMatrix(lua_State* L) { int SWIG_arg = 0; double arg1 ; double arg2 ; double arg3 ;
  double arg4 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newPerspectiveMatrix",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMatrix4x4::newPerspectiveMatrix",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::newPerspectiveMatrix",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::newPerspectiveMatrix",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::newPerspectiveMatrix",4,"double"); arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2); arg3 = (double)lua_tonumber(L, 3); arg4 = (double)lua_tonumber(L, 4);
  result = ofMatrix4x4::newPerspectiveMatrix(arg1,arg2,arg3,arg4); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_newLookAtMatrix(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::newLookAtMatrix",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::newLookAtMatrix",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::newLookAtMatrix",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMatrix4x4::newLookAtMatrix",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newLookAtMatrix",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newLookAtMatrix",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_newLookAtMatrix",3,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::newLookAtMatrix((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_postMult__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f result; SWIG_check_num_args("ofMatrix4x4::postMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMult",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMult",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_postMult",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofMatrix4x4 const *)arg1)->postMult((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f result; SWIG_check_num_args("ofMatrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::operator *",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::operator *",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofMatrix4x4 const *)arg1)->operator *((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_postMult__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *arg2 = 0 ; ofVec4f result; SWIG_check_num_args("ofMatrix4x4::postMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMult",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMult",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Matrix4x4_postMult",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofMatrix4x4 const *)arg1)->postMult((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *arg2 = 0 ; ofVec4f result; SWIG_check_num_args("ofMatrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::operator *",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::operator *",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofMatrix4x4 const *)arg1)->operator *((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_preMult__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f result; SWIG_check_num_args("ofMatrix4x4::preMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMult",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMult",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_preMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_preMult",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofMatrix4x4 const *)arg1)->preMult((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_preMult__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec4f *arg2 = 0 ; ofVec4f result; SWIG_check_num_args("ofMatrix4x4::preMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMult",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMult",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_preMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Matrix4x4_preMult",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofMatrix4x4 const *)arg1)->preMult((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_setRotate(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::setRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::setRotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::setRotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setRotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Matrix4x4_setRotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->setRotate((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_setTranslation__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::setTranslation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::setTranslation",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::setTranslation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::setTranslation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::setTranslation",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslation",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setTranslation(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_setTranslation__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::setTranslation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::setTranslation",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::setTranslation",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslation",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_setTranslation",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setTranslation((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_setTranslation(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_setTranslation__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_setTranslation__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_setTranslation'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::setTranslation(float,float,float)\n"
  "    ofMatrix4x4::setTranslation(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::rotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::rotate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::rotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::rotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_rotate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_rotateRad(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::rotateRad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::rotateRad",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::rotateRad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::rotateRad",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::rotateRad",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::rotateRad",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_rotateRad",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rotateRad(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::rotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::rotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_rotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Matrix4x4_rotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->rotate((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_rotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_rotate__SWIG_1(L);}  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Matrix4x4_rotate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_rotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::rotate(float,float,float,float)\n" "    ofMatrix4x4::rotate(ofQuaternion const &)\n");
  lua_error(L);return 0; }
static int _wrap_Matrix4x4_translate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::translate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::translate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::translate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::translate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_translate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->translate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_translate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::translate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::translate",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_translate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_translate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->translate((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_translate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_translate__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_translate__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_translate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::translate(float,float,float)\n"
  "    ofMatrix4x4::translate(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_scale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::scale",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::scale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::scale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_scale",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->scale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_scale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::scale",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::scale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_scale",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_scale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->scale((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_scale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_scale__SWIG_1(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_scale__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_scale'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::scale(float,float,float)\n" "    ofMatrix4x4::scale(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_glRotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::glRotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glRotate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::glRotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::glRotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::glRotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::glRotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_glRotate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->glRotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_glRotateRad(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::glRotateRad",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::glRotateRad",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_glRotateRad",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->glRotateRad(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_glRotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::glRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glRotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::glRotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_glRotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Matrix4x4_glRotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->glRotate((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_glRotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_glRotate__SWIG_1(L);}  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Matrix4x4_glRotate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_glRotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::glRotate(float,float,float,float)\n" "    ofMatrix4x4::glRotate(ofQuaternion const &)\n");
  lua_error(L);return 0; }
static int _wrap_Matrix4x4_glTranslate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::glTranslate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glTranslate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::glTranslate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::glTranslate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::glTranslate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_glTranslate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->glTranslate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_glTranslate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::glTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glTranslate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::glTranslate",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_glTranslate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_glTranslate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->glTranslate((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_glTranslate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_glTranslate__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_glTranslate__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_glTranslate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::glTranslate(float,float,float)\n"
  "    ofMatrix4x4::glTranslate(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_glScale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::glScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glScale",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::glScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::glScale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::glScale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_glScale",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->glScale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_glScale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::glScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::glScale",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::glScale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_glScale",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_glScale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->glScale((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_glScale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_glScale__SWIG_1(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_glScale__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_glScale'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::glScale(float,float,float)\n" "    ofMatrix4x4::glScale(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_getRotate(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion result; SWIG_check_num_args("ofMatrix4x4::getRotate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getRotate",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getRotate",1,SWIGTYPE_p_ofMatrix4x4); }  result = ((ofMatrix4x4 const *)arg1)->getRotate(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getTranslation(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f result; SWIG_check_num_args("ofMatrix4x4::getTranslation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getTranslation",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getTranslation",1,SWIGTYPE_p_ofMatrix4x4); } 
  result = ((ofMatrix4x4 const *)arg1)->getTranslation(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_getScale(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofMatrix4x4::getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::getScale",1,"ofMatrix4x4 const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_getScale",1,SWIGTYPE_p_ofMatrix4x4); }  result = ((ofMatrix4x4 const *)arg1)->getScale(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_transform3x3__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofMatrix4x4 *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofMatrix4x4::transform3x3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::transform3x3",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::transform3x3",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_transform3x3",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_transform3x3",2,SWIGTYPE_p_ofMatrix4x4); } 
  result = ofMatrix4x4::transform3x3((ofVec3f const &)*arg1,(ofMatrix4x4 const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_transform3x3__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofMatrix4x4::transform3x3",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMatrix4x4::transform3x3",1,"ofMatrix4x4 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::transform3x3",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_transform3x3",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_transform3x3",2,SWIGTYPE_p_ofVec3f); } 
  result = ofMatrix4x4::transform3x3((ofMatrix4x4 const &)*arg1,(ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_transform3x3(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_transform3x3__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_transform3x3__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_transform3x3'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::transform3x3(ofVec3f const &,ofMatrix4x4 const &)\n"
  "    ofMatrix4x4::transform3x3(ofMatrix4x4 const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_postMult__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::postMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMult",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMult",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMult",2,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->postMult((ofMatrix4x4 const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_postMult(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_postMult__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_postMult__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_postMult__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_postMult'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::postMult(ofVec3f const &) const\n" "    ofMatrix4x4::postMult(ofVec4f const &) const\n"
  "    ofMatrix4x4::postMult(ofMatrix4x4 const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4___mul__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; ofMatrix4x4 result; SWIG_check_num_args("ofMatrix4x4::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::operator *",1,"ofMatrix4x4 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::operator *",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4___mul",2,SWIGTYPE_p_ofMatrix4x4); } 
  result = ((ofMatrix4x4 const *)arg1)->operator *((ofMatrix4x4 const &)*arg2); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4___mul__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4___mul__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::operator *(ofVec3f const &) const\n" "    ofMatrix4x4::operator *(ofVec4f const &) const\n"
  "    ofMatrix4x4::operator *(ofMatrix4x4 const &) const\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_preMult__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::preMult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMult",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMult",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_preMult",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_preMult",2,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->preMult((ofMatrix4x4 const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_preMult(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_preMult__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_preMult__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_preMult__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_preMult'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMatrix4x4::preMult(ofVec3f const &) const\n" "    ofMatrix4x4::preMult(ofVec4f const &) const\n"
  "    ofMatrix4x4::preMult(ofMatrix4x4 const &)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_postMultTranslate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::postMultTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMultTranslate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_postMultTranslate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->postMultTranslate((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_postMultScale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::postMultScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultScale",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultScale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMultScale",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_postMultScale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->postMultScale((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_postMultRotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::postMultRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMultRotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Matrix4x4_postMultRotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->postMultRotate((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_postMultTranslate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::postMultTranslate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::postMultTranslate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMultTranslate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->postMultTranslate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_postMultTranslate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_postMultTranslate__SWIG_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_postMultTranslate__SWIG_1(L);}  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_postMultTranslate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::postMultTranslate(ofVec3f const &)\n"
  "    ofMatrix4x4::postMultTranslate(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_postMultRotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofMatrix4x4::postMultRotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMatrix4x4::postMultRotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMultRotate",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->postMultRotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_postMultRotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_postMultRotate__SWIG_0(L);}  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Matrix4x4_postMultRotate__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_postMultRotate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::postMultRotate(ofQuaternion const &)\n"
  "    ofMatrix4x4::postMultRotate(float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_postMultScale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofMatrix4x4::postMultScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::postMultScale",1,"ofMatrix4x4 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMatrix4x4::postMultScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMatrix4x4::postMultScale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMatrix4x4::postMultScale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_postMultScale",1,SWIGTYPE_p_ofMatrix4x4); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->postMultScale(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_postMultScale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Matrix4x4_postMultScale__SWIG_0(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Matrix4x4_postMultScale__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix4x4_postMultScale'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMatrix4x4::postMultScale(ofVec3f const &)\n"
  "    ofMatrix4x4::postMultScale(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Matrix4x4_preMultScale(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::preMultScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMultScale",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMultScale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_preMultScale",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_preMultScale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->preMultScale((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_preMultTranslate(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::preMultTranslate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMultTranslate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMultTranslate",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_preMultTranslate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Matrix4x4_preMultTranslate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->preMultTranslate((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Matrix4x4_preMultRotate(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = (ofMatrix4x4 *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofMatrix4x4::preMultRotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMatrix4x4::preMultRotate",1,"ofMatrix4x4 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMatrix4x4::preMultRotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Matrix4x4_preMultRotate",1,SWIGTYPE_p_ofMatrix4x4); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Matrix4x4_preMultRotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->preMultRotate((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Matrix4x4(void *obj) {
ofMatrix4x4 *arg1 = (ofMatrix4x4 *) obj;
delete arg1;
}
static swig_lua_method swig_ofMatrix4x4_methods[] = {
    {"__call", _wrap_Matrix4x4___call}, 
    {"getRowAsVec3f", _wrap_Matrix4x4_getRowAsVec3f}, 
    {"getRowAsVec4f", _wrap_Matrix4x4_getRowAsVec4f}, 
    {"isValid", _wrap_Matrix4x4_isValid}, 
    {"isNaN", _wrap_Matrix4x4_isNaN}, 
    {"set", _wrap_Matrix4x4_set}, 
    {"getPtr", _wrap_Matrix4x4_getPtr}, 
    {"isIdentity", _wrap_Matrix4x4_isIdentity}, 
    {"makeIdentityMatrix", _wrap_Matrix4x4_makeIdentityMatrix}, 
    {"makeScaleMatrix", _wrap_Matrix4x4_makeScaleMatrix}, 
    {"makeTranslationMatrix", _wrap_Matrix4x4_makeTranslationMatrix}, 
    {"makeRotationMatrix", _wrap_Matrix4x4_makeRotationMatrix}, 
    {"makeInvertOf", _wrap_Matrix4x4_makeInvertOf}, 
    {"makeOrthoNormalOf", _wrap_Matrix4x4_makeOrthoNormalOf}, 
    {"makeFromMultiplicationOf", _wrap_Matrix4x4_makeFromMultiplicationOf}, 
    {"getInverse", _wrap_Matrix4x4_getInverse}, 
    {"makeOrthoMatrix", _wrap_Matrix4x4_makeOrthoMatrix}, 
    {"makeOrtho2DMatrix", _wrap_Matrix4x4_makeOrtho2DMatrix}, 
    {"makeFrustumMatrix", _wrap_Matrix4x4_makeFrustumMatrix}, 
    {"makePerspectiveMatrix", _wrap_Matrix4x4_makePerspectiveMatrix}, 
    {"makeLookAtMatrix", _wrap_Matrix4x4_makeLookAtMatrix}, 
    {"makeLookAtViewMatrix", _wrap_Matrix4x4_makeLookAtViewMatrix}, 
    {"getOrtho", _wrap_Matrix4x4_getOrtho}, 
    {"getFrustum", _wrap_Matrix4x4_getFrustum}, 
    {"getPerspective", _wrap_Matrix4x4_getPerspective}, 
    {"getLookAt", _wrap_Matrix4x4_getLookAt}, 
    {"decompose", _wrap_Matrix4x4_decompose}, 
    {"setRotate", _wrap_Matrix4x4_setRotate}, 
    {"setTranslation", _wrap_Matrix4x4_setTranslation}, 
    {"rotateRad", _wrap_Matrix4x4_rotateRad}, 
    {"rotate", _wrap_Matrix4x4_rotate}, 
    {"translate", _wrap_Matrix4x4_translate}, 
    {"scale", _wrap_Matrix4x4_scale}, 
    {"glRotateRad", _wrap_Matrix4x4_glRotateRad}, 
    {"glRotate", _wrap_Matrix4x4_glRotate}, 
    {"glTranslate", _wrap_Matrix4x4_glTranslate}, 
    {"glScale", _wrap_Matrix4x4_glScale}, 
    {"getRotate", _wrap_Matrix4x4_getRotate}, 
    {"getTranslation", _wrap_Matrix4x4_getTranslation}, 
    {"getScale", _wrap_Matrix4x4_getScale}, 
    {"postMult", _wrap_Matrix4x4_postMult}, 
    {"__mul", _wrap_Matrix4x4___mul}, 
    {"preMult", _wrap_Matrix4x4_preMult}, 
    {"postMultTranslate", _wrap_Matrix4x4_postMultTranslate}, 
    {"postMultRotate", _wrap_Matrix4x4_postMultRotate}, 
    {"postMultScale", _wrap_Matrix4x4_postMultScale}, 
    {"preMultScale", _wrap_Matrix4x4_preMultScale}, 
    {"preMultTranslate", _wrap_Matrix4x4_preMultTranslate}, 
    {"preMultRotate", _wrap_Matrix4x4_preMultRotate}, 
    {0,0}
};
static swig_lua_attribute swig_ofMatrix4x4_attributes[] = {
    { "_mat", _wrap_Matrix4x4__mat_get, _wrap_Matrix4x4__mat_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofMatrix4x4_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofMatrix4x4_cls_methods[] = {
    {"newIdentityMatrix", _wrap_Matrix4x4_newIdentityMatrix}, 
    {"newScaleMatrix", _wrap_Matrix4x4_newScaleMatrix}, 
    {"newTranslationMatrix", _wrap_Matrix4x4_newTranslationMatrix}, 
    {"newRotationMatrix", _wrap_Matrix4x4_newRotationMatrix}, 
    {"getInverseOf", _wrap_Matrix4x4_getInverseOf}, 
    {"getTransposedOf", _wrap_Matrix4x4_getTransposedOf}, 
    {"getOrthoNormalOf", _wrap_Matrix4x4_getOrthoNormalOf}, 
    {"newOrthoMatrix", _wrap_Matrix4x4_newOrthoMatrix}, 
    {"newOrtho2DMatrix", _wrap_Matrix4x4_newOrtho2DMatrix}, 
    {"newFrustumMatrix", _wrap_Matrix4x4_newFrustumMatrix}, 
    {"newPerspectiveMatrix", _wrap_Matrix4x4_newPerspectiveMatrix}, 
    {"newLookAtMatrix", _wrap_Matrix4x4_newLookAtMatrix}, 
    {"transform3x3", _wrap_Matrix4x4_transform3x3}, 
    {0,0}
};
static swig_lua_const_info swig_ofMatrix4x4_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofMatrix4x4_bases[] = {0};
static const char *swig_ofMatrix4x4_base_names[] = {0};
static swig_lua_class _wrap_class_ofMatrix4x4 = { "Matrix4x4", &SWIGTYPE_p_ofMatrix4x4,_wrap_new_Matrix4x4, swig_delete_Matrix4x4, swig_ofMatrix4x4_methods, swig_ofMatrix4x4_attributes, { "Matrix4x4", swig_ofMatrix4x4_cls_methods, swig_ofMatrix4x4_cls_attributes, swig_ofMatrix4x4_cls_constants }, swig_ofMatrix4x4_bases, swig_ofMatrix4x4_base_names };

static int _wrap_Quaternion__v_set(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec4f *arg2 = (ofVec4f *) 0 ; SWIG_check_num_args("ofQuaternion::_v",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::_v",1,"ofQuaternion *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofQuaternion::_v",2,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion__v_set",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Quaternion__v_set",2,SWIGTYPE_p_ofVec4f); }  if (arg1) (arg1)->_v = *arg2; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion__v_get(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofQuaternion::_v",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::_v",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion__v_get",1,SWIGTYPE_p_ofQuaternion); }  result = (ofVec4f *)& ((arg1)->_v);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Quaternion__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *result = 0 ;
  SWIG_check_num_args("ofQuaternion::ofQuaternion",0,0) result = (ofQuaternion *)new ofQuaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Quaternion__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofQuaternion *result = 0 ; SWIG_check_num_args("ofQuaternion::ofQuaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofQuaternion::ofQuaternion",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::ofQuaternion",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofQuaternion::ofQuaternion",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofQuaternion::ofQuaternion",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofQuaternion *)new ofQuaternion(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Quaternion__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = 0 ; ofQuaternion *result = 0 ;
  SWIG_check_num_args("ofQuaternion::ofQuaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofQuaternion::ofQuaternion",1,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_ofVec4f); }  result = (ofQuaternion *)new ofQuaternion((ofVec4f const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Quaternion__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *arg2 = 0 ;
  ofQuaternion *result = 0 ; SWIG_check_num_args("ofQuaternion::ofQuaternion",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofQuaternion::ofQuaternion",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::ofQuaternion",2,"ofVec3f const &"); arg1 = (float)lua_tonumber(L, 1);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_ofVec3f); } 
  result = (ofQuaternion *)new ofQuaternion(arg1,(ofVec3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Quaternion__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *arg2 = 0 ; float arg3 ;
  ofVec3f *arg4 = 0 ; float arg5 ; ofVec3f *arg6 = 0 ; ofQuaternion *result = 0 ;
  SWIG_check_num_args("ofQuaternion::ofQuaternion",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofQuaternion::ofQuaternion",1,"float");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::ofQuaternion",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofQuaternion::ofQuaternion",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofQuaternion::ofQuaternion",4,"ofVec3f const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofQuaternion::ofQuaternion",5,"float");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofQuaternion::ofQuaternion",6,"ofVec3f const &"); arg1 = (float)lua_tonumber(L, 1);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_Quaternion",4,SWIGTYPE_p_ofVec3f); }  arg5 = (float)lua_tonumber(L, 5);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("new_Quaternion",6,SWIGTYPE_p_ofVec3f); } 
  result = (ofQuaternion *)new ofQuaternion(arg1,(ofVec3f const &)*arg2,arg3,(ofVec3f const &)*arg4,arg5,(ofVec3f const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Quaternion(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Quaternion__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_new_Quaternion__SWIG_3(L);}  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_Quaternion__SWIG_1(L);}  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Quaternion__SWIG_4(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::ofQuaternion()\n" "    ofQuaternion::ofQuaternion(float,float,float,float)\n"
  "    ofQuaternion::ofQuaternion(ofVec4f const &)\n" "    ofQuaternion::ofQuaternion(float,ofVec3f const &)\n"
  "    ofQuaternion::ofQuaternion(float,ofVec3f const &,float,ofVec3f const &,float,ofVec3f const &)\n");
  lua_error(L);return 0; }
static int _wrap_Quaternion___eq(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; bool result; SWIG_check_num_args("ofQuaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator ==",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator ==",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_ofQuaternion); } 
  result = (bool)((ofQuaternion const *)arg1)->operator ==((ofQuaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_asVec4(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; ofVec4f result;
  SWIG_check_num_args("ofQuaternion::asVec4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::asVec4",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_asVec4",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->asVec4(); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_asVec3(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofQuaternion::asVec3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::asVec3",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_asVec3",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->asVec3(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofQuaternion::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::set",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofQuaternion::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofQuaternion::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofQuaternion::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_set",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec4f *arg2 = 0 ; SWIG_check_num_args("ofQuaternion::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::set",1,"ofQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::set",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_set",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Quaternion_set",2,SWIGTYPE_p_ofVec4f); }  (arg1)->set((ofVec4f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofQuaternion::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::set",1,"ofQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::set",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_set",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Quaternion_set",2,SWIGTYPE_p_ofMatrix4x4); }  (arg1)->set((ofMatrix4x4 const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_set__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_set__SWIG_2(L);}  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Quaternion_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::set(float,float,float,float)\n" "    ofQuaternion::set(ofVec4f const &)\n"
  "    ofQuaternion::set(ofMatrix4x4 const &)\n"); lua_error(L);return 0; }
static int _wrap_Quaternion_get(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofMatrix4x4 *arg2 = 0 ; SWIG_check_num_args("ofQuaternion::get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::get",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::get",2,"ofMatrix4x4 &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_get",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Quaternion_get",2,SWIGTYPE_p_ofMatrix4x4); }  ((ofQuaternion const *)arg1)->get(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_x__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *result = 0 ; SWIG_check_num_args("ofQuaternion::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::x",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_x",1,SWIGTYPE_p_ofQuaternion); }  result = (float *) &(arg1)->x();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Quaternion_y__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *result = 0 ; SWIG_check_num_args("ofQuaternion::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::y",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_y",1,SWIGTYPE_p_ofQuaternion); }  result = (float *) &(arg1)->y();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Quaternion_z__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *result = 0 ; SWIG_check_num_args("ofQuaternion::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::z",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_z",1,SWIGTYPE_p_ofQuaternion); }  result = (float *) &(arg1)->z();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Quaternion_w__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *result = 0 ; SWIG_check_num_args("ofQuaternion::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::w",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_w",1,SWIGTYPE_p_ofQuaternion); }  result = (float *) &(arg1)->w();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Quaternion_x__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float result;
  SWIG_check_num_args("ofQuaternion::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::x",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_x",1,SWIGTYPE_p_ofQuaternion); }  result = (float)((ofQuaternion const *)arg1)->x();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_x(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_x__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_x__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_x'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::x()\n" "    ofQuaternion::x() const\n"); lua_error(L);return 0; }
static int _wrap_Quaternion_y__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float result;
  SWIG_check_num_args("ofQuaternion::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::y",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_y",1,SWIGTYPE_p_ofQuaternion); }  result = (float)((ofQuaternion const *)arg1)->y();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_y(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_y__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_y__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_y'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::y()\n" "    ofQuaternion::y() const\n"); lua_error(L);return 0; }
static int _wrap_Quaternion_z__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float result;
  SWIG_check_num_args("ofQuaternion::z",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::z",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_z",1,SWIGTYPE_p_ofQuaternion); }  result = (float)((ofQuaternion const *)arg1)->z();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_z(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_z__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_z__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_z'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::z()\n" "    ofQuaternion::z() const\n"); lua_error(L);return 0; }
static int _wrap_Quaternion_w__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float result;
  SWIG_check_num_args("ofQuaternion::w",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::w",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_w",1,SWIGTYPE_p_ofQuaternion); }  result = (float)((ofQuaternion const *)arg1)->w();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_w(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_w__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_w__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_w'\n" "  Possible C/C++ prototypes are:\n"
  "    ofQuaternion::w()\n" "    ofQuaternion::w() const\n"); lua_error(L);return 0; }
static int _wrap_Quaternion_zeroRotation(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  bool result; SWIG_check_num_args("ofQuaternion::zeroRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::zeroRotation",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_zeroRotation",1,SWIGTYPE_p_ofQuaternion); } 
  result = (bool)((ofQuaternion const *)arg1)->zeroRotation(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator *",1,"ofQuaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::operator *",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofQuaternion const *)arg1)->operator *(arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator *",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator *",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_ofQuaternion); } 
  result = ((ofQuaternion const *)arg1)->operator *((ofQuaternion const &)*arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion___div__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator /",1,"ofQuaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::operator /",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___div",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofQuaternion const *)arg1)->operator /(arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion___div__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator /",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator /",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___div",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___div",2,SWIGTYPE_p_ofQuaternion); } 
  result = ((ofQuaternion const *)arg1)->operator /((ofQuaternion const &)*arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Quaternion___div__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Quaternion___div__SWIG_0(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___div'\n"
  "  Possible C/C++ prototypes are:\n" "    ofQuaternion::operator /(float) const\n"
  "    ofQuaternion::operator /(ofQuaternion const &) const\n"); lua_error(L);return 0; }
static int _wrap_Quaternion___add(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator +",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator +",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_ofQuaternion); } 
  result = ((ofQuaternion const *)arg1)->operator +((ofQuaternion const &)*arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion___sub(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion *arg2 = 0 ; ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator -",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator -",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_ofQuaternion); } 
  result = ((ofQuaternion const *)arg1)->operator -((ofQuaternion const &)*arg2); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion___unm(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion result; SWIG_check_num_args("ofQuaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator -",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___unm",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->operator -(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion___mul__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f result; SWIG_check_num_args("ofQuaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::operator *",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::operator *",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofQuaternion const *)arg1)->operator *((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Quaternion___mul__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Quaternion___mul__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Quaternion___mul__SWIG_0(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___mul'\n"
  "  Possible C/C++ prototypes are:\n" "    ofQuaternion::operator *(float) const\n"
  "    ofQuaternion::operator *(ofQuaternion const &) const\n" "    ofQuaternion::operator *(ofVec3f const &) const\n");
  lua_error(L);return 0; }
static int _wrap_Quaternion_length(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float result;
  SWIG_check_num_args("ofQuaternion::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::length",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_length",1,SWIGTYPE_p_ofQuaternion); }  result = (float)((ofQuaternion const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_length2(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float result;
  SWIG_check_num_args("ofQuaternion::length2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::length2",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_length2",1,SWIGTYPE_p_ofQuaternion); }  result = (float)((ofQuaternion const *)arg1)->length2();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_conj(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion result; SWIG_check_num_args("ofQuaternion::conj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::conj",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_conj",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->conj(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_inverse(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofQuaternion result; SWIG_check_num_args("ofQuaternion::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::inverse",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_inverse",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->inverse(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_makeRotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofQuaternion::makeRotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofQuaternion::makeRotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofQuaternion::makeRotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->makeRotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_makeRotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofQuaternion::makeRotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",3,SWIGTYPE_p_ofVec3f); }  (arg1)->makeRotate(arg2,(ofVec3f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_makeRotate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float arg2 ; ofVec3f *arg3 = 0 ; float arg4 ; ofVec3f *arg5 = 0 ; float arg6 ; ofVec3f *arg7 = 0 ;
  SWIG_check_num_args("ofQuaternion::makeRotate",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate",3,"ofVec3f const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofQuaternion::makeRotate",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofQuaternion::makeRotate",5,"ofVec3f const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofQuaternion::makeRotate",6,"float");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofQuaternion::makeRotate",7,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",3,SWIGTYPE_p_ofVec3f); }  arg4 = (float)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",5,SWIGTYPE_p_ofVec3f); }  arg6 = (float)lua_tonumber(L, 6);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",7,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotate(arg2,(ofVec3f const &)*arg3,arg4,(ofVec3f const &)*arg5,arg6,(ofVec3f const &)*arg7); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_makeRotate__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofQuaternion::makeRotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate",1,"ofQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion_makeRotate",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotate((ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Quaternion_makeRotate(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_makeRotate__SWIG_3(L);}  }  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_makeRotate__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Quaternion_makeRotate__SWIG_0(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_makeRotate__SWIG_2(L);}  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_makeRotate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofQuaternion::makeRotate(float,float,float,float)\n"
  "    ofQuaternion::makeRotate(float,ofVec3f const &)\n"
  "    ofQuaternion::makeRotate(float,ofVec3f const &,float,ofVec3f const &,float,ofVec3f const &)\n"
  "    ofQuaternion::makeRotate(ofVec3f const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Quaternion_makeRotate_original(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  ofVec3f *arg2 = 0 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofQuaternion::makeRotate_original",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::makeRotate_original",1,"ofQuaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::makeRotate_original",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::makeRotate_original",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_makeRotate_original",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion_makeRotate_original",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion_makeRotate_original",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->makeRotate_original((ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_getRotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *arg2 = 0 ; float *arg3 = 0 ; float *arg4 = 0 ; float *arg5 = 0 ; SWIG_check_num_args("ofQuaternion::getRotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::getRotate",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::getRotate",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::getRotate",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofQuaternion::getRotate",4,"float &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofQuaternion::getRotate",5,"float &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_getRotate",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getRotate",2,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getRotate",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getRotate",4,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getRotate",5,SWIGTYPE_p_float); } 
  ((ofQuaternion const *)arg1)->getRotate(*arg2,*arg3,*arg4,*arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Quaternion_getRotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  float *arg2 = 0 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofQuaternion::getRotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::getRotate",1,"ofQuaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofQuaternion::getRotate",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::getRotate",3,"ofVec3f &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_getRotate",1,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_getRotate",2,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Quaternion_getRotate",3,SWIGTYPE_p_ofVec3f); }  ((ofQuaternion const *)arg1)->getRotate(*arg2,*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_getRotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_getRotate__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { return _wrap_Quaternion_getRotate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_getRotate'\n"
  "  Possible C/C++ prototypes are:\n" "    ofQuaternion::getRotate(float &,float &,float &,float &) const\n"
  "    ofQuaternion::getRotate(float &,ofVec3f &) const\n"); lua_error(L);return 0; }
static int _wrap_Quaternion_getEuler(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofQuaternion::getEuler",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::getEuler",1,"ofQuaternion const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_getEuler",1,SWIGTYPE_p_ofQuaternion); }  result = ((ofQuaternion const *)arg1)->getEuler(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_slerp(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ; float arg2 ;
  ofQuaternion *arg3 = 0 ; ofQuaternion *arg4 = 0 ; SWIG_check_num_args("ofQuaternion::slerp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::slerp",1,"ofQuaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofQuaternion::slerp",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofQuaternion::slerp",3,"ofQuaternion const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofQuaternion::slerp",4,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",1,SWIGTYPE_p_ofQuaternion); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",3,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",4,SWIGTYPE_p_ofQuaternion); } 
  (arg1)->slerp(arg2,(ofQuaternion const &)*arg3,(ofQuaternion const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Quaternion_normalize(lua_State* L) { int SWIG_arg = 0; ofQuaternion *arg1 = (ofQuaternion *) 0 ;
  SWIG_check_num_args("ofQuaternion::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofQuaternion::normalize",1,"ofQuaternion *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Quaternion_normalize",1,SWIGTYPE_p_ofQuaternion); }  (arg1)->normalize(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Quaternion(void *obj) {
ofQuaternion *arg1 = (ofQuaternion *) obj;
delete arg1;
}
static swig_lua_method swig_ofQuaternion_methods[] = {
    {"__eq", _wrap_Quaternion___eq}, 
    {"asVec4", _wrap_Quaternion_asVec4}, 
    {"asVec3", _wrap_Quaternion_asVec3}, 
    {"set", _wrap_Quaternion_set}, 
    {"get", _wrap_Quaternion_get}, 
    {"x", _wrap_Quaternion_x}, 
    {"y", _wrap_Quaternion_y}, 
    {"z", _wrap_Quaternion_z}, 
    {"w", _wrap_Quaternion_w}, 
    {"zeroRotation", _wrap_Quaternion_zeroRotation}, 
    {"__div", _wrap_Quaternion___div}, 
    {"__add", _wrap_Quaternion___add}, 
    {"__sub", _wrap_Quaternion___sub}, 
    {"__unm", _wrap_Quaternion___unm}, 
    {"__mul", _wrap_Quaternion___mul}, 
    {"length", _wrap_Quaternion_length}, 
    {"length2", _wrap_Quaternion_length2}, 
    {"conj", _wrap_Quaternion_conj}, 
    {"inverse", _wrap_Quaternion_inverse}, 
    {"makeRotate", _wrap_Quaternion_makeRotate}, 
    {"makeRotate_original", _wrap_Quaternion_makeRotate_original}, 
    {"getRotate", _wrap_Quaternion_getRotate}, 
    {"getEuler", _wrap_Quaternion_getEuler}, 
    {"slerp", _wrap_Quaternion_slerp}, 
    {"normalize", _wrap_Quaternion_normalize}, 
    {0,0}
};
static swig_lua_attribute swig_ofQuaternion_attributes[] = {
    { "_v", _wrap_Quaternion__v_get, _wrap_Quaternion__v_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofQuaternion_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofQuaternion_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofQuaternion_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofQuaternion_bases[] = {0};
static const char *swig_ofQuaternion_base_names[] = {0};
static swig_lua_class _wrap_class_ofQuaternion = { "Quaternion", &SWIGTYPE_p_ofQuaternion,_wrap_new_Quaternion, swig_delete_Quaternion, swig_ofQuaternion_methods, swig_ofQuaternion_attributes, { "Quaternion", swig_ofQuaternion_cls_methods, swig_ofQuaternion_cls_attributes, swig_ofQuaternion_cls_constants }, swig_ofQuaternion_bases, swig_ofQuaternion_base_names };

static int _wrap_Vec2f_x_set(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec2f::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::x",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::x",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_x_set",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->x = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_x_get(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float result;
  SWIG_check_num_args("ofVec2f::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::x",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_x_get",1,SWIGTYPE_p_ofVec2f); }
   result = (float) ((arg1)->x); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_y_set(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec2f::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::y",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::y",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_y_set",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->y = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_y_get(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float result;
  SWIG_check_num_args("ofVec2f::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::y",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_y_get",1,SWIGTYPE_p_ofVec2f); }
   result = (float) ((arg1)->y); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec2f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",0,0) result = (ofVec2f *)new ofVec2f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Vec2f__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec2f::ofVec2f",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (ofVec2f *)new ofVec2f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Vec2f__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec2f::ofVec2f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::ofVec2f",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofVec2f *)new ofVec2f(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Vec2f__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec2f::ofVec2f",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("new_Vec2f",1,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec2f *)new ofVec2f((ofVec3f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec2f__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = 0 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::ofVec2f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec2f::ofVec2f",1,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("new_Vec2f",1,SWIGTYPE_p_ofVec4f); } 
  result = (ofVec2f *)new ofVec2f((ofVec4f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec2f(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Vec2f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Vec2f__SWIG_3(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Vec2f__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_Vec2f__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_Vec2f__SWIG_2(L);}
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vec2f'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::ofVec2f()\n" "    ofVec2f::ofVec2f(float)\n"
  "    ofVec2f::ofVec2f(float,float)\n" "    ofVec2f::ofVec2f(ofVec3f const &)\n" "    ofVec2f::ofVec2f(ofVec4f const &)\n");
  lua_error(L);return 0; }
static int _wrap_Vec2f_getPtr__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec2f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getPtr",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_getPtr",1,SWIGTYPE_p_ofVec2f); }
   result = (float *)(arg1)->getPtr(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_getPtr__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec2f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getPtr",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_getPtr",1,SWIGTYPE_p_ofVec2f); }
   result = (float *)((ofVec2f const *)arg1)->getPtr(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_getPtr(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_getPtr__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_getPtr__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_getPtr'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::getPtr()\n" "    ofVec2f::getPtr() const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec2f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::set",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_set",1,SWIGTYPE_p_ofVec2f); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofVec2f::set",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::set",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_set",1,SWIGTYPE_p_ofVec2f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  SWIG_check_num_args("ofVec2f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::set",1,"ofVec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::set",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_set",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_set",2,SWIGTYPE_p_ofVec2f); } 
  (arg1)->set((ofVec2f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_set(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_set__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec2f_set__SWIG_0(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Vec2f_set__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::set(float)\n" "    ofVec2f::set(float,float)\n" "    ofVec2f::set(ofVec2f const &)\n"); lua_error(L);return 0; }
static int _wrap_Vec2f___eq(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofVec2f::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator ==",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator ==",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___eq",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___eq",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->operator ==((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_match__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec2f::match",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::match",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::match",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::match",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_match",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_match",2,SWIGTYPE_p_ofVec2f); }
   arg3 = (float)lua_tonumber(L, 3); result = (bool)((ofVec2f const *)arg1)->match((ofVec2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_match__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec2f::match",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::match",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::match",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_match",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_match",2,SWIGTYPE_p_ofVec2f); }
   result = (bool)((ofVec2f const *)arg1)->match((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_match(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_match__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec2f_match__SWIG_0(L);}  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_match'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::match(ofVec2f const &,float) const\n" "    ofVec2f::match(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_isAligned__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec2f::isAligned",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::isAligned",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::isAligned",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::isAligned",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_isAligned",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_isAligned",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec2f const *)arg1)->isAligned((ofVec2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_isAligned__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec2f::isAligned",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::isAligned",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::isAligned",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_isAligned",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_isAligned",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->isAligned((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_isAligned(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_isAligned__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec2f_isAligned__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_isAligned'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::isAligned(ofVec2f const &,float) const\n"
  "    ofVec2f::isAligned(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_isAlignedRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ; float arg3 ; bool result; SWIG_check_num_args("ofVec2f::isAlignedRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::isAlignedRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::isAlignedRad",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::isAlignedRad",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_isAlignedRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_isAlignedRad",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec2f const *)arg1)->isAlignedRad((ofVec2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_isAlignedRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ;
  ofVec2f *arg2 = 0 ; bool result; SWIG_check_num_args("ofVec2f::isAlignedRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::isAlignedRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::isAlignedRad",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_isAlignedRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_isAlignedRad",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->isAlignedRad((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_isAlignedRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_isAlignedRad__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec2f_isAlignedRad__SWIG_0(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_isAlignedRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::isAlignedRad(ofVec2f const &,float) const\n"
  "    ofVec2f::isAlignedRad(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_align__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec2f::align",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::align",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::align",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::align",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_align",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_align",2,SWIGTYPE_p_ofVec2f); }
   arg3 = (float)lua_tonumber(L, 3); result = (bool)((ofVec2f const *)arg1)->align((ofVec2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_align__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec2f::align",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::align",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::align",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_align",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_align",2,SWIGTYPE_p_ofVec2f); }
   result = (bool)((ofVec2f const *)arg1)->align((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_align(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_align__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec2f_align__SWIG_0(L);}  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_align'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::align(ofVec2f const &,float) const\n" "    ofVec2f::align(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_alignRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec2f::alignRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::alignRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::alignRad",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::alignRad",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_alignRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_alignRad",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec2f const *)arg1)->alignRad((ofVec2f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_alignRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec2f::alignRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::alignRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::alignRad",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_alignRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_alignRad",2,SWIGTYPE_p_ofVec2f); } 
  result = (bool)((ofVec2f const *)arg1)->alignRad((ofVec2f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_alignRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_alignRad__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec2f_alignRad__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_alignRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::alignRad(ofVec2f const &,float) const\n"
  "    ofVec2f::alignRad(ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f___add__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator +",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator +",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___add",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___add",2,SWIGTYPE_p_ofVec2f); }
   result = ((ofVec2f const *)arg1)->operator +((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator -",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator -",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___sub",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___sub",2,SWIGTYPE_p_ofVec2f); }
   result = ((ofVec2f const *)arg1)->operator -((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator *",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator *",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___mul",2,SWIGTYPE_p_ofVec2f); }
   result = ((ofVec2f const *)arg1)->operator *((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f___div__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator /",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::operator /",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___div",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___div",2,SWIGTYPE_p_ofVec2f); }
   result = ((ofVec2f const *)arg1)->operator /((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f___add__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator +",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::operator +",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___add",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec2f const *)arg1)->operator +(arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec2f___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::operator +(ofVec2f const &) const\n" "    ofVec2f::operator +(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator -",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::operator -",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___sub",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec2f const *)arg1)->operator -(arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f___sub__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec2f___sub__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::operator -(ofVec2f const &) const\n" "    ofVec2f::operator -(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f___unm(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator -",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___unm",1,SWIGTYPE_p_ofVec2f); }
   result = ((ofVec2f const *)arg1)->operator -(); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator *",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::operator *",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___mul",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec2f const *)arg1)->operator *(arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec2f___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::operator *(ofVec2f const &) const\n" "    ofVec2f::operator *(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f___div__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::operator /",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::operator /",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f___div",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec2f const *)arg1)->operator /(arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec2f___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec2f___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::operator /(ofVec2f const &) const\n" "    ofVec2f::operator /(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_getScaled(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::getScaled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getScaled",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getScaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getScaled",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->getScaled(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_scale(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::scale",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::scale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_scale",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float const)lua_tonumber(L, 2); result = (ofVec2f *) &(arg1)->scale(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_getRotated__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::getRotated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getRotated",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getRotated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getRotated",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->getRotated(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_getRotatedRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::getRotatedRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getRotatedRad",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getRotatedRad",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getRotatedRad",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->getRotatedRad(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotate",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotate",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_rotate",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float)lua_tonumber(L, 2); result = (ofVec2f *) &(arg1)->rotate(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_rotateRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rotateRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotateRad",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotateRad",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_rotateRad",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = (ofVec2f *) &(arg1)->rotateRad(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_getRotated__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::getRotated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getRotated",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getRotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::getRotated",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getRotated",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getRotated",3,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->getRotated(arg2,(ofVec2f const &)*arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_getRotated(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec2f_getRotated__SWIG_0(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_getRotated__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_getRotated'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::getRotated(float) const\n" "    ofVec2f::getRotated(float,ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotate",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::rotate",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_rotate",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_rotate",3,SWIGTYPE_p_ofVec2f); }  result = (ofVec2f *) &(arg1)->rotate(arg2,(ofVec2f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_rotate(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Vec2f_rotate__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_rotate__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_rotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::rotate(float)\n" "    ofVec2f::rotate(float,ofVec2f const &)\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_getRotatedRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::getRotatedRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getRotatedRad",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getRotatedRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::getRotatedRad",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getRotatedRad",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getRotatedRad",3,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->getRotatedRad(arg2,(ofVec2f const &)*arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_getRotatedRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec2f_getRotatedRad__SWIG_0(L);}  }  }
   if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_getRotatedRad__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_getRotatedRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec2f::getRotatedRad(float) const\n"
  "    ofVec2f::getRotatedRad(float,ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_rotateRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rotateRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotateRad",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotateRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::rotateRad",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_rotateRad",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_rotateRad",3,SWIGTYPE_p_ofVec2f); } 
  result = (ofVec2f *) &(arg1)->rotateRad(arg2,(ofVec2f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_rotateRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec2f_rotateRad__SWIG_0(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_rotateRad__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_rotateRad'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::rotateRad(float)\n" "    ofVec2f::rotateRad(float,ofVec2f const &)\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_getMapped(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f *arg3 = 0 ; ofVec2f *arg4 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::getMapped",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getMapped",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::getMapped",2,"ofVec2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::getMapped",3,"ofVec2f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec2f::getMapped",4,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getMapped",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getMapped",2,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getMapped",3,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getMapped",4,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->getMapped((ofVec2f const &)*arg2,(ofVec2f const &)*arg3,(ofVec2f const &)*arg4); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_map(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f *arg3 = 0 ; ofVec2f *arg4 = 0 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::map",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::map",1,"ofVec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::map",2,"ofVec2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::map",3,"ofVec2f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec2f::map",4,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_map",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_map",2,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_map",3,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_map",4,SWIGTYPE_p_ofVec2f); } 
  result = (ofVec2f *) &(arg1)->map((ofVec2f const &)*arg2,(ofVec2f const &)*arg3,(ofVec2f const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_distance(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec2f::distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::distance",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::distance",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_distance",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_distance",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->distance((ofVec2f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_squareDistance(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec2f::squareDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::squareDistance",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::squareDistance",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_squareDistance",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_squareDistance",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->squareDistance((ofVec2f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_getInterpolated(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; ofVec2f result; SWIG_check_num_args("ofVec2f::getInterpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getInterpolated",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::getInterpolated",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::getInterpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getInterpolated",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getInterpolated",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec2f const *)arg1)->getInterpolated((ofVec2f const &)*arg2,arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_interpolate(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::interpolate",1,"ofVec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::interpolate",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::interpolate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_interpolate",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_interpolate",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofVec2f *) &(arg1)->interpolate((ofVec2f const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_getMiddle(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::getMiddle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getMiddle",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::getMiddle",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getMiddle",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getMiddle",2,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->getMiddle((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_middle(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::middle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::middle",1,"ofVec2f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::middle",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_middle",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_middle",2,SWIGTYPE_p_ofVec2f); }  result = (ofVec2f *) &(arg1)->middle((ofVec2f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_average(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = (ofVec2f *) 0 ;
  int arg3 ; ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::average",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::average",1,"ofVec2f *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVec2f::average",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::average",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_average",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_average",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  result = (ofVec2f *) &(arg1)->average((ofVec2f const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_getNormalized(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getNormalized",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getNormalized",1,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->getNormalized(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_normalize(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::normalize",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::normalize",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_normalize",1,SWIGTYPE_p_ofVec2f); }  result = (ofVec2f *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_getLimited(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::getLimited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getLimited",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::getLimited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getLimited",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->getLimited(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_limit(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::limit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::limit",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::limit",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_limit",1,SWIGTYPE_p_ofVec2f); }
   arg2 = (float)lua_tonumber(L, 2); result = (ofVec2f *) &(arg1)->limit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_getPerpendicular(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::getPerpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::getPerpendicular",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_getPerpendicular",1,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->getPerpendicular(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_perpendicular(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *result = 0 ;
  SWIG_check_num_args("ofVec2f::perpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::perpendicular",1,"ofVec2f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_perpendicular",1,SWIGTYPE_p_ofVec2f); }  result = (ofVec2f *) &(arg1)->perpendicular();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec2f_length(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float result;
  SWIG_check_num_args("ofVec2f::length",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::length",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_length",1,SWIGTYPE_p_ofVec2f); }
   result = (float)((ofVec2f const *)arg1)->length(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_lengthSquared(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float result;
  SWIG_check_num_args("ofVec2f::lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::lengthSquared",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_lengthSquared",1,SWIGTYPE_p_ofVec2f); }  result = (float)((ofVec2f const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_angle(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ; float result;
  SWIG_check_num_args("ofVec2f::angle",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::angle",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::angle",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_angle",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_angle",2,SWIGTYPE_p_ofVec2f); }
   result = (float)((ofVec2f const *)arg1)->angle((ofVec2f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_angleRad(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec2f::angleRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::angleRad",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::angleRad",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_angleRad",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_angleRad",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->angleRad((ofVec2f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_dot(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ; float result;
  SWIG_check_num_args("ofVec2f::dot",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::dot",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::dot",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_dot",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_dot",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->dot((ofVec2f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_rescaled(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::rescaled",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rescaled",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rescaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_rescaled",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->rescaled(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_rescale(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofVec2f::rescale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rescale",1,"ofVec2f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rescale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_rescale",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = (ofVec2f *) &(arg1)->rescale(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_rotated__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::rotated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotated",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_rotated",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->rotated(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_normalized(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::normalized",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_normalized",1,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->normalized(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_limited(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::limited",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::limited",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::limited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_limited",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec2f const *)arg1)->limited(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_perpendiculared(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f result;
  SWIG_check_num_args("ofVec2f::perpendiculared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::perpendiculared",1,"ofVec2f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_perpendiculared",1,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->perpendiculared(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_interpolated(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float arg3 ; ofVec2f result; SWIG_check_num_args("ofVec2f::interpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::interpolated",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::interpolated",2,"ofVec2f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec2f::interpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_interpolated",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_interpolated",2,SWIGTYPE_p_ofVec2f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec2f const *)arg1)->interpolated((ofVec2f const &)*arg2,arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_middled(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f result; SWIG_check_num_args("ofVec2f::middled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::middled",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::middled",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_middled",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_middled",2,SWIGTYPE_p_ofVec2f); }  result = ((ofVec2f const *)arg1)->middled((ofVec2f const &)*arg2); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_mapped(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  ofVec2f *arg3 = 0 ; ofVec2f *arg4 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::mapped",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::mapped",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::mapped",2,"ofVec2f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::mapped",3,"ofVec2f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec2f::mapped",4,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_mapped",1,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_mapped",2,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("Vec2f_mapped",3,SWIGTYPE_p_ofVec2f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_mapped",4,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->mapped((ofVec2f const &)*arg2,(ofVec2f const &)*arg3,(ofVec2f const &)*arg4); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_distanceSquared(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; ofVec2f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec2f::distanceSquared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::distanceSquared",1,"ofVec2f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec2f::distanceSquared",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_distanceSquared",1,SWIGTYPE_p_ofVec2f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_distanceSquared",2,SWIGTYPE_p_ofVec2f); } 
  result = (float)((ofVec2f const *)arg1)->distanceSquared((ofVec2f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_rotated__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = (ofVec2f *) 0 ; float arg2 ;
  ofVec2f *arg3 = 0 ; ofVec2f result; SWIG_check_num_args("ofVec2f::rotated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec2f::rotated",1,"ofVec2f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec2f::rotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec2f::rotated",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_rotated",1,SWIGTYPE_p_ofVec2f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vec2f_rotated",3,SWIGTYPE_p_ofVec2f); } 
  result = ((ofVec2f const *)arg1)->rotated(arg2,(ofVec2f const &)*arg3); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_rotated(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Vec2f_rotated__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec2f_rotated__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec2f_rotated'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec2f::rotated(float) const\n" "    ofVec2f::rotated(float,ofVec2f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec2f_zero(lua_State* L) { int SWIG_arg = 0; ofVec2f result; SWIG_check_num_args("ofVec2f::zero",0,0)
  result = ofVec2f::zero(); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec2f_one(lua_State* L) { int SWIG_arg = 0; ofVec2f result; SWIG_check_num_args("ofVec2f::one",0,0)
  result = ofVec2f::one(); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_Vec2f(void *obj) {
ofVec2f *arg1 = (ofVec2f *) obj;
delete arg1;
}
static swig_lua_method swig_ofVec2f_methods[] = {
    {"getPtr", _wrap_Vec2f_getPtr}, 
    {"set", _wrap_Vec2f_set}, 
    {"__eq", _wrap_Vec2f___eq}, 
    {"match", _wrap_Vec2f_match}, 
    {"isAligned", _wrap_Vec2f_isAligned}, 
    {"isAlignedRad", _wrap_Vec2f_isAlignedRad}, 
    {"align", _wrap_Vec2f_align}, 
    {"alignRad", _wrap_Vec2f_alignRad}, 
    {"__add", _wrap_Vec2f___add}, 
    {"__sub", _wrap_Vec2f___sub}, 
    {"__unm", _wrap_Vec2f___unm}, 
    {"__mul", _wrap_Vec2f___mul}, 
    {"__div", _wrap_Vec2f___div}, 
    {"getScaled", _wrap_Vec2f_getScaled}, 
    {"scale", _wrap_Vec2f_scale}, 
    {"getRotated", _wrap_Vec2f_getRotated}, 
    {"rotate", _wrap_Vec2f_rotate}, 
    {"getRotatedRad", _wrap_Vec2f_getRotatedRad}, 
    {"rotateRad", _wrap_Vec2f_rotateRad}, 
    {"getMapped", _wrap_Vec2f_getMapped}, 
    {"map", _wrap_Vec2f_map}, 
    {"distance", _wrap_Vec2f_distance}, 
    {"squareDistance", _wrap_Vec2f_squareDistance}, 
    {"getInterpolated", _wrap_Vec2f_getInterpolated}, 
    {"interpolate", _wrap_Vec2f_interpolate}, 
    {"getMiddle", _wrap_Vec2f_getMiddle}, 
    {"middle", _wrap_Vec2f_middle}, 
    {"average", _wrap_Vec2f_average}, 
    {"getNormalized", _wrap_Vec2f_getNormalized}, 
    {"normalize", _wrap_Vec2f_normalize}, 
    {"getLimited", _wrap_Vec2f_getLimited}, 
    {"limit", _wrap_Vec2f_limit}, 
    {"getPerpendicular", _wrap_Vec2f_getPerpendicular}, 
    {"perpendicular", _wrap_Vec2f_perpendicular}, 
    {"length", _wrap_Vec2f_length}, 
    {"lengthSquared", _wrap_Vec2f_lengthSquared}, 
    {"angle", _wrap_Vec2f_angle}, 
    {"angleRad", _wrap_Vec2f_angleRad}, 
    {"dot", _wrap_Vec2f_dot}, 
    {"rescaled", _wrap_Vec2f_rescaled}, 
    {"rescale", _wrap_Vec2f_rescale}, 
    {"normalized", _wrap_Vec2f_normalized}, 
    {"limited", _wrap_Vec2f_limited}, 
    {"perpendiculared", _wrap_Vec2f_perpendiculared}, 
    {"interpolated", _wrap_Vec2f_interpolated}, 
    {"middled", _wrap_Vec2f_middled}, 
    {"mapped", _wrap_Vec2f_mapped}, 
    {"distanceSquared", _wrap_Vec2f_distanceSquared}, 
    {"rotated", _wrap_Vec2f_rotated}, 
    {0,0}
};
static swig_lua_attribute swig_ofVec2f_attributes[] = {
    { "x", _wrap_Vec2f_x_get, _wrap_Vec2f_x_set},
    { "y", _wrap_Vec2f_y_get, _wrap_Vec2f_y_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofVec2f_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofVec2f_cls_methods[] = {
    {"zero", _wrap_Vec2f_zero}, 
    {"one", _wrap_Vec2f_one}, 
    {0,0}
};
static swig_lua_const_info swig_ofVec2f_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("DIM", ofVec2f::DIM)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofVec2f_bases[] = {0};
static const char *swig_ofVec2f_base_names[] = {0};
static swig_lua_class _wrap_class_ofVec2f = { "Vec2f", &SWIGTYPE_p_ofVec2f,_wrap_new_Vec2f, swig_delete_Vec2f, swig_ofVec2f_methods, swig_ofVec2f_attributes, { "Vec2f", swig_ofVec2f_cls_methods, swig_ofVec2f_cls_attributes, swig_ofVec2f_cls_constants }, swig_ofVec2f_bases, swig_ofVec2f_base_names };

static int _wrap_Vec3f_x_set(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec3f::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::x",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::x",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_x_set",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->x = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_x_get(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::x",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_x_get",1,SWIGTYPE_p_ofVec3f); }
   result = (float) ((arg1)->x); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_y_set(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec3f::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::y",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::y",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_y_set",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->y = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_y_get(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::y",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_y_get",1,SWIGTYPE_p_ofVec3f); }
   result = (float) ((arg1)->y); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_z_set(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec3f::z",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::z",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::z",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_z_set",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->z = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_z_get(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::z",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::z",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_z_get",1,SWIGTYPE_p_ofVec3f); }
   result = (float) ((arg1)->z); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec3f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",0,0) result = (ofVec3f *)new ofVec3f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Vec3f__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::ofVec3f",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::ofVec3f",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::ofVec3f",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (ofVec3f *)new ofVec3f(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Vec3f__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::ofVec3f",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (ofVec3f *)new ofVec3f(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Vec3f__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (ofVec3f *)new ofVec3f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Vec3f__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = 0 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("new_Vec3f",1,SWIGTYPE_p_ofVec2f); } 
  result = (ofVec3f *)new ofVec3f((ofVec2f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec3f__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = 0 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::ofVec3f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec3f::ofVec3f",1,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("new_Vec3f",1,SWIGTYPE_p_ofVec4f); } 
  result = (ofVec3f *)new ofVec3f((ofVec4f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec3f(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Vec3f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Vec3f__SWIG_4(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Vec3f__SWIG_5(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_Vec3f__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_new_Vec3f__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_new_Vec3f__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vec3f'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::ofVec3f()\n" "    ofVec3f::ofVec3f(float,float,float)\n" "    ofVec3f::ofVec3f(float,float)\n"
  "    ofVec3f::ofVec3f(float)\n" "    ofVec3f::ofVec3f(ofVec2f const &)\n" "    ofVec3f::ofVec3f(ofVec4f const &)\n");
  lua_error(L);return 0; }
static int _wrap_Vec3f_getPtr__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec3f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getPtr",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_getPtr",1,SWIGTYPE_p_ofVec3f); }
   result = (float *)(arg1)->getPtr(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_getPtr__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec3f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getPtr",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_getPtr",1,SWIGTYPE_p_ofVec3f); }
   result = (float *)((ofVec3f const *)arg1)->getPtr(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_getPtr(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_getPtr__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_getPtr__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_getPtr'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::getPtr()\n" "    ofVec3f::getPtr() const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofVec3f::set",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::set",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::set",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_set",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->set(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofVec3f::set",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::set",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::set",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_set",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_set__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofVec3f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::set",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::set",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_set",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_set",2,SWIGTYPE_p_ofVec3f); } 
  (arg1)->set((ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_set__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec3f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::set",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::set",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_set",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->set(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_set(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_set__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec3f_set__SWIG_3(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Vec3f_set__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Vec3f_set__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::set(float,float,float)\n" "    ofVec3f::set(float,float)\n" "    ofVec3f::set(ofVec3f const &)\n"
  "    ofVec3f::set(float)\n"); lua_error(L);return 0; }
static int _wrap_Vec3f___eq(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofVec3f::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator ==",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator ==",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___eq",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___eq",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->operator ==((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_match__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec3f::match",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::match",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::match",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::match",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_match",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_match",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); result = (bool)((ofVec3f const *)arg1)->match((ofVec3f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_match__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec3f::match",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::match",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::match",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_match",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_match",2,SWIGTYPE_p_ofVec3f); }
   result = (bool)((ofVec3f const *)arg1)->match((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_match(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_match__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec3f_match__SWIG_0(L);}  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_match'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::match(ofVec3f const &,float) const\n" "    ofVec3f::match(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_isAligned__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec3f::isAligned",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::isAligned",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::isAligned",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::isAligned",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_isAligned",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_isAligned",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec3f const *)arg1)->isAligned((ofVec3f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_isAligned__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec3f::isAligned",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::isAligned",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::isAligned",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_isAligned",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_isAligned",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->isAligned((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_isAligned(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_isAligned__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec3f_isAligned__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_isAligned'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::isAligned(ofVec3f const &,float) const\n"
  "    ofVec3f::isAligned(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_align__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec3f::align",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::align",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::align",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::align",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_align",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_align",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); result = (bool)((ofVec3f const *)arg1)->align((ofVec3f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_align__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec3f::align",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::align",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::align",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_align",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_align",2,SWIGTYPE_p_ofVec3f); }
   result = (bool)((ofVec3f const *)arg1)->align((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_align(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_align__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec3f_align__SWIG_0(L);}  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_align'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::align(ofVec3f const &,float) const\n" "    ofVec3f::align(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_isAlignedRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ; float arg3 ; bool result; SWIG_check_num_args("ofVec3f::isAlignedRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::isAlignedRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::isAlignedRad",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::isAlignedRad",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_isAlignedRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_isAlignedRad",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec3f const *)arg1)->isAlignedRad((ofVec3f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_isAlignedRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ;
  ofVec3f *arg2 = 0 ; bool result; SWIG_check_num_args("ofVec3f::isAlignedRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::isAlignedRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::isAlignedRad",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_isAlignedRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_isAlignedRad",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->isAlignedRad((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_isAlignedRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_isAlignedRad__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec3f_isAlignedRad__SWIG_0(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_isAlignedRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::isAlignedRad(ofVec3f const &,float) const\n"
  "    ofVec3f::isAlignedRad(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_alignRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec3f::alignRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::alignRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::alignRad",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::alignRad",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_alignRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_alignRad",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)((ofVec3f const *)arg1)->alignRad((ofVec3f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_alignRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec3f::alignRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::alignRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::alignRad",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_alignRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_alignRad",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofVec3f const *)arg1)->alignRad((ofVec3f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_alignRad(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_alignRad__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec3f_alignRad__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_alignRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::alignRad(ofVec3f const &,float) const\n"
  "    ofVec3f::alignRad(ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f___add__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator +",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator +",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___add",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___add",2,SWIGTYPE_p_ofVec3f); }
   result = ((ofVec3f const *)arg1)->operator +((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator -",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator -",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___sub",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___sub",2,SWIGTYPE_p_ofVec3f); }
   result = ((ofVec3f const *)arg1)->operator -((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator *",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator *",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___mul",2,SWIGTYPE_p_ofVec3f); }
   result = ((ofVec3f const *)arg1)->operator *((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f___div__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator /",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::operator /",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___div",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___div",2,SWIGTYPE_p_ofVec3f); }
   result = ((ofVec3f const *)arg1)->operator /((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f___unm(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator -",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___unm",1,SWIGTYPE_p_ofVec3f); }
   result = ((ofVec3f const *)arg1)->operator -(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f___add__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator +",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::operator +",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___add",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec3f const *)arg1)->operator +(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec3f___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::operator +(ofVec3f const &) const\n" "    ofVec3f::operator +(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator -",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::operator -",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___sub",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec3f const *)arg1)->operator -(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f___sub__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec3f___sub__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::operator -(ofVec3f const &) const\n" "    ofVec3f::operator -(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator *",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::operator *",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___mul",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec3f const *)arg1)->operator *(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec3f___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::operator *(ofVec3f const &) const\n" "    ofVec3f::operator *(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f___div__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::operator /",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::operator /",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f___div",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec3f const *)arg1)->operator /(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec3f___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec3f___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::operator /(ofVec3f const &) const\n" "    ofVec3f::operator /(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_getScaled(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::getScaled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getScaled",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getScaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getScaled",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->getScaled(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_scale(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::scale",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::scale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_scale",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float const)lua_tonumber(L, 2); result = (ofVec3f *) &(arg1)->scale(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_getRotated__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getRotated",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotated",3,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getRotated(arg2,(ofVec3f const &)*arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_getRotatedRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotatedRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotatedRad",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotatedRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getRotatedRad",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotatedRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotatedRad",3,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getRotatedRad(arg2,(ofVec3f const &)*arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotate",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_rotate",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotate",3,SWIGTYPE_p_ofVec3f); }  result = (ofVec3f *) &(arg1)->rotate(arg2,(ofVec3f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_rotateRad__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotateRad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotateRad",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotateRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotateRad",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotateRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotateRad",3,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec3f *) &(arg1)->rotateRad(arg2,(ofVec3f const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_getRotated__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotated",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotated",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::getRotated",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::getRotated",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ((ofVec3f const *)arg1)->getRotated(arg2,arg3,arg4); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_getRotatedRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotatedRad",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotatedRad",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotatedRad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::getRotatedRad",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::getRotatedRad",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotatedRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = ((ofVec3f const *)arg1)->getRotatedRad(arg2,arg3,arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotate",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::rotate",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_rotate",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofVec3f *) &(arg1)->rotate(arg2,arg3,arg4); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_rotateRad__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotateRad",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotateRad",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotateRad",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::rotateRad",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::rotateRad",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotateRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); result = (ofVec3f *) &(arg1)->rotateRad(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_getRotated__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotated",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getRotated",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::getRotated",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotated",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotated",4,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getRotated(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_getRotated(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_getRotated__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_getRotated__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Vec3f_getRotated__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_getRotated'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::getRotated(float,ofVec3f const &) const\n" "    ofVec3f::getRotated(float,float,float) const\n"
  "    ofVec3f::getRotated(float,ofVec3f const &,ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_rotate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotate",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotate",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::rotate",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_rotate",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotate",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_rotate",4,SWIGTYPE_p_ofVec3f); }
   result = (ofVec3f *) &(arg1)->rotate(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_rotate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_rotate__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_rotate__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Vec3f_rotate__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_rotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::rotate(float,ofVec3f const &)\n" "    ofVec3f::rotate(float,float,float)\n"
  "    ofVec3f::rotate(float,ofVec3f const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_getRotatedRad__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getRotatedRad",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getRotatedRad",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getRotatedRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getRotatedRad",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::getRotatedRad",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotatedRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotatedRad",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getRotatedRad",4,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getRotatedRad(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_getRotatedRad(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_getRotatedRad__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_getRotatedRad__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Vec3f_getRotatedRad__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_getRotatedRad'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVec3f::getRotatedRad(float,ofVec3f const &) const\n"
  "    ofVec3f::getRotatedRad(float,float,float) const\n"
  "    ofVec3f::getRotatedRad(float,ofVec3f const &,ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_rotateRad__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rotateRad",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotateRad",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotateRad",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotateRad",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::rotateRad",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotateRad",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotateRad",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotateRad",4,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec3f *) &(arg1)->rotateRad(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_rotateRad(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_rotateRad__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_rotateRad__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Vec3f_rotateRad__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_rotateRad'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::rotateRad(float,ofVec3f const &)\n" "    ofVec3f::rotateRad(float,float,float)\n"
  "    ofVec3f::rotateRad(float,ofVec3f const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_getMapped(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *arg5 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getMapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getMapped",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getMapped",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::getMapped",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::getMapped",4,"ofVec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofVec3f::getMapped",5,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getMapped",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getMapped",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getMapped",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getMapped",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getMapped",5,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getMapped((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,(ofVec3f const &)*arg5);
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_map(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *arg5 = 0 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::map",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::map",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::map",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::map",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::map",4,"ofVec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofVec3f::map",5,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_map",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_map",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_map",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_map",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_map",5,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec3f *) &(arg1)->map((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,(ofVec3f const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_distance(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec3f::distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::distance",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::distance",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_distance",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_distance",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->distance((ofVec3f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_squareDistance(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec3f::squareDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::squareDistance",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::squareDistance",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_squareDistance",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_squareDistance",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->squareDistance((ofVec3f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_getInterpolated(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; ofVec3f result; SWIG_check_num_args("ofVec3f::getInterpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getInterpolated",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getInterpolated",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::getInterpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getInterpolated",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getInterpolated",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec3f const *)arg1)->getInterpolated((ofVec3f const &)*arg2,arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_interpolate(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::interpolate",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::interpolate",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::interpolate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_interpolate",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_interpolate",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofVec3f *) &(arg1)->interpolate((ofVec3f const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_getMiddle(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::getMiddle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getMiddle",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getMiddle",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getMiddle",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getMiddle",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getMiddle((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_middle(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::middle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::middle",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::middle",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_middle",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_middle",2,SWIGTYPE_p_ofVec3f); }  result = (ofVec3f *) &(arg1)->middle((ofVec3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_average(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = (ofVec3f *) 0 ;
  int arg3 ; ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::average",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::average",1,"ofVec3f *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVec3f::average",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::average",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_average",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_average",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  result = (ofVec3f *) &(arg1)->average((ofVec3f const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_getNormalized(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getNormalized",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getNormalized",1,SWIGTYPE_p_ofVec3f); }  result = ((ofVec3f const *)arg1)->getNormalized(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_normalize(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *result = 0 ;
  SWIG_check_num_args("ofVec3f::normalize",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::normalize",1,"ofVec3f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_normalize",1,SWIGTYPE_p_ofVec3f); }  result = (ofVec3f *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_getLimited(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::getLimited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getLimited",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::getLimited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getLimited",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->getLimited(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_limit(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::limit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::limit",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::limit",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_limit",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); result = (ofVec3f *) &(arg1)->limit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_getCrossed(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::getCrossed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getCrossed",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getCrossed",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getCrossed",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getCrossed",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getCrossed((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_cross(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::cross",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::cross",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::cross",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_cross",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_cross",2,SWIGTYPE_p_ofVec3f); }
   result = (ofVec3f *) &(arg1)->cross((ofVec3f const &)*arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_getPerpendicular(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::getPerpendicular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::getPerpendicular",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::getPerpendicular",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getPerpendicular",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_getPerpendicular",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->getPerpendicular((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_perpendicular(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::perpendicular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::perpendicular",1,"ofVec3f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::perpendicular",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_perpendicular",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_perpendicular",2,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec3f *) &(arg1)->perpendicular((ofVec3f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec3f_length(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::length",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::length",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_length",1,SWIGTYPE_p_ofVec3f); }
   result = (float)((ofVec3f const *)arg1)->length(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_lengthSquared(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float result;
  SWIG_check_num_args("ofVec3f::lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::lengthSquared",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_lengthSquared",1,SWIGTYPE_p_ofVec3f); }  result = (float)((ofVec3f const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_angle(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ; float result;
  SWIG_check_num_args("ofVec3f::angle",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::angle",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::angle",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_angle",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_angle",2,SWIGTYPE_p_ofVec3f); }
   result = (float)((ofVec3f const *)arg1)->angle((ofVec3f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_angleRad(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec3f::angleRad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::angleRad",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::angleRad",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_angleRad",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_angleRad",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->angleRad((ofVec3f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_dot(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ; float result;
  SWIG_check_num_args("ofVec3f::dot",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::dot",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::dot",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_dot",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_dot",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->dot((ofVec3f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_rescaled(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::rescaled",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rescaled",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rescaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rescaled",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->rescaled(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_rescale(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofVec3f::rescale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rescale",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rescale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rescale",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = (ofVec3f *) &(arg1)->rescale(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_rotated__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::rotated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotated",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotated",3,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->rotated(arg2,(ofVec3f const &)*arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_rotated__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; ofVec3f result; SWIG_check_num_args("ofVec3f::rotated",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotated",1,"ofVec3f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotated",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::rotated",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec3f::rotated",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); result = (arg1)->rotated(arg2,arg3,arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_normalized(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::normalized",1,"ofVec3f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_normalized",1,SWIGTYPE_p_ofVec3f); }  result = ((ofVec3f const *)arg1)->normalized(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_limited(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ; ofVec3f result;
  SWIG_check_num_args("ofVec3f::limited",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::limited",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::limited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_limited",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec3f const *)arg1)->limited(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_crossed(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::crossed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::crossed",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::crossed",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_crossed",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_crossed",2,SWIGTYPE_p_ofVec3f); }  result = ((ofVec3f const *)arg1)->crossed((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_perpendiculared(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::perpendiculared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::perpendiculared",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::perpendiculared",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_perpendiculared",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_perpendiculared",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->perpendiculared((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_mapped(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f *arg5 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::mapped",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::mapped",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::mapped",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::mapped",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::mapped",4,"ofVec3f const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofVec3f::mapped",5,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_mapped",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_mapped",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_mapped",3,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_mapped",4,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Vec3f_mapped",5,SWIGTYPE_p_ofVec3f); }
  
  result = ((ofVec3f const *)arg1)->mapped((ofVec3f const &)*arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4,(ofVec3f const &)*arg5);
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_distanceSquared(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec3f::distanceSquared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::distanceSquared",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::distanceSquared",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_distanceSquared",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_distanceSquared",2,SWIGTYPE_p_ofVec3f); } 
  result = (float)((ofVec3f const *)arg1)->distanceSquared((ofVec3f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_interpolated(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  float arg3 ; ofVec3f result; SWIG_check_num_args("ofVec3f::interpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::interpolated",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::interpolated",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec3f::interpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_interpolated",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_interpolated",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec3f const *)arg1)->interpolated((ofVec3f const &)*arg2,arg3); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_middled(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f result; SWIG_check_num_args("ofVec3f::middled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::middled",1,"ofVec3f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec3f::middled",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_middled",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_middled",2,SWIGTYPE_p_ofVec3f); }  result = ((ofVec3f const *)arg1)->middled((ofVec3f const &)*arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_rotated__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = (ofVec3f *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; ofVec3f result; SWIG_check_num_args("ofVec3f::rotated",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec3f::rotated",1,"ofVec3f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec3f::rotated",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofVec3f::rotated",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofVec3f::rotated",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotated",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotated",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vec3f_rotated",4,SWIGTYPE_p_ofVec3f); } 
  result = ((ofVec3f const *)arg1)->rotated(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_rotated(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_rotated__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Vec3f_rotated__SWIG_2(L);}  }  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Vec3f_rotated__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec3f_rotated'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec3f::rotated(float,ofVec3f const &) const\n" "    ofVec3f::rotated(float,float,float)\n"
  "    ofVec3f::rotated(float,ofVec3f const &,ofVec3f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec3f_zero(lua_State* L) { int SWIG_arg = 0; ofVec3f result; SWIG_check_num_args("ofVec3f::zero",0,0)
  result = ofVec3f::zero(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec3f_one(lua_State* L) { int SWIG_arg = 0; ofVec3f result; SWIG_check_num_args("ofVec3f::one",0,0)
  result = ofVec3f::one(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_Vec3f(void *obj) {
ofVec3f *arg1 = (ofVec3f *) obj;
delete arg1;
}
static swig_lua_method swig_ofVec3f_methods[] = {
    {"getPtr", _wrap_Vec3f_getPtr}, 
    {"set", _wrap_Vec3f_set}, 
    {"__eq", _wrap_Vec3f___eq}, 
    {"match", _wrap_Vec3f_match}, 
    {"isAligned", _wrap_Vec3f_isAligned}, 
    {"align", _wrap_Vec3f_align}, 
    {"isAlignedRad", _wrap_Vec3f_isAlignedRad}, 
    {"alignRad", _wrap_Vec3f_alignRad}, 
    {"__unm", _wrap_Vec3f___unm}, 
    {"__add", _wrap_Vec3f___add}, 
    {"__sub", _wrap_Vec3f___sub}, 
    {"__mul", _wrap_Vec3f___mul}, 
    {"__div", _wrap_Vec3f___div}, 
    {"getScaled", _wrap_Vec3f_getScaled}, 
    {"scale", _wrap_Vec3f_scale}, 
    {"getRotated", _wrap_Vec3f_getRotated}, 
    {"rotate", _wrap_Vec3f_rotate}, 
    {"getRotatedRad", _wrap_Vec3f_getRotatedRad}, 
    {"rotateRad", _wrap_Vec3f_rotateRad}, 
    {"getMapped", _wrap_Vec3f_getMapped}, 
    {"map", _wrap_Vec3f_map}, 
    {"distance", _wrap_Vec3f_distance}, 
    {"squareDistance", _wrap_Vec3f_squareDistance}, 
    {"getInterpolated", _wrap_Vec3f_getInterpolated}, 
    {"interpolate", _wrap_Vec3f_interpolate}, 
    {"getMiddle", _wrap_Vec3f_getMiddle}, 
    {"middle", _wrap_Vec3f_middle}, 
    {"average", _wrap_Vec3f_average}, 
    {"getNormalized", _wrap_Vec3f_getNormalized}, 
    {"normalize", _wrap_Vec3f_normalize}, 
    {"getLimited", _wrap_Vec3f_getLimited}, 
    {"limit", _wrap_Vec3f_limit}, 
    {"getCrossed", _wrap_Vec3f_getCrossed}, 
    {"cross", _wrap_Vec3f_cross}, 
    {"getPerpendicular", _wrap_Vec3f_getPerpendicular}, 
    {"perpendicular", _wrap_Vec3f_perpendicular}, 
    {"length", _wrap_Vec3f_length}, 
    {"lengthSquared", _wrap_Vec3f_lengthSquared}, 
    {"angle", _wrap_Vec3f_angle}, 
    {"angleRad", _wrap_Vec3f_angleRad}, 
    {"dot", _wrap_Vec3f_dot}, 
    {"rescaled", _wrap_Vec3f_rescaled}, 
    {"rescale", _wrap_Vec3f_rescale}, 
    {"normalized", _wrap_Vec3f_normalized}, 
    {"limited", _wrap_Vec3f_limited}, 
    {"crossed", _wrap_Vec3f_crossed}, 
    {"perpendiculared", _wrap_Vec3f_perpendiculared}, 
    {"mapped", _wrap_Vec3f_mapped}, 
    {"distanceSquared", _wrap_Vec3f_distanceSquared}, 
    {"interpolated", _wrap_Vec3f_interpolated}, 
    {"middled", _wrap_Vec3f_middled}, 
    {"rotated", _wrap_Vec3f_rotated}, 
    {0,0}
};
static swig_lua_attribute swig_ofVec3f_attributes[] = {
    { "x", _wrap_Vec3f_x_get, _wrap_Vec3f_x_set},
    { "y", _wrap_Vec3f_y_get, _wrap_Vec3f_y_set},
    { "z", _wrap_Vec3f_z_get, _wrap_Vec3f_z_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofVec3f_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofVec3f_cls_methods[] = {
    {"zero", _wrap_Vec3f_zero}, 
    {"one", _wrap_Vec3f_one}, 
    {0,0}
};
static swig_lua_const_info swig_ofVec3f_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("DIM", ofVec3f::DIM)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofVec3f_bases[] = {0};
static const char *swig_ofVec3f_base_names[] = {0};
static swig_lua_class _wrap_class_ofVec3f = { "Vec3f", &SWIGTYPE_p_ofVec3f,_wrap_new_Vec3f, swig_delete_Vec3f, swig_ofVec3f_methods, swig_ofVec3f_attributes, { "Vec3f", swig_ofVec3f_cls_methods, swig_ofVec3f_cls_attributes, swig_ofVec3f_cls_constants }, swig_ofVec3f_bases, swig_ofVec3f_base_names };

static int _wrap_Vec4f_x_set(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec4f::x",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::x",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::x",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_x_set",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->x = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_x_get(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::x",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::x",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_x_get",1,SWIGTYPE_p_ofVec4f); }
   result = (float) ((arg1)->x); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_y_set(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec4f::y",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::y",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::y",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_y_set",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->y = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_y_get(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::y",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::y",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_y_get",1,SWIGTYPE_p_ofVec4f); }
   result = (float) ((arg1)->y); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_z_set(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec4f::z",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::z",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::z",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_z_set",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->z = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_z_get(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::z",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::z",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_z_get",1,SWIGTYPE_p_ofVec4f); }
   result = (float) ((arg1)->z); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_w_set(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  SWIG_check_num_args("ofVec4f::w",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::w",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::w",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_w_set",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float)lua_tonumber(L, 2); if (arg1) (arg1)->w = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_w_get(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::w",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::w",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_w_get",1,SWIGTYPE_p_ofVec4f); }
   result = (float) ((arg1)->w); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec4f__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::ofVec4f",0,0) result = (ofVec4f *)new ofVec4f();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Vec4f__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::ofVec4f",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec4f::ofVec4f",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (ofVec4f *)new ofVec4f(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Vec4f__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::ofVec4f",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVec4f::ofVec4f",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::ofVec4f",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::ofVec4f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec4f::ofVec4f",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofVec4f *)new ofVec4f(arg1,arg2,arg3,arg4); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec4f__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofVec2f *arg1 = 0 ; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::ofVec4f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec4f::ofVec4f",1,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec2f,0))){ SWIG_fail_ptr("new_Vec4f",1,SWIGTYPE_p_ofVec2f); } 
  result = (ofVec4f *)new ofVec4f((ofVec2f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec4f__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::ofVec4f",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVec4f::ofVec4f",1,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("new_Vec4f",1,SWIGTYPE_p_ofVec3f); } 
  result = (ofVec4f *)new ofVec4f((ofVec3f const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Vec4f(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Vec4f__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Vec4f__SWIG_3(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Vec4f__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_new_Vec4f__SWIG_1(L);}  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_new_Vec4f__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vec4f'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::ofVec4f()\n" "    ofVec4f::ofVec4f(float)\n" "    ofVec4f::ofVec4f(float,float,float,float)\n"
  "    ofVec4f::ofVec4f(ofVec2f const &)\n" "    ofVec4f::ofVec4f(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Vec4f_set__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofVec4f::set",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::set",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::set",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::set",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVec4f::set",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVec4f::set",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_set",1,SWIGTYPE_p_ofVec4f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->set(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_set__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  SWIG_check_num_args("ofVec4f::set",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::set",1,"ofVec4f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::set",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_set",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_set",2,SWIGTYPE_p_ofVec4f); } 
  (arg1)->set((ofVec4f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_set(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec4f_set__SWIG_1(L);}  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Vec4f_set__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec4f_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::set(float,float,float,float)\n" "    ofVec4f::set(ofVec4f const &)\n"); lua_error(L);return 0; }
static int _wrap_Vec4f_getPtr__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec4f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getPtr",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_getPtr",1,SWIGTYPE_p_ofVec4f); }
   result = (float *)(arg1)->getPtr(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_getPtr__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float *result = 0 ;
  SWIG_check_num_args("ofVec4f::getPtr",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getPtr",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_getPtr",1,SWIGTYPE_p_ofVec4f); }
   result = (float *)((ofVec4f const *)arg1)->getPtr(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_getPtr(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Vec4f_getPtr__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Vec4f_getPtr__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec4f_getPtr'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::getPtr()\n" "    ofVec4f::getPtr() const\n"); lua_error(L);return 0; }
static int _wrap_Vec4f___eq(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofVec4f::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator ==",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator ==",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___eq",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___eq",2,SWIGTYPE_p_ofVec4f); } 
  result = (bool)((ofVec4f const *)arg1)->operator ==((ofVec4f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_match__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float arg3 ; bool result; SWIG_check_num_args("ofVec4f::match",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::match",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::match",2,"ofVec4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::match",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_match",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_match",2,SWIGTYPE_p_ofVec4f); }
   arg3 = (float)lua_tonumber(L, 3); result = (bool)((ofVec4f const *)arg1)->match((ofVec4f const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_match__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofVec4f::match",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::match",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::match",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_match",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_match",2,SWIGTYPE_p_ofVec4f); }
   result = (bool)((ofVec4f const *)arg1)->match((ofVec4f const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_match(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec4f_match__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vec4f_match__SWIG_0(L);}  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec4f_match'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::match(ofVec4f const &,float) const\n" "    ofVec4f::match(ofVec4f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec4f___add__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator +",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator +",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___add",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___add",2,SWIGTYPE_p_ofVec4f); }
   result = ((ofVec4f const *)arg1)->operator +((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f___sub__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator -",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::operator -",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___sub",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec4f const *)arg1)->operator -(arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f___sub__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator -",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator -",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___sub",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___sub",2,SWIGTYPE_p_ofVec4f); }
   result = ((ofVec4f const *)arg1)->operator -((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f___sub(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec4f___sub__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec4f___sub__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec4f___sub'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::operator -(float const) const\n" "    ofVec4f::operator -(ofVec4f const &) const\n"); lua_error(L);return 0; }
static int _wrap_Vec4f___add__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator +",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::operator +",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___add",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec4f const *)arg1)->operator +(arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f___add(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec4f___add__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec4f___add__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec4f___add'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::operator +(ofVec4f const &) const\n" "    ofVec4f::operator +(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec4f___unm(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator -",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___unm",1,SWIGTYPE_p_ofVec4f); }
   result = ((ofVec4f const *)arg1)->operator -(); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f___mul__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator *",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator *",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___mul",2,SWIGTYPE_p_ofVec4f); }
   result = ((ofVec4f const *)arg1)->operator *((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f___mul__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator *",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::operator *",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___mul",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec4f const *)arg1)->operator *(arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f___mul(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec4f___mul__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec4f___mul__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec4f___mul'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::operator *(ofVec4f const &) const\n" "    ofVec4f::operator *(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec4f___div__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator /",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::operator /",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___div",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___div",2,SWIGTYPE_p_ofVec4f); }
   result = ((ofVec4f const *)arg1)->operator /((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f___div__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::operator /",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::operator /",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f___div",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float const)lua_tonumber(L, 2); result = ((ofVec4f const *)arg1)->operator /(arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f___div(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Vec4f___div__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec4f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Vec4f___div__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vec4f___div'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVec4f::operator /(ofVec4f const &) const\n" "    ofVec4f::operator /(float const) const\n"); lua_error(L);return 0; }
static int _wrap_Vec4f_getScaled(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::getScaled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getScaled",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::getScaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_getScaled",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->getScaled(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_scale(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::scale",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::scale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_scale",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float const)lua_tonumber(L, 2); result = (ofVec4f *) &(arg1)->scale(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_distance(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec4f::distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::distance",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::distance",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_distance",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_distance",2,SWIGTYPE_p_ofVec4f); } 
  result = (float)((ofVec4f const *)arg1)->distance((ofVec4f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_squareDistance(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec4f::squareDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::squareDistance",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::squareDistance",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_squareDistance",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_squareDistance",2,SWIGTYPE_p_ofVec4f); } 
  result = (float)((ofVec4f const *)arg1)->squareDistance((ofVec4f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_getInterpolated(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float arg3 ; ofVec4f result; SWIG_check_num_args("ofVec4f::getInterpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getInterpolated",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::getInterpolated",2,"ofVec4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::getInterpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_getInterpolated",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_getInterpolated",2,SWIGTYPE_p_ofVec4f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec4f const *)arg1)->getInterpolated((ofVec4f const &)*arg2,arg3); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_interpolate(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float arg3 ; ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::interpolate",1,"ofVec4f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::interpolate",2,"ofVec4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::interpolate",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_interpolate",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_interpolate",2,SWIGTYPE_p_ofVec4f); }  arg3 = (float)lua_tonumber(L, 3);
  result = (ofVec4f *) &(arg1)->interpolate((ofVec4f const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_getMiddle(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::getMiddle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getMiddle",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::getMiddle",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_getMiddle",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_getMiddle",2,SWIGTYPE_p_ofVec4f); } 
  result = ((ofVec4f const *)arg1)->getMiddle((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_middle(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::middle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::middle",1,"ofVec4f *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::middle",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_middle",1,SWIGTYPE_p_ofVec4f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_middle",2,SWIGTYPE_p_ofVec4f); }  result = (ofVec4f *) &(arg1)->middle((ofVec4f const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_average(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = (ofVec4f *) 0 ;
  int arg3 ; ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::average",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::average",1,"ofVec4f *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVec4f::average",2,"ofVec4f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::average",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_average",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_average",2,SWIGTYPE_p_ofVec4f); }  arg3 = (int)lua_tonumber(L, 3);
  result = (ofVec4f *) &(arg1)->average((ofVec4f const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_getNormalized(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::getNormalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getNormalized",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_getNormalized",1,SWIGTYPE_p_ofVec4f); }  result = ((ofVec4f const *)arg1)->getNormalized(); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_normalize(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *result = 0 ;
  SWIG_check_num_args("ofVec4f::normalize",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::normalize",1,"ofVec4f *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_normalize",1,SWIGTYPE_p_ofVec4f); }  result = (ofVec4f *) &(arg1)->normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_getLimited(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::getLimited",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::getLimited",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::getLimited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_getLimited",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->getLimited(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_limit(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::limit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::limit",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::limit",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_limit",1,SWIGTYPE_p_ofVec4f); }
   arg2 = (float)lua_tonumber(L, 2); result = (ofVec4f *) &(arg1)->limit(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vec4f_length(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::length",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::length",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_length",1,SWIGTYPE_p_ofVec4f); }
   result = (float)((ofVec4f const *)arg1)->length(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_lengthSquared(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float result;
  SWIG_check_num_args("ofVec4f::lengthSquared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::lengthSquared",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_lengthSquared",1,SWIGTYPE_p_ofVec4f); }  result = (float)((ofVec4f const *)arg1)->lengthSquared();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_dot(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ; float result;
  SWIG_check_num_args("ofVec4f::dot",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::dot",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::dot",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_dot",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){ SWIG_fail_ptr("Vec4f_dot",2,SWIGTYPE_p_ofVec4f); } 
  result = (float)((ofVec4f const *)arg1)->dot((ofVec4f const &)*arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_rescaled(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::rescaled",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::rescaled",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::rescaled",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_rescaled",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->rescaled(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_rescale(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ;
  ofVec4f *result = 0 ; SWIG_check_num_args("ofVec4f::rescale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::rescale",1,"ofVec4f *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::rescale",2,"float const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_rescale",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float const)lua_tonumber(L, 2);
  result = (ofVec4f *) &(arg1)->rescale(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec4f,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_normalized(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::normalized",1,"ofVec4f const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_normalized",1,SWIGTYPE_p_ofVec4f); }  result = ((ofVec4f const *)arg1)->normalized(); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_limited(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; float arg2 ; ofVec4f result;
  SWIG_check_num_args("ofVec4f::limited",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::limited",1,"ofVec4f const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVec4f::limited",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_limited",1,SWIGTYPE_p_ofVec4f); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofVec4f const *)arg1)->limited(arg2); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_distanceSquared(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float result; SWIG_check_num_args("ofVec4f::distanceSquared",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::distanceSquared",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::distanceSquared",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_distanceSquared",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_distanceSquared",2,SWIGTYPE_p_ofVec4f); } 
  result = (float)((ofVec4f const *)arg1)->distanceSquared((ofVec4f const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_interpolated(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  float arg3 ; ofVec4f result; SWIG_check_num_args("ofVec4f::interpolated",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::interpolated",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::interpolated",2,"ofVec4f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVec4f::interpolated",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_interpolated",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_interpolated",2,SWIGTYPE_p_ofVec4f); }  arg3 = (float)lua_tonumber(L, 3);
  result = ((ofVec4f const *)arg1)->interpolated((ofVec4f const &)*arg2,arg3); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_middled(lua_State* L) { int SWIG_arg = 0; ofVec4f *arg1 = (ofVec4f *) 0 ; ofVec4f *arg2 = 0 ;
  ofVec4f result; SWIG_check_num_args("ofVec4f::middled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVec4f::middled",1,"ofVec4f const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVec4f::middled",2,"ofVec4f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_middled",1,SWIGTYPE_p_ofVec4f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec4f,0))){
    SWIG_fail_ptr("Vec4f_middled",2,SWIGTYPE_p_ofVec4f); }  result = ((ofVec4f const *)arg1)->middled((ofVec4f const &)*arg2); {
    ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_zero(lua_State* L) { int SWIG_arg = 0; ofVec4f result; SWIG_check_num_args("ofVec4f::zero",0,0)
  result = ofVec4f::zero(); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vec4f_one(lua_State* L) { int SWIG_arg = 0; ofVec4f result; SWIG_check_num_args("ofVec4f::one",0,0)
  result = ofVec4f::one(); { ofVec4f * resultptr = new ofVec4f((const ofVec4f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec4f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_Vec4f(void *obj) {
ofVec4f *arg1 = (ofVec4f *) obj;
delete arg1;
}
static swig_lua_method swig_ofVec4f_methods[] = {
    {"set", _wrap_Vec4f_set}, 
    {"getPtr", _wrap_Vec4f_getPtr}, 
    {"__eq", _wrap_Vec4f___eq}, 
    {"match", _wrap_Vec4f_match}, 
    {"__sub", _wrap_Vec4f___sub}, 
    {"__add", _wrap_Vec4f___add}, 
    {"__unm", _wrap_Vec4f___unm}, 
    {"__mul", _wrap_Vec4f___mul}, 
    {"__div", _wrap_Vec4f___div}, 
    {"getScaled", _wrap_Vec4f_getScaled}, 
    {"scale", _wrap_Vec4f_scale}, 
    {"distance", _wrap_Vec4f_distance}, 
    {"squareDistance", _wrap_Vec4f_squareDistance}, 
    {"getInterpolated", _wrap_Vec4f_getInterpolated}, 
    {"interpolate", _wrap_Vec4f_interpolate}, 
    {"getMiddle", _wrap_Vec4f_getMiddle}, 
    {"middle", _wrap_Vec4f_middle}, 
    {"average", _wrap_Vec4f_average}, 
    {"getNormalized", _wrap_Vec4f_getNormalized}, 
    {"normalize", _wrap_Vec4f_normalize}, 
    {"getLimited", _wrap_Vec4f_getLimited}, 
    {"limit", _wrap_Vec4f_limit}, 
    {"length", _wrap_Vec4f_length}, 
    {"lengthSquared", _wrap_Vec4f_lengthSquared}, 
    {"dot", _wrap_Vec4f_dot}, 
    {"rescaled", _wrap_Vec4f_rescaled}, 
    {"rescale", _wrap_Vec4f_rescale}, 
    {"normalized", _wrap_Vec4f_normalized}, 
    {"limited", _wrap_Vec4f_limited}, 
    {"distanceSquared", _wrap_Vec4f_distanceSquared}, 
    {"interpolated", _wrap_Vec4f_interpolated}, 
    {"middled", _wrap_Vec4f_middled}, 
    {0,0}
};
static swig_lua_attribute swig_ofVec4f_attributes[] = {
    { "x", _wrap_Vec4f_x_get, _wrap_Vec4f_x_set},
    { "y", _wrap_Vec4f_y_get, _wrap_Vec4f_y_set},
    { "z", _wrap_Vec4f_z_get, _wrap_Vec4f_z_set},
    { "w", _wrap_Vec4f_w_get, _wrap_Vec4f_w_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofVec4f_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofVec4f_cls_methods[] = {
    {"zero", _wrap_Vec4f_zero}, 
    {"one", _wrap_Vec4f_one}, 
    {0,0}
};
static swig_lua_const_info swig_ofVec4f_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("DIM", ofVec4f::DIM)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofVec4f_bases[] = {0};
static const char *swig_ofVec4f_base_names[] = {0};
static swig_lua_class _wrap_class_ofVec4f = { "Vec4f", &SWIGTYPE_p_ofVec4f,_wrap_new_Vec4f, swig_delete_Vec4f, swig_ofVec4f_methods, swig_ofVec4f_attributes, { "Vec4f", swig_ofVec4f_cls_methods, swig_ofVec4f_cls_attributes, swig_ofVec4f_cls_constants }, swig_ofVec4f_bases, swig_ofVec4f_base_names };

static int _wrap_seedRandom__SWIG_0(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSeedRandom",0,0) ofSeedRandom();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_seedRandom__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSeedRandom",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSeedRandom",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSeedRandom(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_seedRandom(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_seedRandom__SWIG_0(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_seedRandom__SWIG_1(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'seedRandom'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSeedRandom()\n" "    ofSeedRandom(int)\n"); lua_error(L);return 0; }
static int _wrap_random__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result; SWIG_check_num_args("ofRandom",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRandom",1,"float"); arg1 = (float)lua_tonumber(L, 1); result = (float)ofRandom(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_random__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofRandom",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRandom",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRandom",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofRandom(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_random(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_random__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_random__SWIG_1(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'random'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRandom(float)\n" "    ofRandom(float,float)\n"); lua_error(L);return 0; }
static int _wrap_randomf(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofRandomf",0,0)
  result = (float)ofRandomf(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_randomuf(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofRandomuf",0,0)
  result = (float)ofRandomuf(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_normalize(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofNormalize",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNormalize",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNormalize",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNormalize",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofNormalize(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_map__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  bool arg6 ; float result; SWIG_check_num_args("ofMap",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMap",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMap",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMap",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMap",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMap",5,"float");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofMap",6,"bool"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0); result = (float)ofMap(arg1,arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_map__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float result; SWIG_check_num_args("ofMap",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMap",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMap",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMap",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMap",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMap",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); result = (float)ofMap(arg1,arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_map(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_map__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { return _wrap_map__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'map'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMap(float,float,float,float,float,bool)\n" "    ofMap(float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_clamp(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofClamp",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClamp",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofClamp",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofClamp",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofClamp(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_lerp(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofLerp",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLerp",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLerp",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLerp",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofLerp(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_dist(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ; float result;
  SWIG_check_num_args("ofDist",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDist",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDist",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDist",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDist",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); result = (float)ofDist(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_distSquared(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ; float result;
  SWIG_check_num_args("ofDistSquared",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDistSquared",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDistSquared",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDistSquared",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDistSquared",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (float)ofDistSquared(arg1,arg2,arg3,arg4); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sign(lua_State* L) { int SWIG_arg = 0; float arg1 ; int result; SWIG_check_num_args("ofSign",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSign",1,"float"); arg1 = (float)lua_tonumber(L, 1); result = (int)ofSign(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_inRange(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; bool result;
  SWIG_check_num_args("ofInRange",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofInRange",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofInRange",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofInRange",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (bool)ofInRange(arg1,arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_radToDeg(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result; SWIG_check_num_args("ofRadToDeg",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRadToDeg",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (float)ofRadToDeg(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_degToRad(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result; SWIG_check_num_args("ofDegToRad",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDegToRad",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  result = (float)ofDegToRad(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_lerpDegrees(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofLerpDegrees",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLerpDegrees",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLerpDegrees",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLerpDegrees",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofLerpDegrees(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_lerpRadians(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofLerpRadians",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLerpRadians",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLerpRadians",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLerpRadians",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofLerpRadians(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_angleDifferenceDegrees(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofAngleDifferenceDegrees",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofAngleDifferenceDegrees",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofAngleDifferenceDegrees",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofAngleDifferenceDegrees(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_angleDifferenceRadians(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofAngleDifferenceRadians",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofAngleDifferenceRadians",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofAngleDifferenceRadians",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofAngleDifferenceRadians(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wrap(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofWrap",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrap",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrap",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofWrap",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofWrap(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_wrapRadians__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofWrapRadians",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapRadians",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrapRadians",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofWrapRadians",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofWrapRadians(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wrapRadians__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofWrapRadians",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapRadians",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrapRadians",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofWrapRadians(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wrapRadians__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result;
  SWIG_check_num_args("ofWrapRadians",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapRadians",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (float)ofWrapRadians(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wrapRadians(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_wrapRadians__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_wrapRadians__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_wrapRadians__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'wrapRadians'\n" "  Possible C/C++ prototypes are:\n"
  "    ofWrapRadians(float,float,float)\n" "    ofWrapRadians(float,float)\n" "    ofWrapRadians(float)\n");
  lua_error(L);return 0; }
static int _wrap_wrapDegrees__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofWrapDegrees",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapDegrees",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrapDegrees",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofWrapDegrees",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofWrapDegrees(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wrapDegrees__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofWrapDegrees",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapDegrees",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofWrapDegrees",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofWrapDegrees(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wrapDegrees__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result;
  SWIG_check_num_args("ofWrapDegrees",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofWrapDegrees",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (float)ofWrapDegrees(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_wrapDegrees(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_wrapDegrees__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_wrapDegrees__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_wrapDegrees__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'wrapDegrees'\n" "  Possible C/C++ prototypes are:\n"
  "    ofWrapDegrees(float,float,float)\n" "    ofWrapDegrees(float,float)\n" "    ofWrapDegrees(float)\n");
  lua_error(L);return 0; }
static int _wrap_randomWidth(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofRandomWidth",0,0)
  result = (float)ofRandomWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_randomHeight(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofRandomHeight",0,0)
  result = (float)ofRandomHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_noise__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result; SWIG_check_num_args("ofNoise",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNoise",1,"float"); arg1 = (float)lua_tonumber(L, 1); result = (float)ofNoise(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_noise__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofNoise",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNoise",2,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  result = (float)ofNoise(arg1,arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_noise__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofNoise",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNoise",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNoise",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = (float)ofNoise(arg1,arg2,arg3); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_noise__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float result; SWIG_check_num_args("ofNoise",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNoise",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNoise",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNoise",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); result = (float)ofNoise(arg1,arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_noise(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_noise__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_noise__SWIG_1(L);}  }
     }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_noise__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_noise__SWIG_3(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'noise'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNoise(float)\n" "    ofNoise(float,float)\n" "    ofNoise(float,float,float)\n"
  "    ofNoise(float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_signedNoise__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float result;
  SWIG_check_num_args("ofSignedNoise",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSignedNoise",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = (float)ofSignedNoise(arg1); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_signedNoise__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float result;
  SWIG_check_num_args("ofSignedNoise",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSignedNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSignedNoise",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = (float)ofSignedNoise(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_signedNoise__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float result;
  SWIG_check_num_args("ofSignedNoise",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSignedNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSignedNoise",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSignedNoise",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); result = (float)ofSignedNoise(arg1,arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_signedNoise__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float result; SWIG_check_num_args("ofSignedNoise",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSignedNoise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSignedNoise",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSignedNoise",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSignedNoise",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (float)ofSignedNoise(arg1,arg2,arg3,arg4); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_signedNoise(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_signedNoise__SWIG_0(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_signedNoise__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_signedNoise__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_signedNoise__SWIG_3(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'signedNoise'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSignedNoise(float)\n" "    ofSignedNoise(float,float)\n" "    ofSignedNoise(float,float,float)\n"
  "    ofSignedNoise(float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_insidePoly__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  std::vector< ofPoint > *arg3 = 0 ; bool result; SWIG_check_num_args("ofInsidePoly",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofInsidePoly",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofInsidePoly",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofInsidePoly",3,"std::vector< ofPoint > const &"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("insidePoly",3,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  result = (bool)ofInsidePoly(arg1,arg2,(std::vector< ofVec3f > const &)*arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_insidePoly__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; std::vector< ofPoint > *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofInsidePoly",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofInsidePoly",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofInsidePoly",2,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("insidePoly",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("insidePoly",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  result = (bool)ofInsidePoly((ofVec3f const &)*arg1,(std::vector< ofVec3f > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_insidePoly(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_insidePoly__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_insidePoly__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'insidePoly'\n" "  Possible C/C++ prototypes are:\n"
  "    ofInsidePoly(float,float,std::vector< ofPoint > const &)\n"
  "    ofInsidePoly(ofPoint const &,std::vector< ofPoint > const &)\n"); lua_error(L);return 0; }
static int _wrap_lineSegmentIntersection(lua_State* L) { int SWIG_arg = 0; ofPoint arg1 ; ofPoint arg2 ; ofPoint arg3 ;
  ofPoint arg4 ; ofPoint *arg5 = 0 ; ofPoint *argp1 ; ofPoint *argp2 ; ofPoint *argp3 ; ofPoint *argp4 ; bool result;
  SWIG_check_num_args("ofLineSegmentIntersection",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofLineSegmentIntersection",1,"ofPoint");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLineSegmentIntersection",2,"ofPoint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofLineSegmentIntersection",3,"ofPoint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofLineSegmentIntersection",4,"ofPoint");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofLineSegmentIntersection",5,"ofPoint &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("lineSegmentIntersection",1,SWIGTYPE_p_ofVec3f); }  arg1 = *argp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("lineSegmentIntersection",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("lineSegmentIntersection",3,SWIGTYPE_p_ofVec3f); }  arg3 = *argp3;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("lineSegmentIntersection",4,SWIGTYPE_p_ofVec3f); }  arg4 = *argp4;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("lineSegmentIntersection",5,SWIGTYPE_p_ofVec3f); } 
  result = (bool)ofLineSegmentIntersection(arg1,arg2,arg3,arg4,*arg5); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_bezierPoint(lua_State* L) { int SWIG_arg = 0; ofPoint arg1 ; ofPoint arg2 ; ofPoint arg3 ; ofPoint arg4 ;
  float arg5 ; ofPoint *argp1 ; ofPoint *argp2 ; ofPoint *argp3 ; ofPoint *argp4 ; ofPoint result;
  SWIG_check_num_args("ofBezierPoint",5,5) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBezierPoint",1,"ofPoint");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBezierPoint",2,"ofPoint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBezierPoint",3,"ofPoint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofBezierPoint",4,"ofPoint");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezierPoint",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("bezierPoint",1,SWIGTYPE_p_ofVec3f); }
   arg1 = *argp1; if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("bezierPoint",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("bezierPoint",3,SWIGTYPE_p_ofVec3f); }
   arg3 = *argp3; if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("bezierPoint",4,SWIGTYPE_p_ofVec3f); }  arg4 = *argp4; arg5 = (float)lua_tonumber(L, 5);
  result = ofBezierPoint(arg1,arg2,arg3,arg4,arg5); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_curvePoint(lua_State* L) { int SWIG_arg = 0; ofPoint arg1 ; ofPoint arg2 ; ofPoint arg3 ; ofPoint arg4 ;
  float arg5 ; ofPoint *argp1 ; ofPoint *argp2 ; ofPoint *argp3 ; ofPoint *argp4 ; ofPoint result;
  SWIG_check_num_args("ofCurvePoint",5,5) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCurvePoint",1,"ofPoint");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCurvePoint",2,"ofPoint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofCurvePoint",3,"ofPoint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofCurvePoint",4,"ofPoint");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCurvePoint",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("curvePoint",1,SWIGTYPE_p_ofVec3f); }
   arg1 = *argp1; if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("curvePoint",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("curvePoint",3,SWIGTYPE_p_ofVec3f); }
   arg3 = *argp3; if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("curvePoint",4,SWIGTYPE_p_ofVec3f); }  arg4 = *argp4; arg5 = (float)lua_tonumber(L, 5);
  result = ofCurvePoint(arg1,arg2,arg3,arg4,arg5); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_bezierTangent(lua_State* L) { int SWIG_arg = 0; ofPoint arg1 ; ofPoint arg2 ; ofPoint arg3 ; ofPoint arg4 ;
  float arg5 ; ofPoint *argp1 ; ofPoint *argp2 ; ofPoint *argp3 ; ofPoint *argp4 ; ofPoint result;
  SWIG_check_num_args("ofBezierTangent",5,5) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBezierTangent",1,"ofPoint");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBezierTangent",2,"ofPoint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBezierTangent",3,"ofPoint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofBezierTangent",4,"ofPoint");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezierTangent",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("bezierTangent",1,SWIGTYPE_p_ofVec3f); }  arg1 = *argp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("bezierTangent",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("bezierTangent",3,SWIGTYPE_p_ofVec3f); }  arg3 = *argp3;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("bezierTangent",4,SWIGTYPE_p_ofVec3f); }  arg4 = *argp4; arg5 = (float)lua_tonumber(L, 5);
  result = ofBezierTangent(arg1,arg2,arg3,arg4,arg5); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_curveTangent(lua_State* L) { int SWIG_arg = 0; ofPoint arg1 ; ofPoint arg2 ; ofPoint arg3 ; ofPoint arg4 ;
  float arg5 ; ofPoint *argp1 ; ofPoint *argp2 ; ofPoint *argp3 ; ofPoint *argp4 ; ofPoint result;
  SWIG_check_num_args("ofCurveTangent",5,5) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCurveTangent",1,"ofPoint");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofCurveTangent",2,"ofPoint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofCurveTangent",3,"ofPoint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofCurveTangent",4,"ofPoint");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCurveTangent",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("curveTangent",1,SWIGTYPE_p_ofVec3f); }  arg1 = *argp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("curveTangent",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("curveTangent",3,SWIGTYPE_p_ofVec3f); }  arg3 = *argp3;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("curveTangent",4,SWIGTYPE_p_ofVec3f); }  arg4 = *argp4; arg5 = (float)lua_tonumber(L, 5);
  result = ofCurveTangent(arg1,arg2,arg3,arg4,arg5); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Pixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPixels_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::ofPixels_",0,0)
  result = (ofPixels_< unsigned char > *)new ofPixels_< unsigned char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Pixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPixels_< unsigned char > *arg1 = 0 ;
  ofPixels_< unsigned char > *result = 0 ; SWIG_check_num_args("ofPixels_< unsigned char >::ofPixels_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::ofPixels_",1,"ofPixels_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("new_Pixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char > *)new ofPixels_< unsigned char >((ofPixels_< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Pixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Pixels__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Pixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Pixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::ofPixels_()\n"
  "    ofPixels_< unsigned char >::ofPixels_(ofPixels_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_Pixels_allocate__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_allocate",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_allocate__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofPixelFormat arg4 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",4,"ofPixelFormat");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_allocate",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofPixelFormat)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_allocate__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofImageType arg4 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::allocate",4,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_allocate",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofImageType)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_allocate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Pixels_allocate__SWIG_0(L);}  }  }  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Pixels_allocate__SWIG_1(L);}  }  }  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Pixels_allocate__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pixels_allocate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::allocate(int,int,int)\n" "    ofPixels_< unsigned char >::allocate(int,int,ofPixelFormat)\n"
  "    ofPixels_< unsigned char >::allocate(int,int,ofImageType)\n"); lua_error(L);return 0; }
static int _wrap_Pixels_set__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::set",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::set",2,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_set",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned char)lua_tonumber(L, 2);
  (arg1)->set(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_set__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; unsigned char arg3 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::set",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::set",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::set",3,"unsigned char");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_set",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative") arg3 = (unsigned char)lua_tonumber(L, 3);
  (arg1)->set(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_set(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Pixels_set__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Pixels_set__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pixels_set'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::set(unsigned char)\n" "    ofPixels_< unsigned char >::set(int,unsigned char)\n");
  lua_error(L);return 0; }
static int _wrap_Pixels_setFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; int arg5 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setFromPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Pixels_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; ofImageType arg5 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromPixels",5,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setFromPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Pixels_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_setFromPixels(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Pixels_setFromPixels__SWIG_0(L);}  }  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Pixels_setFromPixels__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pixels_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPixels_< unsigned char >::setFromPixels(unsigned char const *,int,int,int)\n"
  "    ofPixels_< unsigned char >::setFromPixels(unsigned char const *,int,int,ofImageType)\n"); lua_error(L);return 0; }
static int _wrap_Pixels_setFromExternalPixels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; int arg5 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromExternalPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",2,"unsigned char *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromExternalPixels",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setFromExternalPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Pixels_setFromExternalPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->setFromExternalPixels(arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_setFromAlignedPixels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofPixels_< unsigned char >::setFromAlignedPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",1,"ofPixels_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< unsigned char >::setFromAlignedPixels",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setFromAlignedPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Pixels_setFromAlignedPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setFromAlignedPixels((unsigned char const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_swap(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::swap",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::swap",2,"ofPixels_< unsigned char > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_swap",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_swap",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->swap(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_crop(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::crop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::crop",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_crop",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->crop(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_cropTo(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; int arg3 ;
  int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofPixels_< unsigned char >::cropTo",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",2,"ofPixels_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPixels_< unsigned char >::cropTo",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_cropTo",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_cropTo",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->cropTo(*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_rotate90(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::rotate90",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_rotate90",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->rotate90(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_rotate90To(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::rotate90To",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90To",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90To",2,"ofPixels_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::rotate90To",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_rotate90To",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_rotate90To",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->rotate90To(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_mirrorTo(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; bool arg3 ;
  bool arg4 ; SWIG_check_num_args("ofPixels_< unsigned char >::mirrorTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::mirrorTo",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::mirrorTo",2,"ofPixels_< unsigned char > &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::mirrorTo",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::mirrorTo",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_mirrorTo",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_mirrorTo",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0); (arg1)->mirrorTo(*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_mirror(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::mirror",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::mirror",1,"ofPixels_< unsigned char > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::mirror",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::mirror",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_mirror",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_resize__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofInterpolationMethod arg4 ;
  bool result; SWIG_check_num_args("ofPixels_< unsigned char >::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",4,"ofInterpolationMethod");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_resize",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofInterpolationMethod)(int)lua_tonumber(L, 4);
  result = (bool)(arg1)->resize(arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_resize__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; bool result;
  SWIG_check_num_args("ofPixels_< unsigned char >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::resize",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_resize",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->resize(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_resize(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Pixels_resize__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Pixels_resize__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pixels_resize'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::resize(int,int,ofInterpolationMethod)\n"
  "    ofPixels_< unsigned char >::resize(int,int)\n"); lua_error(L);return 0; }
static int _wrap_Pixels_resizeTo__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ;
  ofInterpolationMethod arg3 ; bool result; SWIG_check_num_args("ofPixels_< unsigned char >::resizeTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",2,"ofPixels_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",3,"ofInterpolationMethod");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_resizeTo",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_resizeTo",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  arg3 = (ofInterpolationMethod)(int)lua_tonumber(L, 3); result = (bool)(arg1)->resizeTo(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_resizeTo__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofPixels_< unsigned char >::resizeTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::resizeTo",2,"ofPixels_< unsigned char > &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_resizeTo",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_resizeTo",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  result = (bool)(arg1)->resizeTo(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_resizeTo(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Pixels_resizeTo__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Pixels_resizeTo__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pixels_resizeTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::resizeTo(ofPixels_< unsigned char > &,ofInterpolationMethod)\n"
  "    ofPixels_< unsigned char >::resizeTo(ofPixels_< unsigned char > &)\n"); lua_error(L);return 0; }
static int _wrap_Pixels_pasteInto(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ; int arg3 ;
  int arg4 ; bool result; SWIG_check_num_args("ofPixels_< unsigned char >::pasteInto",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::pasteInto",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::pasteInto",2,"ofPixels_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::pasteInto",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::pasteInto",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_pasteInto",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_pasteInto",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = (bool)(arg1)->pasteInto(*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_swapRgb(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::swapRgb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::swapRgb",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_swapRgb",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->swapRgb(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_clear(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::clear",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_clear",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixels",1,"ofPixels_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  result = (unsigned char *)(arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_getPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; unsigned char *result = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixels",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getPixels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (unsigned char *)((ofPixels_< unsigned char > const *)arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_getPixels(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Pixels_getPixels__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Pixels_getPixels__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pixels_getPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::getPixels()\n" "    ofPixels_< unsigned char >::getPixels() const\n");
  lua_error(L);return 0; }
static int _wrap_Pixels_getPixelIndex(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getPixelIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixelIndex",1,"ofPixels_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixelIndex",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::getPixelIndex",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getPixelIndex",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = (int)((ofPixels_< unsigned char > const *)arg1)->getPixelIndex(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getColor(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getColor",1,"ofPixels_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::getColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::getColor",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getColor",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = ((ofPixels_< unsigned char > const *)arg1)->getColor(arg2,arg3); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; int arg3 ;
  ofColor_< unsigned char > *arg4 = 0 ; SWIG_check_num_args("ofPixels_< unsigned char >::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",4,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setColor",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setColor",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor(arg2,arg3,(ofColor_< unsigned char > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; ofColor_< unsigned char > *arg3 = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",3,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setColor",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setColor",3,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor(arg2,(ofColor_< unsigned char > const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_setColor__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",1,"ofPixels_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setColor",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setColor",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor((ofColor_< unsigned char > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Pixels_setColor__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Pixels_setColor__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Pixels_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Pixels_setColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPixels_< unsigned char >::setColor(int,int,ofColor_< unsigned char > const &)\n"
  "    ofPixels_< unsigned char >::setColor(int,ofColor_< unsigned char > const &)\n"
  "    ofPixels_< unsigned char >::setColor(ofColor_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_Pixels_isAllocated(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; bool result;
  SWIG_check_num_args("ofPixels_< unsigned char >::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::isAllocated",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_isAllocated",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (bool)((ofPixels_< unsigned char > const *)arg1)->isAllocated(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getWidth(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getWidth",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getWidth",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getHeight(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getHeight",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getHeight",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getBytesPerPixel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getBytesPerPixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getBytesPerPixel",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getBytesPerPixel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBytesPerPixel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getBitsPerPixel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getBitsPerPixel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getBitsPerPixel",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getBitsPerPixel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBitsPerPixel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getBytesPerChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getBytesPerChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getBytesPerChannel",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getBytesPerChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBytesPerChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getBitsPerChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getBitsPerChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getBitsPerChannel",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getBitsPerChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getBitsPerChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getNumChannels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getNumChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getNumChannels",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getNumChannels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->getNumChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; ofPixels_< unsigned char > result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getChannel",1,"ofPixels_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::getChannel",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPixels_< unsigned char > const *)arg1)->getChannel(arg2); {
    ofPixels_< unsigned char > * resultptr = new ofPixels_< unsigned char >((const ofPixels_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPixels_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_setChannel(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ; ofPixels_< unsigned char > arg3 ;
  ofPixels_< unsigned char > *argp3 ; SWIG_check_num_args("ofPixels_< unsigned char >::setChannel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setChannel",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setChannel",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPixels_< unsigned char >::setChannel",3,"ofPixels_< unsigned char > const");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setChannel",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setChannel",3,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = *argp3; (arg1)->setChannel(arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_getImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofImageType result;
  SWIG_check_num_args("ofPixels_< unsigned char >::getImageType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::getImageType",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_getImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofImageType)((ofPixels_< unsigned char > const *)arg1)->getImageType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_setImageType(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; ofImageType arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::setImageType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setImageType",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setImageType",2,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setImageType",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  arg2 = (ofImageType)(int)lua_tonumber(L, 2); (arg1)->setImageType(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Pixels_setNumChannels(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPixels_< unsigned char >::setNumChannels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::setNumChannels",1,"ofPixels_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPixels_< unsigned char >::setNumChannels",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_setNumChannels",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setNumChannels(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Pixels_size(lua_State* L) { int SWIG_arg = 0;
  ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofPixels_< unsigned char >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPixels_< unsigned char >::size",1,"ofPixels_< unsigned char > const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Pixels_size",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (int)((ofPixels_< unsigned char > const *)arg1)->size(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Pixels(void *obj) {
ofPixels_< unsigned char > *arg1 = (ofPixels_< unsigned char > *) obj;
delete arg1;
}
static swig_lua_method swig_ofPixels__Sl_unsigned_SS_char_Sg__methods[] = {
    {"allocate", _wrap_Pixels_allocate}, 
    {"set", _wrap_Pixels_set}, 
    {"setFromPixels", _wrap_Pixels_setFromPixels}, 
    {"setFromExternalPixels", _wrap_Pixels_setFromExternalPixels}, 
    {"setFromAlignedPixels", _wrap_Pixels_setFromAlignedPixels}, 
    {"swap", _wrap_Pixels_swap}, 
    {"crop", _wrap_Pixels_crop}, 
    {"cropTo", _wrap_Pixels_cropTo}, 
    {"rotate90", _wrap_Pixels_rotate90}, 
    {"rotate90To", _wrap_Pixels_rotate90To}, 
    {"mirrorTo", _wrap_Pixels_mirrorTo}, 
    {"mirror", _wrap_Pixels_mirror}, 
    {"resize", _wrap_Pixels_resize}, 
    {"resizeTo", _wrap_Pixels_resizeTo}, 
    {"pasteInto", _wrap_Pixels_pasteInto}, 
    {"swapRgb", _wrap_Pixels_swapRgb}, 
    {"clear", _wrap_Pixels_clear}, 
    {"getPixels", _wrap_Pixels_getPixels}, 
    {"getPixelIndex", _wrap_Pixels_getPixelIndex}, 
    {"getColor", _wrap_Pixels_getColor}, 
    {"setColor", _wrap_Pixels_setColor}, 
    {"isAllocated", _wrap_Pixels_isAllocated}, 
    {"getWidth", _wrap_Pixels_getWidth}, 
    {"getHeight", _wrap_Pixels_getHeight}, 
    {"getBytesPerPixel", _wrap_Pixels_getBytesPerPixel}, 
    {"getBitsPerPixel", _wrap_Pixels_getBitsPerPixel}, 
    {"getBytesPerChannel", _wrap_Pixels_getBytesPerChannel}, 
    {"getBitsPerChannel", _wrap_Pixels_getBitsPerChannel}, 
    {"getNumChannels", _wrap_Pixels_getNumChannels}, 
    {"getChannel", _wrap_Pixels_getChannel}, 
    {"setChannel", _wrap_Pixels_setChannel}, 
    {"getImageType", _wrap_Pixels_getImageType}, 
    {"setImageType", _wrap_Pixels_setImageType}, 
    {"setNumChannels", _wrap_Pixels_setNumChannels}, 
    {"size", _wrap_Pixels_size}, 
    {0,0}
};
static swig_lua_attribute swig_ofPixels__Sl_unsigned_SS_char_Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofPixels__Sl_unsigned_SS_char_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofPixels__Sl_unsigned_SS_char_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofPixels__Sl_unsigned_SS_char_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofPixels__Sl_unsigned_SS_char_Sg__bases[] = {0};
static const char *swig_ofPixels__Sl_unsigned_SS_char_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_ofPixels__Sl_unsigned_SS_char_Sg_ = { "Pixels", &SWIGTYPE_p_ofPixels_T_unsigned_char_t,_wrap_new_Pixels, swig_delete_Pixels, swig_ofPixels__Sl_unsigned_SS_char_Sg__methods, swig_ofPixels__Sl_unsigned_SS_char_Sg__attributes, { "Pixels", swig_ofPixels__Sl_unsigned_SS_char_Sg__cls_methods, swig_ofPixels__Sl_unsigned_SS_char_Sg__cls_attributes, swig_ofPixels__Sl_unsigned_SS_char_Sg__cls_constants }, swig_ofPixels__Sl_unsigned_SS_char_Sg__bases, swig_ofPixels__Sl_unsigned_SS_char_Sg__base_names };

static int _wrap_new_Path(lua_State* L) { int SWIG_arg = 0; ofPath *result = 0 ; SWIG_check_num_args("ofPath::ofPath",0,0)
  result = (ofPath *)new ofPath(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPath,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_clear(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::clear",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_clear",1,SWIGTYPE_p_ofPath); } 
  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_newSubPath(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::newSubPath",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::newSubPath",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_newSubPath",1,SWIGTYPE_p_ofPath); }  (arg1)->newSubPath(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_close(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::close",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::close",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_close",1,SWIGTYPE_p_ofPath); } 
  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_lineTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofPath::lineTo",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::lineTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::lineTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_lineTo",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Path_lineTo",2,SWIGTYPE_p_ofVec3f); }
   (arg1)->lineTo((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_lineTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofPath::lineTo",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::lineTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::lineTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::lineTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_lineTo",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->lineTo(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_lineTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofPath::lineTo",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::lineTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::lineTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::lineTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::lineTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_lineTo",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->lineTo(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_lineTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Path_lineTo__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Path_lineTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Path_lineTo__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_lineTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::lineTo(ofPoint const &)\n" "    ofPath::lineTo(float,float)\n" "    ofPath::lineTo(float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_Path_moveTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofPath::moveTo",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::moveTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::moveTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_moveTo",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Path_moveTo",2,SWIGTYPE_p_ofVec3f); }
   (arg1)->moveTo((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_moveTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofPath::moveTo",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::moveTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::moveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::moveTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::moveTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_moveTo",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->moveTo(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_moveTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofPath::moveTo",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::moveTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::moveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::moveTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_moveTo",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->moveTo(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_moveTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Path_moveTo__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Path_moveTo__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Path_moveTo__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_moveTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::moveTo(ofPoint const &)\n" "    ofPath::moveTo(float,float,float)\n" "    ofPath::moveTo(float,float)\n");
  lua_error(L);return 0; }
static int _wrap_Path_curveTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofPath::curveTo",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::curveTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::curveTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_curveTo",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Path_curveTo",2,SWIGTYPE_p_ofVec3f); }
   (arg1)->curveTo((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_curveTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofPath::curveTo",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::curveTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::curveTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_curveTo",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->curveTo(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_curveTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofPath::curveTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::curveTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::curveTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::curveTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_curveTo",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->curveTo(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_curveTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Path_curveTo__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Path_curveTo__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Path_curveTo__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_curveTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::curveTo(ofPoint const &)\n" "    ofPath::curveTo(float,float)\n" "    ofPath::curveTo(float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_Path_bezierTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPath::bezierTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::bezierTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::bezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPath::bezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPath::bezierTo",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_bezierTo",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_bezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_bezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_bezierTo",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->bezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_bezierTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::bezierTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::bezierTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::bezierTo",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_bezierTo",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_bezierTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPath::bezierTo",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::bezierTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::bezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::bezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPath::bezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPath::bezierTo",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_bezierTo",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_bezierTo(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Path_bezierTo__SWIG_0(L);}  }  }  }  }  if (argc == 7) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Path_bezierTo__SWIG_1(L);}  }  }  }  }  }  }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_Path_bezierTo__SWIG_2(L);}  }  }  }  }  }  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_bezierTo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::bezierTo(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofPath::bezierTo(float,float,float,float,float,float)\n"
  "    ofPath::bezierTo(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Path_quadBezierTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPath::quadBezierTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::quadBezierTo",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::quadBezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPath::quadBezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPath::quadBezierTo",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_quadBezierTo",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_quadBezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_quadBezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_quadBezierTo",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->quadBezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_quadBezierTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::quadBezierTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::quadBezierTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::quadBezierTo",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_quadBezierTo",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_quadBezierTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPath::quadBezierTo",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::quadBezierTo",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::quadBezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::quadBezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPath::quadBezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPath::quadBezierTo",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_quadBezierTo",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_quadBezierTo(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Path_quadBezierTo__SWIG_0(L);}  }  }  }  }  if (argc == 7) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Path_quadBezierTo__SWIG_1(L);}  }  }  }  }  }  }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_Path_quadBezierTo__SWIG_2(L);}  }  }  }  }  }  }
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_quadBezierTo'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::quadBezierTo(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofPath::quadBezierTo(float,float,float,float,float,float)\n"
  "    ofPath::quadBezierTo(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Path_arc__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; bool arg7 ; SWIG_check_num_args("ofPath::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arc",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arc",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arc",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arc",6,"float");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ofPath::arc",7,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_arc",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Path_arc",2,SWIGTYPE_p_ofVec3f); } 
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (lua_toboolean(L, 7)!=0);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_arc__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::arc",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arc",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arc",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arc",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arc",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_arc",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Path_arc",2,SWIGTYPE_p_ofVec3f); } 
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_arc__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arc",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::arc",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arc",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arc",6,"float"); if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::arc",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_arc",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_arc__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofPath::arc",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arc",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::arc",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arc",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arc",6,"float"); if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::arc",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::arc",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_arc",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_arc(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L); if (argc == 6) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_Path_arc__SWIG_1(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isboolean(L,argv[6]); }  if (_v) { return _wrap_Path_arc__SWIG_0(L);}  }  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Path_arc__SWIG_2(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Path_arc__SWIG_3(L);}  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_arc'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::arc(ofPoint const &,float,float,float,float,bool)\n" "    ofPath::arc(ofPoint const &,float,float,float,float)\n"
  "    ofPath::arc(float,float,float,float,float,float)\n" "    ofPath::arc(float,float,float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_Path_arcNegative__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::arcNegative",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arcNegative",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::arcNegative",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arcNegative",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_arcNegative",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_arcNegative",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  (arg1)->arcNegative((ofPoint const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_arcNegative__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::arcNegative",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arcNegative",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::arcNegative",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_arcNegative",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_arcNegative__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofPath::arcNegative",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::arcNegative",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::arcNegative",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::arcNegative",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_arcNegative",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_arcNegative(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_Path_arcNegative__SWIG_0(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Path_arcNegative__SWIG_1(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Path_arcNegative__SWIG_2(L);}  }  }  }  }  }  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_arcNegative'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::arcNegative(ofPoint const &,float,float,float,float)\n"
  "    ofPath::arcNegative(float,float,float,float,float,float)\n"
  "    ofPath::arcNegative(float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Path_triangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPath::triangle",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::triangle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::triangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::triangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::triangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::triangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::triangle",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::triangle",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_triangle",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  (arg1)->triangle(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_triangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPath::triangle",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::triangle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::triangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::triangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::triangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::triangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::triangle",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::triangle",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::triangle",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPath::triangle",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPath::triangle",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_triangle",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->triangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_triangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPath::triangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::triangle",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::triangle",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPath::triangle",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPath::triangle",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_triangle",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_triangle",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_triangle",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_triangle",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->triangle((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_triangle(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Path_triangle__SWIG_2(L);}  }  }  }  }  if (argc == 7) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Path_triangle__SWIG_0(L);}  }  }  }  }  }  }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_Path_triangle__SWIG_1(L);}  }  }  }  }  }  }  }
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_triangle'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::triangle(float,float,float,float,float,float)\n"
  "    ofPath::triangle(float,float,float,float,float,float,float,float,float)\n"
  "    ofPath::triangle(ofPoint const &,ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_Path_circle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofPath::circle",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::circle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::circle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::circle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::circle",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_circle",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->circle(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_circle__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofPath::circle",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::circle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::circle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::circle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::circle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::circle",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_circle",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->circle(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_circle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; SWIG_check_num_args("ofPath::circle",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::circle",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::circle",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::circle",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_circle",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Path_circle",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); (arg1)->circle((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_circle(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Path_circle__SWIG_2(L);}  }  }
     }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Path_circle__SWIG_0(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Path_circle__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_circle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::circle(float,float,float)\n" "    ofPath::circle(float,float,float,float)\n"
  "    ofPath::circle(ofPoint const &,float)\n"); lua_error(L);return 0; }
static int _wrap_Path_ellipse__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofPath::ellipse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::ellipse",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::ellipse",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::ellipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::ellipse",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::ellipse",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_ellipse",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->ellipse(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_ellipse__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::ellipse",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::ellipse",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::ellipse",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::ellipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::ellipse",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::ellipse",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::ellipse",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_ellipse",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); (arg1)->ellipse(arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_ellipse__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPath::ellipse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::ellipse",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::ellipse",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::ellipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::ellipse",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_ellipse",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Path_ellipse",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->ellipse((ofPoint const &)*arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_ellipse(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Path_ellipse__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Path_ellipse__SWIG_0(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_Path_ellipse__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_ellipse'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::ellipse(float,float,float,float)\n" "    ofPath::ellipse(float,float,float,float,float)\n"
  "    ofPath::ellipse(ofPoint const &,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Path_rectangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofRectangle *arg2 = 0 ;
  SWIG_check_num_args("ofPath::rectangle",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectangle",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectangle",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_rectangle",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Path_rectangle",2,SWIGTYPE_p_ofRectangle); }  (arg1)->rectangle((ofRectangle const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_rectangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPath::rectangle",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectangle",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectangle",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectangle",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_rectangle",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_rectangle",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->rectangle((ofPoint const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_rectangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofPath::rectangle",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectangle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectangle",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_rectangle",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->rectangle(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_rectangle__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::rectangle",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectangle",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rectangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectangle",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_rectangle",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); (arg1)->rectangle(arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_rectangle(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Path_rectangle__SWIG_0(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Path_rectangle__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Path_rectangle__SWIG_2(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_Path_rectangle__SWIG_3(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_rectangle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::rectangle(ofRectangle const &)\n" "    ofPath::rectangle(ofPoint const &,float,float)\n"
  "    ofPath::rectangle(float,float,float,float)\n" "    ofPath::rectangle(float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_Path_rectRounded__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  ofRectangle *arg2 = 0 ; float arg3 ; SWIG_check_num_args("ofPath::rectRounded",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_rectRounded",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Path_rectRounded",2,SWIGTYPE_p_ofRectangle); }  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->rectRounded((ofRectangle const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_rectRounded__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofPath::rectRounded",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_rectRounded",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_rectRounded",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->rectRounded((ofPoint const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_rectRounded__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::rectRounded",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectRounded",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_rectRounded",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); (arg1)->rectRounded(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_rectRounded__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofPath::rectRounded",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::rectRounded",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::rectRounded",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_rectRounded",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_rectRounded",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->rectRounded((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_rectRounded__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  ofRectangle *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPath::rectRounded",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"ofRectangle const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectRounded",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_rectRounded",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Path_rectRounded",2,SWIGTYPE_p_ofRectangle); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  (arg1)->rectRounded((ofRectangle const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_rectRounded__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPath::rectRounded",10,10) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rectRounded",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::rectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPath::rectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPath::rectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPath::rectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPath::rectRounded",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPath::rectRounded",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPath::rectRounded",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPath::rectRounded",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_rectRounded",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->rectRounded(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_rectRounded(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Path_rectRounded__SWIG_0(L);}
         }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Path_rectRounded__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_Path_rectRounded__SWIG_4(L);}  }  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_Path_rectRounded__SWIG_2(L);}  }  }  }  }  }  } 
  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_Path_rectRounded__SWIG_3(L);}  }  }  }  }  }  }  }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_Path_rectRounded__SWIG_5(L);}  }  }  }  }  }  }
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_rectRounded'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPath::rectRounded(ofRectangle const &,float)\n"
  "    ofPath::rectRounded(ofPoint const &,float,float,float)\n" "    ofPath::rectRounded(float,float,float,float,float)\n"
  "    ofPath::rectRounded(ofPoint const &,float,float,float,float,float,float)\n"
  "    ofPath::rectRounded(ofRectangle const &,float,float,float,float)\n"
  "    ofPath::rectRounded(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Path_setPolyWindingMode(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  ofPolyWindingMode arg2 ; SWIG_check_num_args("ofPath::setPolyWindingMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setPolyWindingMode",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setPolyWindingMode",2,"ofPolyWindingMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setPolyWindingMode",1,SWIGTYPE_p_ofPath); }  arg2 = (ofPolyWindingMode)(int)lua_tonumber(L, 2);
  (arg1)->setPolyWindingMode(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setFilled(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofPath::setFilled",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setFilled",1,"ofPath *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPath::setFilled",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_setFilled",1,SWIGTYPE_p_ofPath); }
   arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setFilled(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_setStrokeWidth(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  SWIG_check_num_args("ofPath::setStrokeWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setStrokeWidth",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setStrokeWidth",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setStrokeWidth",1,SWIGTYPE_p_ofPath); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setStrokeWidth(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor *arg2 = 0 ;
  SWIG_check_num_args("ofPath::setColor",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setColor",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::setColor",2,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_setColor",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Path_setColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  (arg1)->setColor((ofColor const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setHexColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setHexColor",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setHexColor",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setHexColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setHexColor",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->setHexColor(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setFillColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor *arg2 = 0 ;
  SWIG_check_num_args("ofPath::setFillColor",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setFillColor",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::setFillColor",2,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setFillColor",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Path_setFillColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  (arg1)->setFillColor((ofColor const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setFillHexColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setFillHexColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setFillHexColor",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setFillHexColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setFillHexColor",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->setFillHexColor(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setStrokeColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor *arg2 = 0 ;
  SWIG_check_num_args("ofPath::setStrokeColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setStrokeColor",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::setStrokeColor",2,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setStrokeColor",1,SWIGTYPE_p_ofPath); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Path_setStrokeColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setStrokeColor((ofColor const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setStrokeHexColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setStrokeHexColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setStrokeHexColor",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setStrokeHexColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setStrokeHexColor",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setStrokeHexColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_getWindingMode(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPolyWindingMode result;
  SWIG_check_num_args("ofPath::getWindingMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getWindingMode",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getWindingMode",1,SWIGTYPE_p_ofPath); } 
  result = (ofPolyWindingMode)((ofPath const *)arg1)->getWindingMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_isFilled(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool result;
  SWIG_check_num_args("ofPath::isFilled",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::isFilled",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_isFilled",1,SWIGTYPE_p_ofPath); }
   result = (bool)((ofPath const *)arg1)->isFilled(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_getFillColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor result;
  SWIG_check_num_args("ofPath::getFillColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getFillColor",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getFillColor",1,SWIGTYPE_p_ofPath); }  result = ((ofPath const *)arg1)->getFillColor(); {
    ofColor * resultptr = new ofColor((const ofColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_getStrokeColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofColor result;
  SWIG_check_num_args("ofPath::getStrokeColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getStrokeColor",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getStrokeColor",1,SWIGTYPE_p_ofPath); }  result = ((ofPath const *)arg1)->getStrokeColor(); {
    ofColor * resultptr = new ofColor((const ofColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_getStrokeWidth(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float result;
  SWIG_check_num_args("ofPath::getStrokeWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getStrokeWidth",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getStrokeWidth",1,SWIGTYPE_p_ofPath); }  result = (float)((ofPath const *)arg1)->getStrokeWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_hasOutline(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool result;
  SWIG_check_num_args("ofPath::hasOutline",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::hasOutline",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_hasOutline",1,SWIGTYPE_p_ofPath); }  result = (bool)((ofPath const *)arg1)->hasOutline();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofPath::draw",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::draw",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_draw",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::draw",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_draw",1,SWIGTYPE_p_ofPath); } 
  (arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_draw(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Path_draw__SWIG_1(L);}  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Path_draw__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::draw(float,float)\n" "    ofPath::draw()\n"); lua_error(L);return 0; }
static int _wrap_Path_getOutline(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  std::vector< ofPolyline > *result = 0 ; SWIG_check_num_args("ofPath::getOutline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getOutline",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getOutline",1,SWIGTYPE_p_ofPath); }  result = (std::vector< ofPolyline > *) &(arg1)->getOutline();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofPolyline_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_getTessellation(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofMesh *result = 0 ;
  SWIG_check_num_args("ofPath::getTessellation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getTessellation",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getTessellation",1,SWIGTYPE_p_ofPath); }  result = (ofMesh *) &(arg1)->getTessellation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_simplify__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ;
  SWIG_check_num_args("ofPath::simplify",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::simplify",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::simplify",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_simplify",1,SWIGTYPE_p_ofPath); }
   arg2 = (float)lua_tonumber(L, 2); (arg1)->simplify(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_simplify__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::simplify",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::simplify",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_simplify",1,SWIGTYPE_p_ofPath); }
   (arg1)->simplify(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_simplify(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Path_simplify__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Path_simplify__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_simplify'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::simplify(float)\n" "    ofPath::simplify()\n"); lua_error(L);return 0; }
static int _wrap_Path_flagShapeChanged(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::flagShapeChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::flagShapeChanged",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_flagShapeChanged",1,SWIGTYPE_p_ofPath); }  (arg1)->flagShapeChanged(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_hasChanged(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool result;
  SWIG_check_num_args("ofPath::hasChanged",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::hasChanged",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_hasChanged",1,SWIGTYPE_p_ofPath); }  result = (bool)(arg1)->hasChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setMode(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPath::Mode arg2 ;
  SWIG_check_num_args("ofPath::setMode",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setMode",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setMode",2,"ofPath::Mode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_setMode",1,SWIGTYPE_p_ofPath); } 
  arg2 = (ofPath::Mode)(int)lua_tonumber(L, 2); (arg1)->setMode(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Path_getMode(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPath::Mode result;
  SWIG_check_num_args("ofPath::getMode",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getMode",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_getMode",1,SWIGTYPE_p_ofPath); } 
  result = (ofPath::Mode)(arg1)->getMode(); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setCurveResolution(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setCurveResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setCurveResolution",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setCurveResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setCurveResolution",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCurveResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setCircleResolution(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setCircleResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setCircleResolution",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setCircleResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setCircleResolution",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setCircleResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_getCircleResolution(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int result;
  SWIG_check_num_args("ofPath::getCircleResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getCircleResolution",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getCircleResolution",1,SWIGTYPE_p_ofPath); } 
  result = (int)((ofPath const *)arg1)->getCircleResolution(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setArcResolution(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int arg2 ;
  SWIG_check_num_args("ofPath::setArcResolution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setArcResolution",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::setArcResolution",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setArcResolution",1,SWIGTYPE_p_ofPath); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setArcResolution(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_getArcResolution(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; int result;
  SWIG_check_num_args("ofPath::getArcResolution",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getArcResolution",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getArcResolution",1,SWIGTYPE_p_ofPath); }  result = (int)((ofPath const *)arg1)->getArcResolution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_setUseShapeColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofPath::setUseShapeColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::setUseShapeColor",1,"ofPath *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPath::setUseShapeColor",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_setUseShapeColor",1,SWIGTYPE_p_ofPath); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseShapeColor(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_getUseShapeColor(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; bool result;
  SWIG_check_num_args("ofPath::getUseShapeColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getUseShapeColor",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getUseShapeColor",1,SWIGTYPE_p_ofPath); }  result = (bool)((ofPath const *)arg1)->getUseShapeColor();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_tessellate(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  SWIG_check_num_args("ofPath::tessellate",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::tessellate",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_tessellate",1,SWIGTYPE_p_ofPath); }  (arg1)->tessellate(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_translate(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofPath::translate",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::translate",1,"ofPath *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPath::translate",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_translate",1,SWIGTYPE_p_ofPath); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_translate",2,SWIGTYPE_p_ofVec3f); }  (arg1)->translate((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_rotate(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; ofVec3f *arg3 = 0 ;
  SWIG_check_num_args("ofPath::rotate",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::rotate",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPath::rotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_rotate",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Path_rotate",3,SWIGTYPE_p_ofVec3f); }  (arg1)->rotate(arg2,(ofVec3f const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_scale(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofPath::scale",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::scale",1,"ofPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPath::scale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPath::scale",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){ SWIG_fail_ptr("Path_scale",1,SWIGTYPE_p_ofPath); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->scale(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Path_getCommands__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  std::vector< ofPath::Command > *result = 0 ; SWIG_check_num_args("ofPath::getCommands",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getCommands",1,"ofPath *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getCommands",1,SWIGTYPE_p_ofPath); } 
  result = (std::vector< ofPath::Command > *) &(arg1)->getCommands();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofPath__Command_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_getCommands__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPath *arg1 = (ofPath *) 0 ;
  std::vector< ofPath::Command > *result = 0 ; SWIG_check_num_args("ofPath::getCommands",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPath::getCommands",1,"ofPath const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPath,0))){
    SWIG_fail_ptr("Path_getCommands",1,SWIGTYPE_p_ofPath); } 
  result = (std::vector< ofPath::Command > *) &((ofPath const *)arg1)->getCommands();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofPath__Command_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Path_getCommands(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Path_getCommands__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPath, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Path_getCommands__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Path_getCommands'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPath::getCommands()\n" "    ofPath::getCommands() const\n"); lua_error(L);return 0; }
static void swig_delete_Path(void *obj) {
ofPath *arg1 = (ofPath *) obj;
delete arg1;
}
static swig_lua_method swig_ofPath_methods[] = {
    {"clear", _wrap_Path_clear}, 
    {"newSubPath", _wrap_Path_newSubPath}, 
    {"close", _wrap_Path_close}, 
    {"lineTo", _wrap_Path_lineTo}, 
    {"moveTo", _wrap_Path_moveTo}, 
    {"curveTo", _wrap_Path_curveTo}, 
    {"bezierTo", _wrap_Path_bezierTo}, 
    {"quadBezierTo", _wrap_Path_quadBezierTo}, 
    {"arc", _wrap_Path_arc}, 
    {"arcNegative", _wrap_Path_arcNegative}, 
    {"triangle", _wrap_Path_triangle}, 
    {"circle", _wrap_Path_circle}, 
    {"ellipse", _wrap_Path_ellipse}, 
    {"rectangle", _wrap_Path_rectangle}, 
    {"rectRounded", _wrap_Path_rectRounded}, 
    {"setPolyWindingMode", _wrap_Path_setPolyWindingMode}, 
    {"setFilled", _wrap_Path_setFilled}, 
    {"setStrokeWidth", _wrap_Path_setStrokeWidth}, 
    {"setColor", _wrap_Path_setColor}, 
    {"setHexColor", _wrap_Path_setHexColor}, 
    {"setFillColor", _wrap_Path_setFillColor}, 
    {"setFillHexColor", _wrap_Path_setFillHexColor}, 
    {"setStrokeColor", _wrap_Path_setStrokeColor}, 
    {"setStrokeHexColor", _wrap_Path_setStrokeHexColor}, 
    {"getWindingMode", _wrap_Path_getWindingMode}, 
    {"isFilled", _wrap_Path_isFilled}, 
    {"getFillColor", _wrap_Path_getFillColor}, 
    {"getStrokeColor", _wrap_Path_getStrokeColor}, 
    {"getStrokeWidth", _wrap_Path_getStrokeWidth}, 
    {"hasOutline", _wrap_Path_hasOutline}, 
    {"draw", _wrap_Path_draw}, 
    {"getOutline", _wrap_Path_getOutline}, 
    {"getTessellation", _wrap_Path_getTessellation}, 
    {"simplify", _wrap_Path_simplify}, 
    {"flagShapeChanged", _wrap_Path_flagShapeChanged}, 
    {"hasChanged", _wrap_Path_hasChanged}, 
    {"setMode", _wrap_Path_setMode}, 
    {"getMode", _wrap_Path_getMode}, 
    {"setCurveResolution", _wrap_Path_setCurveResolution}, 
    {"setCircleResolution", _wrap_Path_setCircleResolution}, 
    {"getCircleResolution", _wrap_Path_getCircleResolution}, 
    {"setArcResolution", _wrap_Path_setArcResolution}, 
    {"getArcResolution", _wrap_Path_getArcResolution}, 
    {"setUseShapeColor", _wrap_Path_setUseShapeColor}, 
    {"getUseShapeColor", _wrap_Path_getUseShapeColor}, 
    {"tessellate", _wrap_Path_tessellate}, 
    {"translate", _wrap_Path_translate}, 
    {"rotate", _wrap_Path_rotate}, 
    {"scale", _wrap_Path_scale}, 
    {"getCommands", _wrap_Path_getCommands}, 
    {0,0}
};
static swig_lua_attribute swig_ofPath_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofPath_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofPath_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofPath_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("COMMANDS", ofPath::COMMANDS)},
    {SWIG_LUA_CONSTTAB_INT("POLYLINES", ofPath::POLYLINES)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofPath_bases[] = {0};
static const char *swig_ofPath_base_names[] = {0};
static swig_lua_class _wrap_class_ofPath = { "Path", &SWIGTYPE_p_ofPath,_wrap_new_Path, swig_delete_Path, swig_ofPath_methods, swig_ofPath_attributes, { "Path", swig_ofPath_cls_methods, swig_ofPath_cls_attributes, swig_ofPath_cls_constants }, swig_ofPath_bases, swig_ofPath_base_names };

static int _wrap_new_Polyline__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *result = 0 ;
  SWIG_check_num_args("ofPolyline::ofPolyline",0,0) result = (ofPolyline *)new ofPolyline();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPolyline,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Polyline__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::vector< ofPoint > *arg1 = 0 ;
  ofPolyline *result = 0 ; SWIG_check_num_args("ofPolyline::ofPolyline",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPolyline::ofPolyline",1,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("new_Polyline",1,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  result = (ofPolyline *)new ofPolyline((std::vector< ofPoint > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPolyline,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Polyline(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Polyline__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Polyline__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Polyline'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::ofPolyline()\n" "    ofPolyline::ofPolyline(std::vector< ofPoint > const &)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_fromRectangle(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; ofPolyline result;
  SWIG_check_num_args("ofPolyline::fromRectangle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPolyline::fromRectangle",1,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Polyline_fromRectangle",1,SWIGTYPE_p_ofRectangle); } 
  result = ofPolyline::fromRectangle((ofRectangle const &)*arg1); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_clear(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::clear",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_clear",1,SWIGTYPE_p_ofPolyline); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_addVertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofPolyline::addVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertex",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::addVertex",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_addVertex",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_addVertex",2,SWIGTYPE_p_ofVec3f); }  (arg1)->addVertex((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_addVertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPolyline::addVertex",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertex",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::addVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::addVertex",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::addVertex",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_addVertex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->addVertex(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_addVertex__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofPolyline::addVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertex",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::addVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::addVertex",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_addVertex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->addVertex(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_addVertex(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Polyline_addVertex__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Polyline_addVertex__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Polyline_addVertex__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_addVertex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::addVertex(ofPoint const &)\n" "    ofPolyline::addVertex(float,float,float)\n"
  "    ofPolyline::addVertex(float,float)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_addVertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  std::vector< ofPoint > *arg2 = 0 ; SWIG_check_num_args("ofPolyline::addVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertices",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::addVertices",2,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_addVertices",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("Polyline_addVertices",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  (arg1)->addVertices((std::vector< ofPoint > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_addVertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ; int arg3 ; SWIG_check_num_args("ofPolyline::addVertices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::addVertices",1,"ofPolyline *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofPolyline::addVertices",2,"ofPoint const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::addVertices",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_addVertices",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_addVertices",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addVertices((ofPoint const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_addVertices(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Polyline_addVertices__SWIG_0(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Polyline_addVertices__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_addVertices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::addVertices(std::vector< ofPoint > const &)\n"
  "    ofPolyline::addVertices(ofPoint const *,int)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_lineTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofPolyline::lineTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::lineTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::lineTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_lineTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_lineTo",2,SWIGTYPE_p_ofVec3f); }  (arg1)->lineTo((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_lineTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPolyline::lineTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::lineTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::lineTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::lineTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::lineTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_lineTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->lineTo(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_lineTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofPolyline::lineTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::lineTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::lineTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::lineTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_lineTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->lineTo(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_lineTo(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Polyline_lineTo__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Polyline_lineTo__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Polyline_lineTo__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_lineTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::lineTo(ofPoint const &)\n" "    ofPolyline::lineTo(float,float,float)\n"
  "    ofPolyline::lineTo(float,float)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_insertVertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofPolyline::insertVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::insertVertex",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::insertVertex",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::insertVertex",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_insertVertex",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_insertVertex",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->insertVertex((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_insertVertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; int arg5 ; SWIG_check_num_args("ofPolyline::insertVertex",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::insertVertex",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::insertVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::insertVertex",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::insertVertex",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::insertVertex",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_insertVertex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->insertVertex(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_insertVertex(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Polyline_insertVertex__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Polyline_insertVertex__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_insertVertex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::insertVertex(ofPoint const &,int)\n"
  "    ofPolyline::insertVertex(float,float,float,int)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_arc__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; bool arg7 ; int arg8 ;
  SWIG_check_num_args("ofPolyline::arc",8,8) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"bool");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arc",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arc",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Polyline_arc",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (lua_toboolean(L, 7)!=0); arg8 = (int)lua_tonumber(L, 8);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_arc__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; bool arg7 ; SWIG_check_num_args("ofPolyline::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arc",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Polyline_arc",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (lua_toboolean(L, 7)!=0);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_arc__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; int arg7 ; SWIG_check_num_args("ofPolyline::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arc",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Polyline_arc",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (int)lua_tonumber(L, 7);
  (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_arc__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPolyline::arc",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arc",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Polyline_arc",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); (arg1)->arc((ofPoint const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_arc__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; int arg8 ; SWIG_check_num_args("ofPolyline::arc",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arc",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arc",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_arc__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPolyline::arc",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arc",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_arc__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; int arg9 ;
  SWIG_check_num_args("ofPolyline::arc",9,9) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arc",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::arc",9,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arc",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9); (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_arc__SWIG_7(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofPolyline::arc",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arc",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arc",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arc",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arc",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arc",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arc",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arc",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arc",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arc",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->arc(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_arc(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_Polyline_arc__SWIG_3(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isboolean(L,argv[6]); }  if (_v) { return _wrap_Polyline_arc__SWIG_1(L);}  }  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { return _wrap_Polyline_arc__SWIG_2(L);}  }  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Polyline_arc__SWIG_5(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isboolean(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_Polyline_arc__SWIG_0(L);}  }  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Polyline_arc__SWIG_4(L);}  }  }  }  }  }  }  }  } 
  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Polyline_arc__SWIG_7(L);}  }  }  }  }  }  }  }  } 
  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_Polyline_arc__SWIG_6(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_arc'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::arc(ofPoint const &,float,float,float,float,bool,int)\n"
  "    ofPolyline::arc(ofPoint const &,float,float,float,float,bool)\n"
  "    ofPolyline::arc(ofPoint const &,float,float,float,float,int)\n"
  "    ofPolyline::arc(ofPoint const &,float,float,float,float)\n"
  "    ofPolyline::arc(float,float,float,float,float,float,int)\n" "    ofPolyline::arc(float,float,float,float,float,float)\n"
  "    ofPolyline::arc(float,float,float,float,float,float,float,int)\n"
  "    ofPolyline::arc(float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_arcNegative__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; int arg7 ;
  SWIG_check_num_args("ofPolyline::arcNegative",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arcNegative",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arcNegative",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_arcNegative",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7); (arg1)->arcNegative((ofPoint const &)*arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_arcNegative__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofPolyline::arcNegative",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arcNegative",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_arcNegative",2,SWIGTYPE_p_ofVec3f); }  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  (arg1)->arcNegative((ofPoint const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_arcNegative__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; int arg8 ;
  SWIG_check_num_args("ofPolyline::arcNegative",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arcNegative",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arcNegative",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arcNegative",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_arcNegative__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ;
  SWIG_check_num_args("ofPolyline::arcNegative",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arcNegative",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arcNegative",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_arcNegative__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; int arg9 ;
  SWIG_check_num_args("ofPolyline::arcNegative",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arcNegative",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arcNegative",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::arcNegative",9,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arcNegative",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (int)lua_tonumber(L, 9); (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_arcNegative__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ;
  SWIG_check_num_args("ofPolyline::arcNegative",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::arcNegative",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::arcNegative",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::arcNegative",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::arcNegative",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::arcNegative",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::arcNegative",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::arcNegative",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::arcNegative",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_arcNegative",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->arcNegative(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_arcNegative(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_Polyline_arcNegative__SWIG_1(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { return _wrap_Polyline_arcNegative__SWIG_0(L);}  }  }  }  }  }  }  }
   if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Polyline_arcNegative__SWIG_3(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Polyline_arcNegative__SWIG_2(L);}  }  }  }  }  }  }
       }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Polyline_arcNegative__SWIG_5(L);}  }  }  }  }  }  }
       }  }  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_Polyline_arcNegative__SWIG_4(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_arcNegative'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::arcNegative(ofPoint const &,float,float,float,float,int)\n"
  "    ofPolyline::arcNegative(ofPoint const &,float,float,float,float)\n"
  "    ofPolyline::arcNegative(float,float,float,float,float,float,int)\n"
  "    ofPolyline::arcNegative(float,float,float,float,float,float)\n"
  "    ofPolyline::arcNegative(float,float,float,float,float,float,float,int)\n"
  "    ofPolyline::arcNegative(float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_curveTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofPolyline::curveTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"ofPoint const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::curveTo",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_curveTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_curveTo",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->curveTo((ofPoint const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_curveTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("ofPolyline::curveTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_curveTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_curveTo",2,SWIGTYPE_p_ofVec3f); }  (arg1)->curveTo((ofPoint const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_curveTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; int arg5 ; SWIG_check_num_args("ofPolyline::curveTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::curveTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::curveTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::curveTo",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_curveTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->curveTo(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_curveTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofPolyline::curveTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::curveTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::curveTo",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_curveTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->curveTo(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_curveTo__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofPolyline::curveTo",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::curveTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::curveTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::curveTo",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_curveTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->curveTo(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_curveTo(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Polyline_curveTo__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Polyline_curveTo__SWIG_0(L);}
         }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Polyline_curveTo__SWIG_4(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Polyline_curveTo__SWIG_3(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Polyline_curveTo__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_curveTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::curveTo(ofPoint const &,int)\n" "    ofPolyline::curveTo(ofPoint const &)\n"
  "    ofPolyline::curveTo(float,float,float,int)\n" "    ofPolyline::curveTo(float,float,float)\n"
  "    ofPolyline::curveTo(float,float)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_bezierTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; int arg5 ; SWIG_check_num_args("ofPolyline::bezierTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"ofPoint const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_bezierTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_bezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_bezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_bezierTo",4,SWIGTYPE_p_ofVec3f); }  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->bezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_bezierTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPolyline::bezierTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_bezierTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_bezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_bezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_bezierTo",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->bezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_bezierTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; int arg8 ; SWIG_check_num_args("ofPolyline::bezierTo",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::bezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::bezierTo",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_bezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_bezierTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofPolyline::bezierTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::bezierTo",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_bezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_bezierTo__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; int arg11 ;
  SWIG_check_num_args("ofPolyline::bezierTo",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::bezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::bezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::bezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPolyline::bezierTo",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofPolyline::bezierTo",11,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_bezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10); arg11 = (int)lua_tonumber(L, 11);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_bezierTo__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPolyline::bezierTo",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::bezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::bezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::bezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::bezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::bezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::bezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::bezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::bezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::bezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPolyline::bezierTo",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_bezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_bezierTo(lua_State* L) { int argc; int argv[12]={ 1,2,3,4,5,6,7,8,9,10,11,12} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Polyline_bezierTo__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Polyline_bezierTo__SWIG_0(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Polyline_bezierTo__SWIG_3(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Polyline_bezierTo__SWIG_2(L);}  }  }  }  }  }  }  }
     }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_Polyline_bezierTo__SWIG_5(L);}  }  }  }  }  }  }
           }  }  }  }  if (argc == 11) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) {
                          return _wrap_Polyline_bezierTo__SWIG_4(L);}  }  }  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_bezierTo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::bezierTo(ofPoint const &,ofPoint const &,ofPoint const &,int)\n"
  "    ofPolyline::bezierTo(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofPolyline::bezierTo(float,float,float,float,float,float,int)\n"
  "    ofPolyline::bezierTo(float,float,float,float,float,float)\n"
  "    ofPolyline::bezierTo(float,float,float,float,float,float,float,float,float,int)\n"
  "    ofPolyline::bezierTo(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_quadBezierTo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  int arg11 ; SWIG_check_num_args("ofPolyline::quadBezierTo",11,11)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::quadBezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::quadBezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::quadBezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPolyline::quadBezierTo",10,"float");
  if(!lua_isnumber(L,11)) SWIG_fail_arg("ofPolyline::quadBezierTo",11,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10); arg11 = (int)lua_tonumber(L, 11);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_quadBezierTo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofPolyline::quadBezierTo",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::quadBezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::quadBezierTo",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofPolyline::quadBezierTo",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofPolyline::quadBezierTo",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_quadBezierTo__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; int arg5 ; SWIG_check_num_args("ofPolyline::quadBezierTo",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"ofPoint const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",4,SWIGTYPE_p_ofVec3f); }  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->quadBezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_quadBezierTo__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; SWIG_check_num_args("ofPolyline::quadBezierTo",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->quadBezierTo((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_quadBezierTo__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; int arg8 ;
  SWIG_check_num_args("ofPolyline::quadBezierTo",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::quadBezierTo",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofPolyline::quadBezierTo",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Polyline_quadBezierTo__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ;
  SWIG_check_num_args("ofPolyline::quadBezierTo",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::quadBezierTo",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::quadBezierTo",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::quadBezierTo",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofPolyline::quadBezierTo",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofPolyline::quadBezierTo",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofPolyline::quadBezierTo",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofPolyline::quadBezierTo",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_quadBezierTo",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->quadBezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_quadBezierTo(lua_State* L) { int argc; int argv[12]={ 1,2,3,4,5,6,7,8,9,10,11,12} ;
  argc = lua_gettop(L); if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Polyline_quadBezierTo__SWIG_3(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Polyline_quadBezierTo__SWIG_2(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Polyline_quadBezierTo__SWIG_5(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Polyline_quadBezierTo__SWIG_4(L);}  }  }  }  }  }  }
       }  }  if (argc == 10) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_Polyline_quadBezierTo__SWIG_1(L);}  }  }  }  }  }
             }  }  }  }  }  if (argc == 11) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) {
                          return _wrap_Polyline_quadBezierTo__SWIG_0(L);}  }  }  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_quadBezierTo'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::quadBezierTo(float,float,float,float,float,float,float,float,float,int)\n"
  "    ofPolyline::quadBezierTo(float,float,float,float,float,float,float,float,float)\n"
  "    ofPolyline::quadBezierTo(ofPoint const &,ofPoint const &,ofPoint const &,int)\n"
  "    ofPolyline::quadBezierTo(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofPolyline::quadBezierTo(float,float,float,float,float,float,int)\n"
  "    ofPolyline::quadBezierTo(float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Polyline_getSmoothed__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  float arg3 ; ofPolyline result; SWIG_check_num_args("ofPolyline::getSmoothed",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getSmoothed",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getSmoothed",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::getSmoothed",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getSmoothed",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = ((ofPolyline const *)arg1)->getSmoothed(arg2,arg3); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getSmoothed__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  ofPolyline result; SWIG_check_num_args("ofPolyline::getSmoothed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getSmoothed",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getSmoothed",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getSmoothed",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getSmoothed(arg2); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getSmoothed(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Polyline_getSmoothed__SWIG_1(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Polyline_getSmoothed__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_getSmoothed'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::getSmoothed(int,float) const\n"
  "    ofPolyline::getSmoothed(int) const\n"); lua_error(L);return 0; }
static int _wrap_Polyline_getResampledBySpacing(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofPolyline result; SWIG_check_num_args("ofPolyline::getResampledBySpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getResampledBySpacing",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getResampledBySpacing",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getResampledBySpacing",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getResampledBySpacing(arg2); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getResampledByCount(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  ofPolyline result; SWIG_check_num_args("ofPolyline::getResampledByCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getResampledByCount",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getResampledByCount",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getResampledByCount",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getResampledByCount(arg2); {
    ofPolyline * resultptr = new ofPolyline((const ofPolyline &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPolyline,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getBoundingBox(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofRectangle result; SWIG_check_num_args("ofPolyline::getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getBoundingBox",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getBoundingBox",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->getBoundingBox();
  { ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getClosestPoint__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; unsigned int *arg3 = (unsigned int *) 0 ; ofPoint result;
  SWIG_check_num_args("ofPolyline::getClosestPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getClosestPoint",1,"ofPolyline const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::getClosestPoint",2,"ofPoint const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofPolyline::getClosestPoint",3,"unsigned int *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getClosestPoint",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_getClosestPoint",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_unsigned_int,0))){
    SWIG_fail_ptr("Polyline_getClosestPoint",3,SWIGTYPE_p_unsigned_int); } 
  result = ((ofPolyline const *)arg1)->getClosestPoint((ofPoint const &)*arg2,arg3); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getClosestPoint__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; ofPoint result; SWIG_check_num_args("ofPolyline::getClosestPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getClosestPoint",1,"ofPolyline const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::getClosestPoint",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getClosestPoint",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_getClosestPoint",2,SWIGTYPE_p_ofVec3f); } 
  result = ((ofPolyline const *)arg1)->getClosestPoint((ofPoint const &)*arg2); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getClosestPoint(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Polyline_getClosestPoint__SWIG_1(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_unsigned_int, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Polyline_getClosestPoint__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_getClosestPoint'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::getClosestPoint(ofPoint const &,unsigned int *) const\n"
  "    ofPolyline::getClosestPoint(ofPoint const &) const\n"); lua_error(L);return 0; }
static int _wrap_Polyline_inside__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofPolyline *arg3 = 0 ;
  bool result; SWIG_check_num_args("ofPolyline::inside",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofPolyline::inside",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::inside",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofPolyline::inside",3,"ofPolyline const &"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_inside",3,SWIGTYPE_p_ofPolyline); } 
  result = (bool)ofPolyline::inside(arg1,arg2,(ofPolyline const &)*arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_inside__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPolyline *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofPolyline::inside",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofPolyline::inside",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::inside",2,"ofPolyline const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_inside",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_inside",2,SWIGTYPE_p_ofPolyline); } 
  result = (bool)ofPolyline::inside((ofVec3f const &)*arg1,(ofPolyline const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_inside__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float arg3 ; bool result; SWIG_check_num_args("ofPolyline::inside",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::inside",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::inside",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofPolyline::inside",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_inside",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (bool)((ofPolyline const *)arg1)->inside(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_inside__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofPoint *arg2 = 0 ; bool result; SWIG_check_num_args("ofPolyline::inside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::inside",1,"ofPolyline const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::inside",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_inside",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_inside",2,SWIGTYPE_p_ofVec3f); } 
  result = (bool)((ofPolyline const *)arg1)->inside((ofPoint const &)*arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_inside(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Polyline_inside__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Polyline_inside__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Polyline_inside__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Polyline_inside__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_inside'\n" "  Possible C/C++ prototypes are:\n"
  "    ofPolyline::inside(float,float,ofPolyline const &)\n" "    ofPolyline::inside(ofPoint const &,ofPolyline const &)\n"
  "    ofPolyline::inside(float,float) const\n" "    ofPolyline::inside(ofPoint const &) const\n"); lua_error(L);return 0; }
static int _wrap_Polyline_simplify__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  SWIG_check_num_args("ofPolyline::simplify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::simplify",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::simplify",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_simplify",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->simplify(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_simplify__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::simplify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::simplify",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_simplify",1,SWIGTYPE_p_ofPolyline); }  (arg1)->simplify(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_simplify(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Polyline_simplify__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Polyline_simplify__SWIG_0(L);}  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_simplify'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::simplify(float)\n" "    ofPolyline::simplify()\n");
  lua_error(L);return 0; }
static int _wrap_Polyline_size(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; size_t result;
  SWIG_check_num_args("ofPolyline::size",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::size",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_size",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_resize(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; size_t arg2 ;
  SWIG_check_num_args("ofPolyline::resize",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::resize",1,"ofPolyline *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::resize",2,"size_t");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_resize",1,SWIGTYPE_p_ofPolyline); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_setClosed(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofPolyline::setClosed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::setClosed",1,"ofPolyline *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofPolyline::setClosed",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_setClosed",1,SWIGTYPE_p_ofPolyline); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setClosed(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_isClosed(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; bool result;
  SWIG_check_num_args("ofPolyline::isClosed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::isClosed",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_isClosed",1,SWIGTYPE_p_ofPolyline); }  result = (bool)((ofPolyline const *)arg1)->isClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_close(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::close",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::close",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_close",1,SWIGTYPE_p_ofPolyline); }  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_hasChanged(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; bool result;
  SWIG_check_num_args("ofPolyline::hasChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::hasChanged",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_hasChanged",1,SWIGTYPE_p_ofPolyline); }  result = (bool)(arg1)->hasChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_flagHasChanged(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::flagHasChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::flagHasChanged",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_flagHasChanged",1,SWIGTYPE_p_ofPolyline); }  (arg1)->flagHasChanged(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getVertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  std::vector< ofPoint > *result = 0 ; SWIG_check_num_args("ofPolyline::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getVertices",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getVertices",1,SWIGTYPE_p_ofPolyline); } 
  result = (std::vector< ofPoint > *) &(arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getVertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  std::vector< ofPoint > *result = 0 ; SWIG_check_num_args("ofPolyline::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getVertices",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getVertices",1,SWIGTYPE_p_ofPolyline); } 
  result = (std::vector< ofPoint > *) &((ofPolyline const *)arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getVertices(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Polyline_getVertices__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Polyline_getVertices__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_getVertices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::getVertices()\n" "    ofPolyline::getVertices() const\n");
  lua_error(L);return 0; }
static int _wrap_Polyline_getPerimeter(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float result;
  SWIG_check_num_args("ofPolyline::getPerimeter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getPerimeter",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getPerimeter",1,SWIGTYPE_p_ofPolyline); } 
  result = (float)((ofPolyline const *)arg1)->getPerimeter(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getArea(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float result;
  SWIG_check_num_args("ofPolyline::getArea",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getArea",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getArea",1,SWIGTYPE_p_ofPolyline); }  result = (float)((ofPolyline const *)arg1)->getArea();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getCentroid2D(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; ofPoint result;
  SWIG_check_num_args("ofPolyline::getCentroid2D",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getCentroid2D",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getCentroid2D",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->getCentroid2D(); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_draw(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::draw",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_draw",1,SWIGTYPE_p_ofPolyline); }  (arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_setRightVector__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  ofVec3f arg2 ; ofVec3f *argp2 ; SWIG_check_num_args("ofPolyline::setRightVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::setRightVector",1,"ofPolyline *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofPolyline::setRightVector",2,"ofVec3f");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_setRightVector",1,SWIGTYPE_p_ofPolyline); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Polyline_setRightVector",2,SWIGTYPE_p_ofVec3f); }  arg2 = *argp2; (arg1)->setRightVector(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_setRightVector__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  SWIG_check_num_args("ofPolyline::setRightVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::setRightVector",1,"ofPolyline *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_setRightVector",1,SWIGTYPE_p_ofPolyline); }  (arg1)->setRightVector(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_setRightVector(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Polyline_setRightVector__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPolyline, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Polyline_setRightVector__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Polyline_setRightVector'\n"
  "  Possible C/C++ prototypes are:\n" "    ofPolyline::setRightVector(ofVec3f)\n" "    ofPolyline::setRightVector()\n");
  lua_error(L);return 0; }
static int _wrap_Polyline_getRightVector(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofPolyline::getRightVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getRightVector",1,"ofPolyline const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getRightVector",1,SWIGTYPE_p_ofPolyline); }  result = ((ofPolyline const *)arg1)->getRightVector();
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getIndexAtLength(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float result; SWIG_check_num_args("ofPolyline::getIndexAtLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getIndexAtLength",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getIndexAtLength",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getIndexAtLength",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getIndexAtLength(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getIndexAtPercent(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  float result; SWIG_check_num_args("ofPolyline::getIndexAtPercent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getIndexAtPercent",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getIndexAtPercent",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getIndexAtPercent",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getIndexAtPercent(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getLengthAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  float result; SWIG_check_num_args("ofPolyline::getLengthAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getLengthAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getLengthAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getLengthAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getLengthAtIndex(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getLengthAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float result; SWIG_check_num_args("ofPolyline::getLengthAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getLengthAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getLengthAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getLengthAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getLengthAtIndexInterpolated(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getPointAtLength(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  ofPoint result; SWIG_check_num_args("ofPolyline::getPointAtLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getPointAtLength",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getPointAtLength",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getPointAtLength",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getPointAtLength(arg2); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getPointAtPercent(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; float arg2 ;
  ofPoint result; SWIG_check_num_args("ofPolyline::getPointAtPercent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getPointAtPercent",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getPointAtPercent",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getPointAtPercent",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getPointAtPercent(arg2); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getPointAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofPoint result; SWIG_check_num_args("ofPolyline::getPointAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getPointAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getPointAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getPointAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getPointAtIndexInterpolated(arg2); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getAngleAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  float result; SWIG_check_num_args("ofPolyline::getAngleAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getAngleAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getAngleAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getAngleAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getAngleAtIndex(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getAngleAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; float result; SWIG_check_num_args("ofPolyline::getAngleAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getAngleAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getAngleAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getAngleAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((ofPolyline const *)arg1)->getAngleAtIndexInterpolated(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getRotationAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  ofVec3f result; SWIG_check_num_args("ofPolyline::getRotationAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getRotationAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getRotationAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getRotationAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getRotationAtIndex(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getRotationAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofVec3f result; SWIG_check_num_args("ofPolyline::getRotationAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getRotationAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getRotationAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getRotationAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getRotationAtIndexInterpolated(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getTangentAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  ofVec3f result; SWIG_check_num_args("ofPolyline::getTangentAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getTangentAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getTangentAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getTangentAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getTangentAtIndex(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getTangentAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofVec3f result; SWIG_check_num_args("ofPolyline::getTangentAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getTangentAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getTangentAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getTangentAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getTangentAtIndexInterpolated(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getNormalAtIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  ofVec3f result; SWIG_check_num_args("ofPolyline::getNormalAtIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getNormalAtIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getNormalAtIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getNormalAtIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getNormalAtIndex(arg2); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getNormalAtIndexInterpolated(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ;
  float arg2 ; ofVec3f result; SWIG_check_num_args("ofPolyline::getNormalAtIndexInterpolated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getNormalAtIndexInterpolated",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getNormalAtIndexInterpolated",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getNormalAtIndexInterpolated",1,SWIGTYPE_p_ofPolyline); }  arg2 = (float)lua_tonumber(L, 2);
  result = ((ofPolyline const *)arg1)->getNormalAtIndexInterpolated(arg2); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Polyline_getWrappedIndex(lua_State* L) { int SWIG_arg = 0; ofPolyline *arg1 = (ofPolyline *) 0 ; int arg2 ;
  int result; SWIG_check_num_args("ofPolyline::getWrappedIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofPolyline::getWrappedIndex",1,"ofPolyline const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofPolyline::getWrappedIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPolyline,0))){
    SWIG_fail_ptr("Polyline_getWrappedIndex",1,SWIGTYPE_p_ofPolyline); }  arg2 = (int)lua_tonumber(L, 2);
  result = (int)((ofPolyline const *)arg1)->getWrappedIndex(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Polyline(void *obj) {
ofPolyline *arg1 = (ofPolyline *) obj;
delete arg1;
}
static swig_lua_method swig_ofPolyline_methods[] = {
    {"clear", _wrap_Polyline_clear}, 
    {"addVertex", _wrap_Polyline_addVertex}, 
    {"addVertices", _wrap_Polyline_addVertices}, 
    {"lineTo", _wrap_Polyline_lineTo}, 
    {"insertVertex", _wrap_Polyline_insertVertex}, 
    {"arc", _wrap_Polyline_arc}, 
    {"arcNegative", _wrap_Polyline_arcNegative}, 
    {"curveTo", _wrap_Polyline_curveTo}, 
    {"bezierTo", _wrap_Polyline_bezierTo}, 
    {"quadBezierTo", _wrap_Polyline_quadBezierTo}, 
    {"getSmoothed", _wrap_Polyline_getSmoothed}, 
    {"getResampledBySpacing", _wrap_Polyline_getResampledBySpacing}, 
    {"getResampledByCount", _wrap_Polyline_getResampledByCount}, 
    {"getBoundingBox", _wrap_Polyline_getBoundingBox}, 
    {"getClosestPoint", _wrap_Polyline_getClosestPoint}, 
    {"inside", _wrap_Polyline_inside}, 
    {"simplify", _wrap_Polyline_simplify}, 
    {"size", _wrap_Polyline_size}, 
    {"resize", _wrap_Polyline_resize}, 
    {"setClosed", _wrap_Polyline_setClosed}, 
    {"isClosed", _wrap_Polyline_isClosed}, 
    {"close", _wrap_Polyline_close}, 
    {"hasChanged", _wrap_Polyline_hasChanged}, 
    {"flagHasChanged", _wrap_Polyline_flagHasChanged}, 
    {"getVertices", _wrap_Polyline_getVertices}, 
    {"getPerimeter", _wrap_Polyline_getPerimeter}, 
    {"getArea", _wrap_Polyline_getArea}, 
    {"getCentroid2D", _wrap_Polyline_getCentroid2D}, 
    {"draw", _wrap_Polyline_draw}, 
    {"setRightVector", _wrap_Polyline_setRightVector}, 
    {"getRightVector", _wrap_Polyline_getRightVector}, 
    {"getIndexAtLength", _wrap_Polyline_getIndexAtLength}, 
    {"getIndexAtPercent", _wrap_Polyline_getIndexAtPercent}, 
    {"getLengthAtIndex", _wrap_Polyline_getLengthAtIndex}, 
    {"getLengthAtIndexInterpolated", _wrap_Polyline_getLengthAtIndexInterpolated}, 
    {"getPointAtLength", _wrap_Polyline_getPointAtLength}, 
    {"getPointAtPercent", _wrap_Polyline_getPointAtPercent}, 
    {"getPointAtIndexInterpolated", _wrap_Polyline_getPointAtIndexInterpolated}, 
    {"getAngleAtIndex", _wrap_Polyline_getAngleAtIndex}, 
    {"getAngleAtIndexInterpolated", _wrap_Polyline_getAngleAtIndexInterpolated}, 
    {"getRotationAtIndex", _wrap_Polyline_getRotationAtIndex}, 
    {"getRotationAtIndexInterpolated", _wrap_Polyline_getRotationAtIndexInterpolated}, 
    {"getTangentAtIndex", _wrap_Polyline_getTangentAtIndex}, 
    {"getTangentAtIndexInterpolated", _wrap_Polyline_getTangentAtIndexInterpolated}, 
    {"getNormalAtIndex", _wrap_Polyline_getNormalAtIndex}, 
    {"getNormalAtIndexInterpolated", _wrap_Polyline_getNormalAtIndexInterpolated}, 
    {"getWrappedIndex", _wrap_Polyline_getWrappedIndex}, 
    {0,0}
};
static swig_lua_attribute swig_ofPolyline_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofPolyline_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofPolyline_cls_methods[] = {
    {"fromRectangle", _wrap_Polyline_fromRectangle}, 
    {0,0}
};
static swig_lua_const_info swig_ofPolyline_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofPolyline_bases[] = {0};
static const char *swig_ofPolyline_base_names[] = {0};
static swig_lua_class _wrap_class_ofPolyline = { "Polyline", &SWIGTYPE_p_ofPolyline,_wrap_new_Polyline, swig_delete_Polyline, swig_ofPolyline_methods, swig_ofPolyline_attributes, { "Polyline", swig_ofPolyline_cls_methods, swig_ofPolyline_cls_attributes, swig_ofPolyline_cls_constants }, swig_ofPolyline_bases, swig_ofPolyline_base_names };

static int _wrap_beginSaveScreenAsPDF__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; bool arg3 ;
  ofRectangle arg4 ; ofRectangle *argp4 ; SWIG_check_num_args("ofBeginSaveScreenAsPDF",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",4,"ofRectangle");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (lua_toboolean(L, 2)!=0); arg3 = (lua_toboolean(L, 3)!=0);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("beginSaveScreenAsPDF",4,SWIGTYPE_p_ofRectangle); }  arg4 = *argp4;
  ofBeginSaveScreenAsPDF(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_beginSaveScreenAsPDF__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofBeginSaveScreenAsPDF",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",3,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); arg3 = (lua_toboolean(L, 3)!=0); ofBeginSaveScreenAsPDF(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_beginSaveScreenAsPDF__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; bool arg2 ;
  SWIG_check_num_args("ofBeginSaveScreenAsPDF",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",1,"std::string");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",2,"bool"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (lua_toboolean(L, 2)!=0); ofBeginSaveScreenAsPDF(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_beginSaveScreenAsPDF__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::string arg1 ;
  SWIG_check_num_args("ofBeginSaveScreenAsPDF",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofBeginSaveScreenAsPDF",1,"std::string");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); ofBeginSaveScreenAsPDF(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_beginSaveScreenAsPDF(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_beginSaveScreenAsPDF__SWIG_3(L);}  } 
  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_beginSaveScreenAsPDF__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_beginSaveScreenAsPDF__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); } 
    if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_beginSaveScreenAsPDF__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'beginSaveScreenAsPDF'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBeginSaveScreenAsPDF(std::string,bool,bool,ofRectangle)\n"
  "    ofBeginSaveScreenAsPDF(std::string,bool,bool)\n" "    ofBeginSaveScreenAsPDF(std::string,bool)\n"
  "    ofBeginSaveScreenAsPDF(std::string)\n"); lua_error(L);return 0; }
static int _wrap_endSaveScreenAsPDF(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEndSaveScreenAsPDF",0,0)
  ofEndSaveScreenAsPDF(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_pushView(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPushView",0,0) ofPushView(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_popView(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPopView",0,0) ofPopView(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_viewport__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle arg1 ; ofRectangle *argp1 ;
  SWIG_check_num_args("ofViewport",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofViewport",1,"ofRectangle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("viewport",1,SWIGTYPE_p_ofRectangle); }  arg1 = *argp1; ofViewport(arg1); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_viewport__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  bool arg5 ; SWIG_check_num_args("ofViewport",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofViewport",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofViewport",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofViewport",4,"float"); if(!lua_isboolean(L,5)) SWIG_fail_arg("ofViewport",5,"bool");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (lua_toboolean(L, 5)!=0); ofViewport(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_viewport__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofViewport",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofViewport",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofViewport",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofViewport",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofViewport(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_viewport__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofViewport",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofViewport",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofViewport",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofViewport(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_viewport__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofViewport",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofViewport",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofViewport(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_viewport__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofViewport",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofViewport",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofViewport(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_viewport__SWIG_6(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofViewport",0,0) ofViewport();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_viewport(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_viewport__SWIG_6(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_viewport__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_viewport__SWIG_5(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_viewport__SWIG_4(L);}
       }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_viewport__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_viewport__SWIG_2(L);}  }  }  }  }  if (argc == 5) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isboolean(L,argv[4]); }  if (_v) { return _wrap_viewport__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'viewport'\n" "  Possible C/C++ prototypes are:\n"
  "    ofViewport(ofRectangle)\n" "    ofViewport(float,float,float,float,bool)\n" "    ofViewport(float,float,float,float)\n"
  "    ofViewport(float,float,float)\n" "    ofViewport(float,float)\n" "    ofViewport(float)\n" "    ofViewport()\n");
  lua_error(L);return 0; }
static int _wrap_isVFlipped(lua_State* L) { int SWIG_arg = 0; bool result; SWIG_check_num_args("ofIsVFlipped",0,0)
  result = (bool)ofIsVFlipped(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_setupScreenPerspective__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofSetupScreenPerspective",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenPerspective",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenPerspective",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetupScreenPerspective",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSetupScreenPerspective",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ofSetupScreenPerspective(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_setupScreenPerspective__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofSetupScreenPerspective",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenPerspective",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenPerspective",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetupScreenPerspective",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofSetupScreenPerspective(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupScreenPerspective__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofSetupScreenPerspective",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenPerspective",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenPerspective",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofSetupScreenPerspective(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupScreenPerspective__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofSetupScreenPerspective",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenPerspective",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofSetupScreenPerspective(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setupScreenPerspective__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ;
  SWIG_check_num_args("ofSetupScreenPerspective",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenPerspective",1,"float"); arg1 = (float)lua_tonumber(L, 1);
  ofSetupScreenPerspective(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupScreenPerspective__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofSetupScreenPerspective",0,0) ofSetupScreenPerspective(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_setupScreenPerspective(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 0) { return _wrap_setupScreenPerspective__SWIG_5(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { return _wrap_setupScreenPerspective__SWIG_4(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_setupScreenPerspective__SWIG_3(L);}  }  } 
  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_setupScreenPerspective__SWIG_2(L);}  }  }  }  if (argc == 4) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_setupScreenPerspective__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_setupScreenPerspective__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setupScreenPerspective'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSetupScreenPerspective(float,float,float,float,float)\n"
  "    ofSetupScreenPerspective(float,float,float,float)\n" "    ofSetupScreenPerspective(float,float,float)\n"
  "    ofSetupScreenPerspective(float,float)\n" "    ofSetupScreenPerspective(float)\n" "    ofSetupScreenPerspective()\n");
  lua_error(L);return 0; }
static int _wrap_setupScreenOrtho__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofSetupScreenOrtho",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenOrtho",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenOrtho",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenOrtho",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetupScreenOrtho",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofSetupScreenOrtho(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupScreenOrtho__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofSetupScreenOrtho",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenOrtho",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenOrtho",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupScreenOrtho",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofSetupScreenOrtho(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupScreenOrtho__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofSetupScreenOrtho",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenOrtho",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupScreenOrtho",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofSetupScreenOrtho(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setupScreenOrtho__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ;
  SWIG_check_num_args("ofSetupScreenOrtho",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupScreenOrtho",1,"float");
  arg1 = (float)lua_tonumber(L, 1); ofSetupScreenOrtho(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setupScreenOrtho__SWIG_4(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSetupScreenOrtho",0,0)
  ofSetupScreenOrtho(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupScreenOrtho(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_setupScreenOrtho__SWIG_4(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_setupScreenOrtho__SWIG_3(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_setupScreenOrtho__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_setupScreenOrtho__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_setupScreenOrtho__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setupScreenOrtho'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetupScreenOrtho(float,float,float,float)\n" "    ofSetupScreenOrtho(float,float,float)\n"
  "    ofSetupScreenOrtho(float,float)\n" "    ofSetupScreenOrtho(float)\n" "    ofSetupScreenOrtho()\n");
  lua_error(L);return 0; }
static int _wrap_getCurrentViewport(lua_State* L) { int SWIG_arg = 0; ofRectangle result;
  SWIG_check_num_args("ofGetCurrentViewport",0,0) result = ofGetCurrentViewport(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getNativeViewport(lua_State* L) { int SWIG_arg = 0; ofRectangle result;
  SWIG_check_num_args("ofGetNativeViewport",0,0) result = ofGetNativeViewport(); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getViewportWidth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetViewportWidth",0,0)
  result = (int)ofGetViewportWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_getViewportHeight(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetViewportHeight",0,0)
  result = (int)ofGetViewportHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_orientationToDegrees(lua_State* L) { int SWIG_arg = 0; ofOrientation arg1 ; int result;
  SWIG_check_num_args("ofOrientationToDegrees",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofOrientationToDegrees",1,"ofOrientation");
  arg1 = (ofOrientation)(int)lua_tonumber(L, 1); result = (int)ofOrientationToDegrees(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setCoordHandedness(lua_State* L) { int SWIG_arg = 0; ofHandednessType arg1 ;
  SWIG_check_num_args("ofSetCoordHandedness",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCoordHandedness",1,"ofHandednessType");
  arg1 = (ofHandednessType)(int)lua_tonumber(L, 1); ofSetCoordHandedness(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getCoordHandedness(lua_State* L) { int SWIG_arg = 0; ofHandednessType result;
  SWIG_check_num_args("ofGetCoordHandedness",0,0) result = (ofHandednessType)ofGetCoordHandedness();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_pushMatrix(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPushMatrix",0,0) ofPushMatrix();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_popMatrix(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPopMatrix",0,0) ofPopMatrix();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_translate__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofTranslate",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTranslate",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTranslate",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTranslate",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofTranslate(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_translate__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofTranslate",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTranslate",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTranslate",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofTranslate(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_translate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; SWIG_check_num_args("ofTranslate",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofTranslate",1,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("translate",1,SWIGTYPE_p_ofVec3f); } 
  ofTranslate((ofVec3f const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_translate(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_translate__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_translate__SWIG_1(L);}
       }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_translate__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'translate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTranslate(float,float,float)\n" "    ofTranslate(float,float)\n" "    ofTranslate(ofPoint const &)\n");
  lua_error(L);return 0; }
static int _wrap_scale__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofScale",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofScale",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofScale",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofScale",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofScale(arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_scale__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; SWIG_check_num_args("ofScale",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofScale",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofScale",2,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); ofScale(arg1,arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_scale(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_scale__SWIG_1(L);}  }
     }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_scale__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'scale'\n" "  Possible C/C++ prototypes are:\n"
  "    ofScale(float,float,float)\n" "    ofScale(float,float)\n"); lua_error(L);return 0; }
static int _wrap_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofRotate",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotate",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRotate",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRotate",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofRotate(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rotateX(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofRotateX",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotateX",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofRotateX(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rotateY(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofRotateY",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotateY",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofRotateY(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rotateZ(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofRotateZ",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotateZ",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofRotateZ(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofRotate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRotate",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofRotate(arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rotate(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_rotate__SWIG_1(L);}  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_rotate__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRotate(float,float,float,float)\n" "    ofRotate(float)\n"); lua_error(L);return 0; }
static int _wrap_loadIdentity(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofLoadIdentityMatrix",0,0)
  ofLoadIdentityMatrix(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_loadMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ;
  SWIG_check_num_args("ofLoadMatrix",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofLoadMatrix",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("loadMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  ofLoadMatrix((ofMatrix4x4 const &)*arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_loadMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float *arg1 = (float *) 0 ;
  SWIG_check_num_args("ofLoadMatrix",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLoadMatrix",1,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("loadMatrix",1,SWIGTYPE_p_float); } 
  ofLoadMatrix((float const *)arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_loadMatrix(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_loadMatrix__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_loadMatrix__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'loadMatrix'\n" "  Possible C/C++ prototypes are:\n"
  "    ofLoadMatrix(ofMatrix4x4 const &)\n" "    ofLoadMatrix(float const *)\n"); lua_error(L);return 0; }
static int _wrap_multMatrix__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMatrix4x4 *arg1 = 0 ;
  SWIG_check_num_args("ofMultMatrix",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMultMatrix",1,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("multMatrix",1,SWIGTYPE_p_ofMatrix4x4); }  ofMultMatrix((ofMatrix4x4 const &)*arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_multMatrix__SWIG_1(lua_State* L) { int SWIG_arg = 0; float *arg1 = (float *) 0 ;
  SWIG_check_num_args("ofMultMatrix",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMultMatrix",1,"float const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("multMatrix",1,SWIGTYPE_p_float); } 
  ofMultMatrix((float const *)arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_multMatrix(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMatrix4x4, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_multMatrix__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_multMatrix__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'multMatrix'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMultMatrix(ofMatrix4x4 const &)\n" "    ofMultMatrix(float const *)\n"); lua_error(L);return 0; }
static int _wrap_setMatrixMode(lua_State* L) { int SWIG_arg = 0; ofMatrixMode arg1 ; SWIG_check_num_args("ofSetMatrixMode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetMatrixMode",1,"ofMatrixMode"); arg1 = (ofMatrixMode)(int)lua_tonumber(L, 1);
  ofSetMatrixMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupGraphicDefaults(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSetupGraphicDefaults",0,0)
  ofSetupGraphicDefaults(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupScreen(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSetupScreen",0,0) ofSetupScreen();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getRectmode(lua_State* L) { int SWIG_arg = 0; ofRectMode result; SWIG_check_num_args("ofGetRectMode",0,0)
  result = (ofRectMode)ofGetRectMode(); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setCircleResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetCircleResolution",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCircleResolution",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetCircleResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setCurveResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSetCurveResolution",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCurveResolution",1,"int"); arg1 = (int)lua_tonumber(L, 1);
  ofSetCurveResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_noFill(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofNoFill",0,0) ofNoFill(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_fill(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofFill",0,0) ofFill(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getFill(lua_State* L) { int SWIG_arg = 0; ofFillFlag result; SWIG_check_num_args("ofGetFill",0,0)
  result = (ofFillFlag)ofGetFill(); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_setLineWidth(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofSetLineWidth",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetLineWidth",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofSetLineWidth(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setDepthTest(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSetDepthTest",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetDepthTest",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofSetDepthTest(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_enableDepthTest(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableDepthTest",0,0)
  ofEnableDepthTest(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_disableDepthTest(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableDepthTest",0,0)
  ofDisableDepthTest(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetColor",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetColor",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetColor",3,"int");
  arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetColor(arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofSetColor",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetColor",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetColor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetColor",4,"int"); arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); ofSetColor(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setColor__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; SWIG_check_num_args("ofSetColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetColor",1,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("setColor",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  ofSetColor((ofColor_< unsigned char > const &)*arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setColor__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; int arg2 ;
  SWIG_check_num_args("ofSetColor",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetColor",1,"ofColor const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("setColor",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  ofSetColor((ofColor_< unsigned char > const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setColor__SWIG_4(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSetColor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetColor",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSetColor(arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_setColor__SWIG_2(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_setColor__SWIG_4(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_setColor__SWIG_3(L);}
       }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_setColor__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_setColor__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetColor(int,int,int)\n" "    ofSetColor(int,int,int,int)\n" "    ofSetColor(ofColor const &)\n"
  "    ofSetColor(ofColor const &,int)\n" "    ofSetColor(int)\n"); lua_error(L);return 0; }
static int _wrap_setHexColor(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSetHexColor",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetHexColor",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSetHexColor(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_enableBlendMode(lua_State* L) { int SWIG_arg = 0; ofBlendMode arg1 ;
  SWIG_check_num_args("ofEnableBlendMode",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofEnableBlendMode",1,"ofBlendMode");
  arg1 = (ofBlendMode)(int)lua_tonumber(L, 1); ofEnableBlendMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_disableBlendMode(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableBlendMode",0,0)
  ofDisableBlendMode(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_enablePointSprites(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnablePointSprites",0,0)
  ofEnablePointSprites(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_disablePointSprites(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisablePointSprites",0,0)
  ofDisablePointSprites(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_enableAlphaBlending(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableAlphaBlending",0,0)
  ofEnableAlphaBlending(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_disableAlphaBlending(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableAlphaBlending",0,0)
  ofDisableAlphaBlending(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_enableSmoothing(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableSmoothing",0,0)
  ofEnableSmoothing(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_disableSmoothing(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableSmoothing",0,0)
  ofDisableSmoothing(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_enableAntiAliasing(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableAntiAliasing",0,0)
  ofEnableAntiAliasing(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_disableAntiAliasing(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableAntiAliasing",0,0)
  ofDisableAntiAliasing(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getStyle(lua_State* L) { int SWIG_arg = 0; ofStyle result; SWIG_check_num_args("ofGetStyle",0,0)
  result = ofGetStyle(); { ofStyle * resultptr = new ofStyle((const ofStyle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofStyle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_setStyle(lua_State* L) { int SWIG_arg = 0; ofStyle arg1 ; ofStyle *argp1 ;
  SWIG_check_num_args("ofSetStyle",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetStyle",1,"ofStyle");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofStyle,0))){ SWIG_fail_ptr("setStyle",1,SWIGTYPE_p_ofStyle); } 
  arg1 = *argp1; ofSetStyle(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_pushStyle(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPushStyle",0,0) ofPushStyle();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_popStyle(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofPopStyle",0,0) ofPopStyle(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setPolyMode(lua_State* L) { int SWIG_arg = 0; ofPolyWindingMode arg1 ; SWIG_check_num_args("ofSetPolyMode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetPolyMode",1,"ofPolyWindingMode");
  arg1 = (ofPolyWindingMode)(int)lua_tonumber(L, 1); ofSetPolyMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setRectMode(lua_State* L) { int SWIG_arg = 0; ofRectMode arg1 ; SWIG_check_num_args("ofSetRectMode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetRectMode",1,"ofRectMode"); arg1 = (ofRectMode)(int)lua_tonumber(L, 1);
  ofSetRectMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getBackground(lua_State* L) { int SWIG_arg = 0; ofColor result; SWIG_check_num_args("ofGetBackground",0,0)
  result = ofGetBackground(); { ofColor * resultptr = new ofColor((const ofColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_background__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofBackground",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackground",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBackground",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBackground",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBackground",4,"int"); arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); ofBackground(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_background__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofBackground",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackground",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBackground",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBackground",3,"int");
  arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofBackground(arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_background__SWIG_2(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofBackground",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackground",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBackground",2,"int"); arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2);
  ofBackground(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_background__SWIG_3(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofBackground",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackground",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofBackground(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_background__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ;
  SWIG_check_num_args("ofBackground",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBackground",1,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("background",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofBackground((ofColor_< unsigned char > const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_background(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_background__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_background__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_background__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_background__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_background__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'background'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBackground(int,int,int,int)\n" "    ofBackground(int,int,int)\n" "    ofBackground(int,int)\n"
  "    ofBackground(int)\n" "    ofBackground(ofColor const &)\n"); lua_error(L);return 0; }
static int _wrap_backgroundHex__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofBackgroundHex",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackgroundHex",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBackgroundHex",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofBackgroundHex(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_backgroundHex__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofBackgroundHex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBackgroundHex",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofBackgroundHex(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_backgroundHex(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_backgroundHex__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_backgroundHex__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'backgroundHex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBackgroundHex(int,int)\n" "    ofBackgroundHex(int)\n"); lua_error(L);return 0; }
static int _wrap_backgroundGradient__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; ofColor *arg2 = 0 ;
  ofGradientMode arg3 ; SWIG_check_num_args("ofBackgroundGradient",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBackgroundGradient",1,"ofColor const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBackgroundGradient",2,"ofColor const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBackgroundGradient",3,"ofGradientMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("backgroundGradient",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("backgroundGradient",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  arg3 = (ofGradientMode)(int)lua_tonumber(L, 3);
  ofBackgroundGradient((ofColor_< unsigned char > const &)*arg1,(ofColor_< unsigned char > const &)*arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_backgroundGradient__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; ofColor *arg2 = 0 ;
  SWIG_check_num_args("ofBackgroundGradient",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBackgroundGradient",1,"ofColor const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBackgroundGradient",2,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("backgroundGradient",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("backgroundGradient",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofBackgroundGradient((ofColor_< unsigned char > const &)*arg1,(ofColor_< unsigned char > const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_backgroundGradient(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_backgroundGradient__SWIG_1(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_backgroundGradient__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'backgroundGradient'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBackgroundGradient(ofColor const &,ofColor const &,ofGradientMode)\n"
  "    ofBackgroundGradient(ofColor const &,ofColor const &)\n"); lua_error(L);return 0; }
static int _wrap_setBackgroundColor__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofSetBackgroundColor",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBackgroundColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetBackgroundColor",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetBackgroundColor",4,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  ofSetBackgroundColor(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setBackgroundColor__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetBackgroundColor",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBackgroundColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetBackgroundColor",3,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetBackgroundColor(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setBackgroundColor__SWIG_2(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetBackgroundColor",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBackgroundColor",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetBackgroundColor(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setBackgroundColor__SWIG_3(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetBackgroundColor",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetBackgroundColor(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setBackgroundColor__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ;
  SWIG_check_num_args("ofSetBackgroundColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetBackgroundColor",1,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("setBackgroundColor",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofSetBackgroundColor((ofColor_< unsigned char > const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setBackgroundColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_setBackgroundColor__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_setBackgroundColor__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_setBackgroundColor__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_setBackgroundColor__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_setBackgroundColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setBackgroundColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetBackgroundColor(int,int,int,int)\n" "    ofSetBackgroundColor(int,int,int)\n" "    ofSetBackgroundColor(int,int)\n"
  "    ofSetBackgroundColor(int)\n" "    ofSetBackgroundColor(ofColor const &)\n"); lua_error(L);return 0; }
static int _wrap_setBackgroundColorHex__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetBackgroundColorHex",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColorHex",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBackgroundColorHex",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetBackgroundColorHex(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setBackgroundColorHex__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetBackgroundColorHex",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBackgroundColorHex",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetBackgroundColorHex(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setBackgroundColorHex(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_setBackgroundColorHex__SWIG_1(L);}  }  if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_setBackgroundColorHex__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setBackgroundColorHex'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSetBackgroundColorHex(int,int)\n" "    ofSetBackgroundColorHex(int)\n");
  lua_error(L);return 0; }
static int _wrap_setBackgroundAuto(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSetBackgroundAuto",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetBackgroundAuto",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0);
  ofSetBackgroundAuto(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_clear__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofClear",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClear",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofClear",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofClear",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofClear",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ofClear(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_clear__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofClear",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClear",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofClear",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofClear",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofClear(arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_clear__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; SWIG_check_num_args("ofClear",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClear",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofClear",2,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); ofClear(arg1,arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_clear__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofClear",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofClear",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofClear(arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_clear__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ; SWIG_check_num_args("ofClear",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofClear",1,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("clear",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  ofClear((ofColor_< unsigned char > const &)*arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_clear(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_clear__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_clear__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_clear__SWIG_2(L);}  }
     }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_clear__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_clear__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'clear'\n" "  Possible C/C++ prototypes are:\n"
  "    ofClear(float,float,float,float)\n" "    ofClear(float,float,float)\n" "    ofClear(float,float)\n"
  "    ofClear(float)\n" "    ofClear(ofColor const &)\n"); lua_error(L);return 0; }
static int _wrap_clearAlpha(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofClearAlpha",0,0) ofClearAlpha();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_triangle__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofTriangle",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTriangle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTriangle",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTriangle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTriangle",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTriangle",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTriangle",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); ofTriangle(arg1,arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_triangle__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofTriangle",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTriangle",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTriangle",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTriangle",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTriangle",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTriangle",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTriangle",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTriangle",7,"float"); if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTriangle",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofTriangle",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); ofTriangle(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_triangle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ; ofPoint *arg3 = 0 ;
  SWIG_check_num_args("ofTriangle",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofTriangle",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTriangle",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofTriangle",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("triangle",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("triangle",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("triangle",3,SWIGTYPE_p_ofVec3f); } 
  ofTriangle((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_triangle(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_triangle__SWIG_2(L);}  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_triangle__SWIG_0(L);}  }  }  }  }  }  } 
  if (argc == 9) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) { {
                      _v = lua_isnumber(L,argv[8]); }  if (_v) { return _wrap_triangle__SWIG_1(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'triangle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTriangle(float,float,float,float,float,float)\n"
  "    ofTriangle(float,float,float,float,float,float,float,float,float)\n"
  "    ofTriangle(ofPoint const &,ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_circle__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofCircle",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCircle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCircle",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCircle",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofCircle(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_circle__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofCircle",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCircle",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCircle",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCircle",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCircle",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofCircle(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_circle__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofCircle",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCircle",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCircle",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("circle",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); ofCircle((ofVec3f const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_circle(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_circle__SWIG_2(L);}
       }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_circle__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_circle__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'circle'\n" "  Possible C/C++ prototypes are:\n"
  "    ofCircle(float,float,float)\n" "    ofCircle(float,float,float,float)\n" "    ofCircle(ofPoint const &,float)\n");
  lua_error(L);return 0; }
static int _wrap_ellipse__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofEllipse",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofEllipse",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofEllipse",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofEllipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofEllipse",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofEllipse(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ellipse__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofEllipse",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofEllipse",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofEllipse",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofEllipse",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofEllipse",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofEllipse",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); ofEllipse(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ellipse__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofEllipse",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofEllipse",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofEllipse",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofEllipse",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ellipse",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofEllipse((ofVec3f const &)*arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ellipse(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 3) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_ellipse__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_ellipse__SWIG_0(L);}  }  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ellipse__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ellipse'\n" "  Possible C/C++ prototypes are:\n"
  "    ofEllipse(float,float,float,float)\n" "    ofEllipse(float,float,float,float,float)\n"
  "    ofEllipse(ofPoint const &,float,float)\n"); lua_error(L);return 0; }
static int _wrap_line__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofLine",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLine",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofLine",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ofLine(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_line__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; SWIG_check_num_args("ofLine",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofLine",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLine",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLine",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofLine",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofLine",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofLine",6,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); ofLine(arg1,arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_line__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofLine",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofLine",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLine",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("line",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("line",2,SWIGTYPE_p_ofVec3f); } 
  ofLine((ofVec3f const &)*arg1,(ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_line(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_line__SWIG_2(L);}  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_line__SWIG_0(L);}  }  }  }  }  if (argc == 6) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_line__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'line'\n" "  Possible C/C++ prototypes are:\n"
  "    ofLine(float,float,float,float)\n" "    ofLine(float,float,float,float,float,float)\n"
  "    ofLine(ofPoint const &,ofPoint const &)\n"); lua_error(L);return 0; }
static int _wrap_rect__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofRect",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRect",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRect",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRect",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRect",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ofRect(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rect__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; SWIG_check_num_args("ofRect",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRect",1,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){ SWIG_fail_ptr("rect",1,SWIGTYPE_p_ofRectangle); }
   ofRect((ofRectangle const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rect__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofRect",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRect",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRect",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRect",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("rect",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofRect((ofVec3f const &)*arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rect__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofRect",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRect",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRect",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRect",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRect",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRect",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); ofRect(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rect(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_rect__SWIG_1(L);}  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_rect__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_rect__SWIG_0(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_rect__SWIG_3(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rect'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRect(float,float,float,float)\n" "    ofRect(ofRectangle const &)\n" "    ofRect(ofPoint const &,float,float)\n"
  "    ofRect(float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_rectRounded__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofRectRounded",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectRounded",1,"ofRectangle const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("rectRounded",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  ofRectRounded((ofRectangle const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rectRounded__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofRectRounded",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectRounded",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("rectRounded",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofRectRounded((ofVec3f const &)*arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_rectRounded__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofRectRounded",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRectRounded",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectRounded",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ofRectRounded(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_rectRounded__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; float arg6 ; float arg7 ; SWIG_check_num_args("ofRectRounded",7,7)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectRounded",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofRectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofRectRounded",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("rectRounded",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  ofRectRounded((ofVec3f const &)*arg1,arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_rectRounded__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofRectangle *arg1 = 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofRectRounded",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRectRounded",1,"ofRectangle const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectRounded",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("rectRounded",1,SWIGTYPE_p_ofRectangle); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  ofRectRounded((ofRectangle const &)*arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_rectRounded__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofRectRounded",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofRectRounded",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofRectRounded",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofRectRounded",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofRectRounded",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofRectRounded",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofRectRounded",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofRectRounded",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofRectRounded",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofRectRounded",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  ofRectRounded(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_rectRounded(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_rectRounded__SWIG_0(L);}  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_rectRounded__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_rectRounded__SWIG_4(L);}  }  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_rectRounded__SWIG_2(L);}  }  }  }  }  }  if (argc == 7) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_rectRounded__SWIG_3(L);}  }  }  }  }  }  }  }  if (argc == 9) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_rectRounded__SWIG_5(L);}  }  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'rectRounded'\n" "  Possible C/C++ prototypes are:\n"
  "    ofRectRounded(ofRectangle const &,float)\n" "    ofRectRounded(ofPoint const &,float,float,float)\n"
  "    ofRectRounded(float,float,float,float,float)\n"
  "    ofRectRounded(ofPoint const &,float,float,float,float,float,float)\n"
  "    ofRectRounded(ofRectangle const &,float,float,float,float)\n"
  "    ofRectRounded(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_curve__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofCurve",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCurve",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCurve",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCurve",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCurve",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCurve",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofCurve",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofCurve",7,"float"); if(!lua_isnumber(L,8)) SWIG_fail_arg("ofCurve",8,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8); ofCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_curve__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ; float arg12 ;
  SWIG_check_num_args("ofCurve",12,12) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCurve",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCurve",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCurve",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCurve",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCurve",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofCurve",6,"float"); if(!lua_isnumber(L,7)) SWIG_fail_arg("ofCurve",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofCurve",8,"float"); if(!lua_isnumber(L,9)) SWIG_fail_arg("ofCurve",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofCurve",10,"float"); if(!lua_isnumber(L,11)) SWIG_fail_arg("ofCurve",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofCurve",12,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11); arg12 = (float)lua_tonumber(L, 12);
  ofCurve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_curve(lua_State* L) { int argc; int argv[13]={ 1,2,3,4,5,6,7,8,9,10,11,12,13} ; argc = lua_gettop(L);
  if (argc == 8) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_curve__SWIG_0(L);}  }  }  }  }  }  }  }  }  if (argc == 12) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { return _wrap_curve__SWIG_1(L);}  }  }  }  }  }  }  }  }
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'curve'\n"
  "  Possible C/C++ prototypes are:\n" "    ofCurve(float,float,float,float,float,float,float,float)\n"
  "    ofCurve(float,float,float,float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_bezier__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofBezier",8,8)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBezier",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBezier",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBezier",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBezier",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezier",5,"float"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBezier",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofBezier",7,"float"); if(!lua_isnumber(L,8)) SWIG_fail_arg("ofBezier",8,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8); ofBezier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_bezier__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ; float arg11 ; float arg12 ;
  SWIG_check_num_args("ofBezier",12,12) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBezier",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBezier",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBezier",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBezier",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezier",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBezier",6,"float"); if(!lua_isnumber(L,7)) SWIG_fail_arg("ofBezier",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofBezier",8,"float"); if(!lua_isnumber(L,9)) SWIG_fail_arg("ofBezier",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofBezier",10,"float"); if(!lua_isnumber(L,11)) SWIG_fail_arg("ofBezier",11,"float");
  if(!lua_isnumber(L,12)) SWIG_fail_arg("ofBezier",12,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  arg11 = (float)lua_tonumber(L, 11); arg12 = (float)lua_tonumber(L, 12);
  ofBezier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_bezier(lua_State* L) { int argc; int argv[13]={ 1,2,3,4,5,6,7,8,9,10,11,12,13} ; argc = lua_gettop(L);
  if (argc == 8) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) {
                    return _wrap_bezier__SWIG_0(L);}  }  }  }  }  }  }  }  }  if (argc == 12) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { { _v = lua_isnumber(L,argv[10]); }  if (_v) { {
                            _v = lua_isnumber(L,argv[11]); }  if (_v) { return _wrap_bezier__SWIG_1(L);}  }  }  }  }  }  }  }  }
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bezier'\n"
  "  Possible C/C++ prototypes are:\n" "    ofBezier(float,float,float,float,float,float,float,float)\n"
  "    ofBezier(float,float,float,float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_beginShape(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofBeginShape",0,0) ofBeginShape();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; SWIG_check_num_args("ofVertex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVertex",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVertex",2,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); ofVertex(arg1,arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_vertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofVertex",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVertex",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVertex",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofVertex(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vertex__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; SWIG_check_num_args("ofVertex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVertex",1,"ofPoint &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("vertex",1,SWIGTYPE_p_ofVec3f); } 
  ofVertex(*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_vertex(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_vertex__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_vertex__SWIG_0(L);}  }
     }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_vertex__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vertex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVertex(float,float)\n" "    ofVertex(float,float,float)\n" "    ofVertex(ofPoint &)\n"); lua_error(L);return 0; }
static int _wrap_vertices(lua_State* L) { int SWIG_arg = 0; std::vector< ofPoint > *arg1 = 0 ;
  SWIG_check_num_args("ofVertices",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVertices",1,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("vertices",1,SWIGTYPE_p_std__vectorT_ofVec3f_t); }  ofVertices((std::vector< ofVec3f > const &)*arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_curveVertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofCurveVertex",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCurveVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCurveVertex",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofCurveVertex(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_curveVertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofCurveVertex",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCurveVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCurveVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCurveVertex",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofCurveVertex(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_curveVertex__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ;
  SWIG_check_num_args("ofCurveVertex",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCurveVertex",1,"ofPoint &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("curveVertex",1,SWIGTYPE_p_ofVec3f); }
   ofCurveVertex(*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_curveVertex(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_curveVertex__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_curveVertex__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_curveVertex__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'curveVertex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofCurveVertex(float,float)\n" "    ofCurveVertex(float,float,float)\n" "    ofCurveVertex(ofPoint &)\n");
  lua_error(L);return 0; }
static int _wrap_ofCurveVertices(lua_State* L) { int SWIG_arg = 0; std::vector< ofPoint > *arg1 = 0 ;
  SWIG_check_num_args("ofCurveVertices",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCurveVertices",1,"std::vector< ofPoint > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("ofCurveVertices",1,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  ofCurveVertices((std::vector< ofVec3f > const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_bezierVertex__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofBezierVertex",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBezierVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBezierVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBezierVertex",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBezierVertex",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezierVertex",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBezierVertex",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); ofBezierVertex(arg1,arg2,arg3,arg4,arg5,arg6);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_bezierVertex__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; SWIG_check_num_args("ofBezierVertex",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofBezierVertex",1,"ofPoint const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofBezierVertex",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofBezierVertex",3,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("bezierVertex",1,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("bezierVertex",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("bezierVertex",3,SWIGTYPE_p_ofVec3f); }
   ofBezierVertex((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_bezierVertex__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofBezierVertex",9,9)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofBezierVertex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofBezierVertex",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofBezierVertex",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofBezierVertex",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofBezierVertex",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofBezierVertex",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofBezierVertex",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofBezierVertex",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofBezierVertex",9,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8); arg9 = (float)lua_tonumber(L, 9);
  ofBezierVertex(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_bezierVertex(lua_State* L) { int argc; int argv[10]={ 1,2,3,4,5,6,7,8,9,10} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_bezierVertex__SWIG_1(L);}  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_bezierVertex__SWIG_0(L);}  }  }  }  }  }  } 
  if (argc == 9) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { { _v = lua_isnumber(L,argv[7]); }  if (_v) { {
                      _v = lua_isnumber(L,argv[8]); }  if (_v) { return _wrap_bezierVertex__SWIG_2(L);}  }  }  }  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bezierVertex'\n" "  Possible C/C++ prototypes are:\n"
  "    ofBezierVertex(float,float,float,float,float,float)\n"
  "    ofBezierVertex(ofPoint const &,ofPoint const &,ofPoint const &)\n"
  "    ofBezierVertex(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_endShape__SWIG_0(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofEndShape",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofEndShape",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofEndShape(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_endShape__SWIG_1(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEndShape",0,0) ofEndShape();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_endShape(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_endShape__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isboolean(L,argv[0]); }  if (_v) {
      return _wrap_endShape__SWIG_0(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'endShape'\n"
  "  Possible C/C++ prototypes are:\n" "    ofEndShape(bool)\n" "    ofEndShape()\n"); lua_error(L);return 0; }
static int _wrap_nextContour__SWIG_0(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofNextContour",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofNextContour",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofNextContour(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_nextContour__SWIG_1(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofNextContour",0,0) ofNextContour();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_nextContour(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_nextContour__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isboolean(L,argv[0]); }  if (_v) {
      return _wrap_nextContour__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'nextContour'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNextContour(bool)\n" "    ofNextContour()\n"); lua_error(L);return 0; }
static int _wrap_setDrawBitmapMode(lua_State* L) { int SWIG_arg = 0; ofDrawBitmapMode arg1 ;
  SWIG_check_num_args("ofSetDrawBitmapMode",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetDrawBitmapMode",1,"ofDrawBitmapMode");
  arg1 = (ofDrawBitmapMode)(int)lua_tonumber(L, 1); ofSetDrawBitmapMode(arg1); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_drawBitmapString__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofDrawBitmapString",2,2) if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapString",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawBitmapString",2,"ofPoint const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("drawBitmapString",2,SWIGTYPE_p_ofVec3f); }  ofDrawBitmapString(arg1,(ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBitmapString__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawBitmapString",3,3) if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapString",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBitmapString",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBitmapString",3,"float"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawBitmapString(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBitmapString__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofDrawBitmapString",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapString",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBitmapString",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBitmapString",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawBitmapString",4,"float"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawBitmapString(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBitmapString(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_drawBitmapString__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_drawBitmapString__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_drawBitmapString__SWIG_2(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawBitmapString'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawBitmapString(std::string,ofPoint const &)\n" "    ofDrawBitmapString(std::string,float,float)\n"
  "    ofDrawBitmapString(std::string,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_drawBitmapStringHighlight__SWIG_0(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofPoint *arg2 = 0 ;
  ofColor *arg3 = 0 ; ofColor *arg4 = 0 ; SWIG_check_num_args("ofDrawBitmapStringHighlight",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"ofColor const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofDrawBitmapStringHighlight",4,"ofColor const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("drawBitmapStringHighlight",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("drawBitmapStringHighlight",3,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("drawBitmapStringHighlight",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofDrawBitmapStringHighlight(arg1,(ofVec3f const &)*arg2,(ofColor_< unsigned char > const &)*arg3,(ofColor_< unsigned char > const &)*arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBitmapStringHighlight__SWIG_1(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofPoint *arg2 = 0 ;
  ofColor *arg3 = 0 ; SWIG_check_num_args("ofDrawBitmapStringHighlight",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"ofColor const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("drawBitmapStringHighlight",2,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("drawBitmapStringHighlight",3,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofDrawBitmapStringHighlight(arg1,(ofVec3f const &)*arg2,(ofColor_< unsigned char > const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBitmapStringHighlight__SWIG_2(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; ofPoint *arg2 = 0 ;
  SWIG_check_num_args("ofDrawBitmapStringHighlight",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"ofPoint const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("drawBitmapStringHighlight",2,SWIGTYPE_p_ofVec3f); } 
  ofDrawBitmapStringHighlight(arg1,(ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_drawBitmapStringHighlight__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; int arg2 ; int arg3 ;
  ofColor *arg4 = 0 ; ofColor *arg5 = 0 ; SWIG_check_num_args("ofDrawBitmapStringHighlight",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofDrawBitmapStringHighlight",4,"ofColor const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofDrawBitmapStringHighlight",5,"ofColor const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("drawBitmapStringHighlight",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("drawBitmapStringHighlight",5,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofDrawBitmapStringHighlight(arg1,arg2,arg3,(ofColor_< unsigned char > const &)*arg4,(ofColor_< unsigned char > const &)*arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBitmapStringHighlight__SWIG_4(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; int arg2 ; int arg3 ;
  ofColor *arg4 = 0 ; SWIG_check_num_args("ofDrawBitmapStringHighlight",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofDrawBitmapStringHighlight",4,"ofColor const &");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("drawBitmapStringHighlight",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofDrawBitmapStringHighlight(arg1,arg2,arg3,(ofColor_< unsigned char > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_drawBitmapStringHighlight__SWIG_5(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofDrawBitmapStringHighlight",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofDrawBitmapStringHighlight",1,"std::string");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBitmapStringHighlight",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBitmapStringHighlight",3,"int");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1)); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  ofDrawBitmapStringHighlight(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBitmapStringHighlight(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_drawBitmapStringHighlight__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_drawBitmapStringHighlight__SWIG_1(L);}  }  }  } 
  if (argc == 3) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_drawBitmapStringHighlight__SWIG_5(L);}  }  }  } 
  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_drawBitmapStringHighlight__SWIG_0(L);}  }  }  }  } 
  if (argc == 4) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_drawBitmapStringHighlight__SWIG_4(L);}  }  }  }  } 
  if (argc == 5) { int _v; { _v = lua_isstring(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_drawBitmapStringHighlight__SWIG_3(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawBitmapStringHighlight'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofDrawBitmapStringHighlight(std::string,ofPoint const &,ofColor const &,ofColor const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,ofPoint const &,ofColor const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,ofPoint const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,int,int,ofColor const &,ofColor const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,int,int,ofColor const &)\n"
  "    ofDrawBitmapStringHighlight(std::string,int,int)\n"); lua_error(L);return 0; }
static int _wrap_setPlaneResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetPlaneResolution",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetPlaneResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetPlaneResolution",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetPlaneResolution(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_getPlaneResolution(lua_State* L) { int SWIG_arg = 0; ofVec2f result;
  SWIG_check_num_args("ofGetPlaneResolution",0,0) result = ofGetPlaneResolution(); {
    ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_drawPlane__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawPlane",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawPlane",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawPlane",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawPlane",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawPlane(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawPlane__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofDrawPlane",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawPlane",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawPlane",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawPlane",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawPlane",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); ofDrawPlane(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawPlane__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawPlane",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawPlane",1,"ofPoint &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawPlane",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawPlane",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawPlane",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawPlane(*arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawPlane__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawPlane",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawPlane",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawPlane(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_drawPlane(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_drawPlane__SWIG_3(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_drawPlane__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_drawPlane__SWIG_0(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_drawPlane__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawPlane'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawPlane(float,float,float,float)\n" "    ofDrawPlane(float,float,float,float,float)\n"
  "    ofDrawPlane(ofPoint &,float,float)\n" "    ofDrawPlane(float,float)\n"); lua_error(L);return 0; }
static int _wrap_setSphereResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetSphereResolution",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetSphereResolution",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetSphereResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_getSphereResolution(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetSphereResolution",0,0) result = (int)ofGetSphereResolution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawSphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawSphere",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawSphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawSphere",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawSphere(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawSphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawSphere",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawSphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawSphere",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawSphere",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawSphere(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawSphere__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofDrawSphere",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawSphere",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawSphere",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawSphere",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); ofDrawSphere((ofVec3f const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_drawSphere__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawSphere",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawSphere",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawSphere(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawSphere(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_drawSphere__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_drawSphere__SWIG_2(L);}  }  } 
  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_drawSphere__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_drawSphere__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawSphere'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawSphere(float,float,float)\n" "    ofDrawSphere(float,float,float,float)\n"
  "    ofDrawSphere(ofPoint const &,float)\n" "    ofDrawSphere(float)\n"); lua_error(L);return 0; }
static int _wrap_setIcoSphereResolution(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetIcoSphereResolution",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetIcoSphereResolution",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetIcoSphereResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_getIcoSphereResolution(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetIcoSphereResolution",0,0) result = (int)ofGetIcoSphereResolution();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawIcoSphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawIcoSphere",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawIcoSphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawIcoSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawIcoSphere",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawIcoSphere",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawIcoSphere(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawIcoSphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawIcoSphere",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawIcoSphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawIcoSphere",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawIcoSphere",3,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawIcoSphere(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawIcoSphere__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofDrawIcoSphere",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawIcoSphere",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawIcoSphere",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("drawIcoSphere",1,SWIGTYPE_p_ofVec3f); }  arg2 = (float)lua_tonumber(L, 2);
  ofDrawIcoSphere((ofVec3f const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawIcoSphere__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawIcoSphere",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawIcoSphere",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawIcoSphere(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawIcoSphere(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_drawIcoSphere__SWIG_3(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_drawIcoSphere__SWIG_2(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_drawIcoSphere__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_drawIcoSphere__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawIcoSphere'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawIcoSphere(float,float,float,float)\n" "    ofDrawIcoSphere(float,float,float)\n"
  "    ofDrawIcoSphere(ofPoint const &,float)\n" "    ofDrawIcoSphere(float)\n"); lua_error(L);return 0; }
static int _wrap_setCylinderResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetCylinderResolution",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCylinderResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetCylinderResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetCylinderResolution",3,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetCylinderResolution(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setCylinderResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetCylinderResolution",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetCylinderResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetCylinderResolution",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetCylinderResolution(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setCylinderResolution(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_setCylinderResolution__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_setCylinderResolution__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setCylinderResolution'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSetCylinderResolution(int,int,int)\n" "    ofSetCylinderResolution(int,int)\n");
  lua_error(L);return 0; }
static int _wrap_getCylinderResolution(lua_State* L) { int SWIG_arg = 0; ofVec3f result;
  SWIG_check_num_args("ofGetCylinderResolution",0,0) result = ofGetCylinderResolution(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_drawCylinder__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawCylinder",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCylinder",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCylinder",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawCylinder(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawCylinder__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofDrawCylinder",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCylinder",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCylinder",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawCylinder",5,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); ofDrawCylinder(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_drawCylinder__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawCylinder",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawCylinder",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCylinder",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawCylinder",1,SWIGTYPE_p_ofVec3f); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawCylinder((ofVec3f const &)*arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawCylinder__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawCylinder",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCylinder",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawCylinder(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_drawCylinder(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_drawCylinder__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_drawCylinder__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_drawCylinder__SWIG_0(L);}  }  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_drawCylinder__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawCylinder'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawCylinder(float,float,float,float)\n" "    ofDrawCylinder(float,float,float,float,float)\n"
  "    ofDrawCylinder(ofPoint const &,float,float)\n" "    ofDrawCylinder(float,float)\n"); lua_error(L);return 0; }
static int _wrap_setConeResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetConeResolution",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetConeResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetConeResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetConeResolution",3,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetConeResolution(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setConeResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetConeResolution",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetConeResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetConeResolution",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetConeResolution(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setConeResolution(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_setConeResolution__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_setConeResolution__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setConeResolution'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetConeResolution(int,int,int)\n" "    ofSetConeResolution(int,int)\n"); lua_error(L);return 0; }
static int _wrap_getConeResolution(lua_State* L) { int SWIG_arg = 0; ofVec3f result;
  SWIG_check_num_args("ofGetConeResolution",0,0) result = ofGetConeResolution(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_drawCone__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofDrawCone",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCone",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCone",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawCone",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); ofDrawCone(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawCone__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawCone",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCone",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawCone",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawCone(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawCone__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawCone",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawCone",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawCone",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawCone",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofDrawCone((ofVec3f const &)*arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawCone__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawCone",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawCone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawCone",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawCone(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_drawCone(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_drawCone__SWIG_3(L);}
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_drawCone__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_drawCone__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_drawCone__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawCone'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawCone(float,float,float,float,float)\n" "    ofDrawCone(float,float,float,float)\n"
  "    ofDrawCone(ofPoint const &,float,float)\n" "    ofDrawCone(float,float)\n"); lua_error(L);return 0; }
static int _wrap_ofCone__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; SWIG_check_num_args("ofCone",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCone",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCone",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofCone",5,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); ofCone(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCone__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofCone",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCone",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofCone",4,"float"); arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); ofCone(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCone__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofCone",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofCone",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofCone",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("ofCone",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); ofCone((ofVec3f const &)*arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofCone__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; SWIG_check_num_args("ofCone",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofCone",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofCone",2,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); ofCone(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofCone(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_ofCone__SWIG_3(L);}  }
     }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_ofCone__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_ofCone__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_ofCone__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ofCone'\n" "  Possible C/C++ prototypes are:\n"
  "    ofCone(float,float,float,float,float)\n" "    ofCone(float,float,float,float)\n"
  "    ofCone(ofPoint const &,float,float)\n" "    ofCone(float,float)\n"); lua_error(L);return 0; }
static int _wrap_setBoxResolution__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofSetBoxResolution",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBoxResolution",1,"int");
  arg1 = (int)lua_tonumber(L, 1); ofSetBoxResolution(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setBoxResolution__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetBoxResolution",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetBoxResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetBoxResolution",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetBoxResolution",3,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetBoxResolution(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setBoxResolution(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_setBoxResolution__SWIG_0(L);}  }  if (argc == 3) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_setBoxResolution__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setBoxResolution'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetBoxResolution(int)\n" "    ofSetBoxResolution(int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_getBoxResolution(lua_State* L) { int SWIG_arg = 0; ofVec3f result;
  SWIG_check_num_args("ofGetBoxResolution",0,0) result = ofGetBoxResolution(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_drawBox__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  float arg5 ; float arg6 ; SWIG_check_num_args("ofDrawBox",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBox",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawBox",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofDrawBox",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofDrawBox",6,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6); ofDrawBox(arg1,arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBox__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawBox",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBox",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawBox",4,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawBox(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBox__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofDrawBox",4,4) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawBox",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofDrawBox",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawBox",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  ofDrawBox((ofVec3f const &)*arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBox__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofPoint *arg1 = 0 ; float arg2 ;
  SWIG_check_num_args("ofDrawBox",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawBox",1,"ofPoint const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawBox",1,SWIGTYPE_p_ofVec3f); } 
  arg2 = (float)lua_tonumber(L, 2); ofDrawBox((ofVec3f const &)*arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_drawBox__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawBox",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBox",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawBox(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBox__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofDrawBox",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawBox",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawBox",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawBox",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  ofDrawBox(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawBox(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_drawBox__SWIG_4(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_drawBox__SWIG_3(L);}  }  } 
  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_drawBox__SWIG_5(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_drawBox__SWIG_2(L);}  }  }  }  }  if (argc == 4) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_drawBox__SWIG_1(L);}  }  }  }  }  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_drawBox__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawBox'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawBox(float,float,float,float,float,float)\n" "    ofDrawBox(float,float,float,float)\n"
  "    ofDrawBox(ofPoint const &,float,float,float)\n" "    ofDrawBox(ofPoint const &,float)\n" "    ofDrawBox(float)\n"
  "    ofDrawBox(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_drawAxis(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawAxis",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawAxis",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawAxis(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawGrid__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; bool arg3 ; bool arg4 ;
  bool arg5 ; bool arg6 ; SWIG_check_num_args("ofDrawGrid",6,6) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"float"); if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGrid",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDrawGrid",4,"bool"); if(!lua_isboolean(L,5)) SWIG_fail_arg("ofDrawGrid",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofDrawGrid",6,"bool"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0); arg6 = (lua_toboolean(L, 6)!=0); ofDrawGrid(arg1,arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawGrid__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; bool arg3 ; bool arg4 ;
  bool arg5 ; SWIG_check_num_args("ofDrawGrid",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"float"); if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGrid",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDrawGrid",4,"bool"); if(!lua_isboolean(L,5)) SWIG_fail_arg("ofDrawGrid",5,"bool");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0); ofDrawGrid(arg1,arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawGrid__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; bool arg3 ; bool arg4 ;
  SWIG_check_num_args("ofDrawGrid",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"float"); if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGrid",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofDrawGrid",4,"bool"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (lua_toboolean(L, 3)!=0); arg4 = (lua_toboolean(L, 4)!=0);
  ofDrawGrid(arg1,arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawGrid__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; bool arg3 ;
  SWIG_check_num_args("ofDrawGrid",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"float"); if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGrid",3,"bool");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (lua_toboolean(L, 3)!=0);
  ofDrawGrid(arg1,arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawGrid__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawGrid",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGrid",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawGrid(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_drawGrid__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawGrid",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGrid",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawGrid(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawGrid__SWIG_6(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDrawGrid",0,0) ofDrawGrid();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawGrid(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_drawGrid__SWIG_6(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_drawGrid__SWIG_5(L);}  }  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_drawGrid__SWIG_4(L);}  }  }  if (argc == 3) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { return _wrap_drawGrid__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_drawGrid__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }
         if (_v) { { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_drawGrid__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { {
            _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { return _wrap_drawGrid__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawGrid'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawGrid(float,float,bool,bool,bool,bool)\n" "    ofDrawGrid(float,float,bool,bool,bool)\n"
  "    ofDrawGrid(float,float,bool,bool)\n" "    ofDrawGrid(float,float,bool)\n" "    ofDrawGrid(float,float)\n"
  "    ofDrawGrid(float)\n" "    ofDrawGrid()\n"); lua_error(L);return 0; }
static int _wrap_drawGridPlane__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; bool arg3 ;
  SWIG_check_num_args("ofDrawGridPlane",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGridPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGridPlane",2,"float");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofDrawGridPlane",3,"bool"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (lua_toboolean(L, 3)!=0); ofDrawGridPlane(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawGridPlane__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawGridPlane",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGridPlane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawGridPlane",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawGridPlane(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_drawGridPlane__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; SWIG_check_num_args("ofDrawGridPlane",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawGridPlane",1,"float"); arg1 = (float)lua_tonumber(L, 1); ofDrawGridPlane(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawGridPlane(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_drawGridPlane__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_drawGridPlane__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_drawGridPlane__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawGridPlane'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawGridPlane(float,float,bool)\n" "    ofDrawGridPlane(float,float)\n" "    ofDrawGridPlane(float)\n");
  lua_error(L);return 0; }
static int _wrap_drawArrow__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec3f *arg2 = 0 ; float arg3 ;
  SWIG_check_num_args("ofDrawArrow",3,3) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawArrow",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawArrow",2,"ofVec3f const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawArrow",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawArrow",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawArrow",2,SWIGTYPE_p_ofVec3f); } 
  arg3 = (float)lua_tonumber(L, 3); ofDrawArrow((ofVec3f const &)*arg1,(ofVec3f const &)*arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawArrow__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVec3f *arg1 = 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofDrawArrow",2,2) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofDrawArrow",1,"ofVec3f const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofDrawArrow",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawArrow",1,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("drawArrow",2,SWIGTYPE_p_ofVec3f); } 
  ofDrawArrow((ofVec3f const &)*arg1,(ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_drawArrow(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_drawArrow__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_drawArrow__SWIG_0(L);}  }  }  }
   SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawArrow'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawArrow(ofVec3f const &,ofVec3f const &,float)\n" "    ofDrawArrow(ofVec3f const &,ofVec3f const &)\n");
  lua_error(L);return 0; }
static int _wrap_drawRotationAxes__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ;
  SWIG_check_num_args("ofDrawRotationAxes",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRotationAxes",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRotationAxes",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofDrawRotationAxes",3,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofDrawRotationAxes(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_drawRotationAxes__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ;
  SWIG_check_num_args("ofDrawRotationAxes",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRotationAxes",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofDrawRotationAxes",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); ofDrawRotationAxes(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_drawRotationAxes__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ;
  SWIG_check_num_args("ofDrawRotationAxes",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofDrawRotationAxes",1,"float");
  arg1 = (float)lua_tonumber(L, 1); ofDrawRotationAxes(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_drawRotationAxes(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_drawRotationAxes__SWIG_2(L);}  }  if (argc == 2) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_drawRotationAxes__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_drawRotationAxes__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'drawRotationAxes'\n" "  Possible C/C++ prototypes are:\n"
  "    ofDrawRotationAxes(float,float,int)\n" "    ofDrawRotationAxes(float,float)\n" "    ofDrawRotationAxes(float)\n");
  lua_error(L);return 0; }
static int _wrap_new_Node(lua_State* L) { int SWIG_arg = 0; ofNode *result = 0 ; SWIG_check_num_args("ofNode::ofNode",0,0)
  result = (ofNode *)new ofNode(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofNode,1); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setParent__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *arg2 = 0 ;
  bool arg3 ; SWIG_check_num_args("ofNode::setParent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setParent",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setParent",2,"ofNode &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofNode::setParent",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_setParent",1,SWIGTYPE_p_ofNode); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setParent",2,SWIGTYPE_p_ofNode); }  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->setParent(*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setParent__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *arg2 = 0 ;
  SWIG_check_num_args("ofNode::setParent",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setParent",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setParent",2,"ofNode &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_setParent",1,SWIGTYPE_p_ofNode); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setParent",2,SWIGTYPE_p_ofNode); }  (arg1)->setParent(*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_setParent(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_setParent__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) { return _wrap_Node_setParent__SWIG_0(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_setParent'\n"
  "  Possible C/C++ prototypes are:\n" "    ofNode::setParent(ofNode &,bool)\n" "    ofNode::setParent(ofNode &)\n");
  lua_error(L);return 0; }
static int _wrap_Node_clearParent__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofNode::clearParent",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::clearParent",1,"ofNode *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofNode::clearParent",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_clearParent",1,SWIGTYPE_p_ofNode); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->clearParent(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_clearParent__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::clearParent",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::clearParent",1,"ofNode *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_clearParent",1,SWIGTYPE_p_ofNode); }  (arg1)->clearParent(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_clearParent(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Node_clearParent__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_Node_clearParent__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_clearParent'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::clearParent(bool)\n" "    ofNode::clearParent()\n"); lua_error(L);return 0; }
static int _wrap_Node_getParent(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *result = 0 ;
  SWIG_check_num_args("ofNode::getParent",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getParent",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getParent",1,SWIGTYPE_p_ofNode); }
   result = (ofNode *)((ofNode const *)arg1)->getParent(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofNode,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_getPosition(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getPosition",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getPosition",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getPosition(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getX(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getX",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getX",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getX",1,SWIGTYPE_p_ofNode); } 
  result = (float)((ofNode const *)arg1)->getX(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_getY(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getY",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getY",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getY",1,SWIGTYPE_p_ofNode); } 
  result = (float)((ofNode const *)arg1)->getY(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_getZ(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getZ",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getZ",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getZ",1,SWIGTYPE_p_ofNode); } 
  result = (float)((ofNode const *)arg1)->getZ(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_getXAxis(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getXAxis",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getXAxis",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getXAxis",1,SWIGTYPE_p_ofNode); }
   result = ((ofNode const *)arg1)->getXAxis(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getYAxis(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getYAxis",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getYAxis",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getYAxis",1,SWIGTYPE_p_ofNode); }
   result = ((ofNode const *)arg1)->getYAxis(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getZAxis(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getZAxis",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getZAxis",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getZAxis",1,SWIGTYPE_p_ofNode); }
   result = ((ofNode const *)arg1)->getZAxis(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getSideDir(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getSideDir",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getSideDir",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getSideDir",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getSideDir(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getLookAtDir(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getLookAtDir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getLookAtDir",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getLookAtDir",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getLookAtDir(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getUpDir(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getUpDir",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getUpDir",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getUpDir",1,SWIGTYPE_p_ofNode); }
   result = ((ofNode const *)arg1)->getUpDir(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getPitch(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getPitch",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getPitch",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getPitch",1,SWIGTYPE_p_ofNode); }
   result = (float)((ofNode const *)arg1)->getPitch(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_getHeading(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getHeading",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getHeading",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getHeading",1,SWIGTYPE_p_ofNode); }  result = (float)((ofNode const *)arg1)->getHeading();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_getRoll(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float result;
  SWIG_check_num_args("ofNode::getRoll",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getRoll",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getRoll",1,SWIGTYPE_p_ofNode); } 
  result = (float)((ofNode const *)arg1)->getRoll(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_getOrientationQuat(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofQuaternion result;
  SWIG_check_num_args("ofNode::getOrientationQuat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getOrientationQuat",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getOrientationQuat",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getOrientationQuat(); {
    ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getOrientationEuler(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getOrientationEuler",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getOrientationEuler",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getOrientationEuler",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getOrientationEuler(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getScale(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getScale",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getScale",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_getScale",1,SWIGTYPE_p_ofNode); }
   result = ((ofNode const *)arg1)->getScale(); { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getLocalTransformMatrix(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofNode::getLocalTransformMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getLocalTransformMatrix",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getLocalTransformMatrix",1,SWIGTYPE_p_ofNode); } 
  result = (ofMatrix4x4 *) &((ofNode const *)arg1)->getLocalTransformMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Node_getGlobalTransformMatrix(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofMatrix4x4 result; SWIG_check_num_args("ofNode::getGlobalTransformMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getGlobalTransformMatrix",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getGlobalTransformMatrix",1,SWIGTYPE_p_ofNode); } 
  result = ((ofNode const *)arg1)->getGlobalTransformMatrix(); {
    ofMatrix4x4 * resultptr = new ofMatrix4x4((const ofMatrix4x4 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMatrix4x4,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getGlobalPosition(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getGlobalPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getGlobalPosition",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getGlobalPosition",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getGlobalPosition(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getGlobalOrientation(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofQuaternion result;
  SWIG_check_num_args("ofNode::getGlobalOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getGlobalOrientation",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getGlobalOrientation",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getGlobalOrientation();
  { ofQuaternion * resultptr = new ofQuaternion((const ofQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofQuaternion,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_getGlobalScale(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofNode::getGlobalScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::getGlobalScale",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_getGlobalScale",1,SWIGTYPE_p_ofNode); }  result = ((ofNode const *)arg1)->getGlobalScale(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_setTransformMatrix(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofMatrix4x4 *arg2 = 0 ;
  SWIG_check_num_args("ofNode::setTransformMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setTransformMatrix",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setTransformMatrix",2,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setTransformMatrix",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Node_setTransformMatrix",2,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->setTransformMatrix((ofMatrix4x4 const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Node_setPosition__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofNode::setPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setPosition",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::setPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::setPosition",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::setPosition",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setPosition",1,SWIGTYPE_p_ofNode); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setPosition(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setPosition__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofNode::setPosition",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setPosition",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setPosition",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setPosition",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Node_setPosition",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setPosition((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setPosition(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_setPosition__SWIG_1(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Node_setPosition__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_setPosition'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::setPosition(float,float,float)\n" "    ofNode::setPosition(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Node_setGlobalPosition__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofNode::setGlobalPosition",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setGlobalPosition",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::setGlobalPosition",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::setGlobalPosition",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::setGlobalPosition",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setGlobalPosition",1,SWIGTYPE_p_ofNode); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setGlobalPosition(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setGlobalPosition__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofVec3f *arg2 = 0 ; SWIG_check_num_args("ofNode::setGlobalPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setGlobalPosition",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setGlobalPosition",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setGlobalPosition",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Node_setGlobalPosition",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setGlobalPosition((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setGlobalPosition(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_setGlobalPosition__SWIG_1(L);}  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Node_setGlobalPosition__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_setGlobalPosition'\n"
  "  Possible C/C++ prototypes are:\n" "    ofNode::setGlobalPosition(float,float,float)\n"
  "    ofNode::setGlobalPosition(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Node_setOrientation__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofNode::setOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setOrientation",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setOrientation",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setOrientation",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Node_setOrientation",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->setOrientation((ofQuaternion const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setOrientation__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofNode::setOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setOrientation",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setOrientation",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setOrientation",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Node_setOrientation",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setOrientation((ofVec3f const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setOrientation(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_setOrientation__SWIG_0(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_setOrientation__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_setOrientation'\n"
  "  Possible C/C++ prototypes are:\n" "    ofNode::setOrientation(ofQuaternion const &)\n"
  "    ofNode::setOrientation(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Node_setGlobalOrientation(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ; SWIG_check_num_args("ofNode::setGlobalOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setGlobalOrientation",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setGlobalOrientation",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_setGlobalOrientation",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Node_setGlobalOrientation",2,SWIGTYPE_p_ofQuaternion); } 
  (arg1)->setGlobalOrientation((ofQuaternion const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Node_setScale__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::setScale",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setScale",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::setScale",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_setScale",1,SWIGTYPE_p_ofNode); }
   arg2 = (float)lua_tonumber(L, 2); (arg1)->setScale(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Node_setScale__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofNode::setScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setScale",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::setScale",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::setScale",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::setScale",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_setScale",1,SWIGTYPE_p_ofNode); }
   arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setScale(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setScale__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofNode::setScale",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::setScale",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::setScale",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_setScale",1,SWIGTYPE_p_ofNode); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Node_setScale",2,SWIGTYPE_p_ofVec3f); }  (arg1)->setScale((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_setScale(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_setScale__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Node_setScale__SWIG_0(L);}  }  } 
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Node_setScale__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_setScale'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::setScale(float)\n" "    ofNode::setScale(float,float,float)\n" "    ofNode::setScale(ofVec3f const &)\n");
  lua_error(L);return 0; }
static int _wrap_Node_move__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofNode::move",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::move",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::move",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::move",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::move",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_move",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->move(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_move__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofNode::move",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::move",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::move",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_move",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Node_move",2,SWIGTYPE_p_ofVec3f); } 
  (arg1)->move((ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_move(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_move__SWIG_1(L);}  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Node_move__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_move'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::move(float,float,float)\n" "    ofNode::move(ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Node_truck(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::truck",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::truck",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::truck",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_truck",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->truck(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_boom(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::boom",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::boom",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::boom",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_boom",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->boom(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_dolly(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::dolly",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::dolly",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::dolly",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_dolly",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->dolly(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_tilt(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::tilt",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::tilt",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::tilt",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_tilt",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->tilt(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_pan(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::pan",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::pan",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::pan",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_pan",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->pan(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_roll(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  SWIG_check_num_args("ofNode::roll",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::roll",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::roll",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_roll",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); (arg1)->roll(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_rotate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofQuaternion *arg2 = 0 ;
  SWIG_check_num_args("ofNode::rotate",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotate",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::rotate",2,"ofQuaternion const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_rotate",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Node_rotate",2,SWIGTYPE_p_ofQuaternion); }  (arg1)->rotate((ofQuaternion const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_rotate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofNode::rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotate",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::rotate",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_rotate",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Node_rotate",3,SWIGTYPE_p_ofVec3f); }  (arg1)->rotate(arg2,(ofVec3f const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_rotate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofNode::rotate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotate",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::rotate",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofNode::rotate",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_rotate",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->rotate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Node_rotate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_rotate__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Node_rotate__SWIG_1(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Node_rotate__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_rotate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::rotate(ofQuaternion const &)\n" "    ofNode::rotate(float,ofVec3f const &)\n"
  "    ofNode::rotate(float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Node_rotateAround__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  ofQuaternion *arg2 = 0 ; ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofNode::rotateAround",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotateAround",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::rotateAround",2,"ofQuaternion const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::rotateAround",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_rotateAround",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofQuaternion,0))){
    SWIG_fail_ptr("Node_rotateAround",2,SWIGTYPE_p_ofQuaternion); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Node_rotateAround",3,SWIGTYPE_p_ofVec3f); } 
  (arg1)->rotateAround((ofQuaternion const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_rotateAround__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ;
  ofVec3f *arg3 = 0 ; ofVec3f *arg4 = 0 ; SWIG_check_num_args("ofNode::rotateAround",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::rotateAround",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::rotateAround",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::rotateAround",3,"ofVec3f const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofNode::rotateAround",4,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_rotateAround",1,SWIGTYPE_p_ofNode); }  arg2 = (float)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Node_rotateAround",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Node_rotateAround",4,SWIGTYPE_p_ofVec3f); } 
  (arg1)->rotateAround(arg2,(ofVec3f const &)*arg3,(ofVec3f const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_rotateAround(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofQuaternion, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Node_rotateAround__SWIG_0(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Node_rotateAround__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_rotateAround'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::rotateAround(ofQuaternion const &,ofVec3f const &)\n"
  "    ofNode::rotateAround(float,ofVec3f const &,ofVec3f const &)\n"); lua_error(L);return 0; }
static int _wrap_Node_lookAt__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  ofVec3f arg3 ; ofVec3f *argp3 ; SWIG_check_num_args("ofNode::lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::lookAt",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::lookAt",2,"ofVec3f const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::lookAt",3,"ofVec3f");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_lookAt",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Node_lookAt",2,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Node_lookAt",3,SWIGTYPE_p_ofVec3f); }  arg3 = *argp3; (arg1)->lookAt((ofVec3f const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_lookAt__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofNode::lookAt",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::lookAt",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::lookAt",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_lookAt",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Node_lookAt",2,SWIGTYPE_p_ofVec3f); }
   (arg1)->lookAt((ofVec3f const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_lookAt__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *arg2 = 0 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofNode::lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::lookAt",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::lookAt",2,"ofNode const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofNode::lookAt",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_lookAt",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_lookAt",2,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Node_lookAt",3,SWIGTYPE_p_ofVec3f); }
   (arg1)->lookAt((ofNode const &)*arg2,(ofVec3f const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Node_lookAt__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; ofNode *arg2 = 0 ;
  SWIG_check_num_args("ofNode::lookAt",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::lookAt",1,"ofNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofNode::lookAt",2,"ofNode const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_lookAt",1,SWIGTYPE_p_ofNode); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_lookAt",2,SWIGTYPE_p_ofNode); } 
  (arg1)->lookAt((ofNode const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_lookAt(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_lookAt__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Node_lookAt__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Node_lookAt__SWIG_2(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Node_lookAt__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_lookAt'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::lookAt(ofVec3f const &,ofVec3f)\n" "    ofNode::lookAt(ofVec3f const &)\n"
  "    ofNode::lookAt(ofNode const &,ofVec3f const &)\n" "    ofNode::lookAt(ofNode const &)\n"); lua_error(L);return 0; }
static int _wrap_Node_orbit__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; ofVec3f *arg5 = 0 ; SWIG_check_num_args("ofNode::orbit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::orbit",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::orbit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::orbit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::orbit",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofNode::orbit",5,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_orbit",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Node_orbit",5,SWIGTYPE_p_ofVec3f); } 
  (arg1)->orbit(arg2,arg3,arg4,(ofVec3f const &)*arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_orbit__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; SWIG_check_num_args("ofNode::orbit",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::orbit",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::orbit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::orbit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::orbit",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_orbit",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->orbit(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_orbit__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; ofNode *arg5 = 0 ; SWIG_check_num_args("ofNode::orbit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::orbit",1,"ofNode *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofNode::orbit",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofNode::orbit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofNode::orbit",4,"float");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofNode::orbit",5,"ofNode &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_orbit",1,SWIGTYPE_p_ofNode); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_orbit",5,SWIGTYPE_p_ofNode); } 
  (arg1)->orbit(arg2,arg3,arg4,*arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_orbit(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Node_orbit__SWIG_1(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { return _wrap_Node_orbit__SWIG_0(L);}  }  }  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofNode, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { return _wrap_Node_orbit__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_orbit'\n" "  Possible C/C++ prototypes are:\n"
  "    ofNode::orbit(float,float,float,ofVec3f const &)\n" "    ofNode::orbit(float,float,float)\n"
  "    ofNode::orbit(float,float,float,ofNode &)\n"); lua_error(L);return 0; }
static int _wrap_Node_transformGL(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::transformGL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::transformGL",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_transformGL",1,SWIGTYPE_p_ofNode); }  ((ofNode const *)arg1)->transformGL(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_restoreTransformGL(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::restoreTransformGL",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::restoreTransformGL",1,"ofNode const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_restoreTransformGL",1,SWIGTYPE_p_ofNode); }  ((ofNode const *)arg1)->restoreTransformGL();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_resetTransform(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::resetTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::resetTransform",1,"ofNode *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_resetTransform",1,SWIGTYPE_p_ofNode); }  (arg1)->resetTransform(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Node_customDraw(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::customDraw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::customDraw",1,"ofNode *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){
    SWIG_fail_ptr("Node_customDraw",1,SWIGTYPE_p_ofNode); }  (arg1)->customDraw(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Node_draw(lua_State* L) { int SWIG_arg = 0; ofNode *arg1 = (ofNode *) 0 ;
  SWIG_check_num_args("ofNode::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofNode::draw",1,"ofNode *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofNode,0))){ SWIG_fail_ptr("Node_draw",1,SWIGTYPE_p_ofNode); } 
  (arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Node(void *obj) {
ofNode *arg1 = (ofNode *) obj;
delete arg1;
}
static swig_lua_method swig_ofNode_methods[] = {
    {"setParent", _wrap_Node_setParent}, 
    {"clearParent", _wrap_Node_clearParent}, 
    {"getParent", _wrap_Node_getParent}, 
    {"getPosition", _wrap_Node_getPosition}, 
    {"getX", _wrap_Node_getX}, 
    {"getY", _wrap_Node_getY}, 
    {"getZ", _wrap_Node_getZ}, 
    {"getXAxis", _wrap_Node_getXAxis}, 
    {"getYAxis", _wrap_Node_getYAxis}, 
    {"getZAxis", _wrap_Node_getZAxis}, 
    {"getSideDir", _wrap_Node_getSideDir}, 
    {"getLookAtDir", _wrap_Node_getLookAtDir}, 
    {"getUpDir", _wrap_Node_getUpDir}, 
    {"getPitch", _wrap_Node_getPitch}, 
    {"getHeading", _wrap_Node_getHeading}, 
    {"getRoll", _wrap_Node_getRoll}, 
    {"getOrientationQuat", _wrap_Node_getOrientationQuat}, 
    {"getOrientationEuler", _wrap_Node_getOrientationEuler}, 
    {"getScale", _wrap_Node_getScale}, 
    {"getLocalTransformMatrix", _wrap_Node_getLocalTransformMatrix}, 
    {"getGlobalTransformMatrix", _wrap_Node_getGlobalTransformMatrix}, 
    {"getGlobalPosition", _wrap_Node_getGlobalPosition}, 
    {"getGlobalOrientation", _wrap_Node_getGlobalOrientation}, 
    {"getGlobalScale", _wrap_Node_getGlobalScale}, 
    {"setTransformMatrix", _wrap_Node_setTransformMatrix}, 
    {"setPosition", _wrap_Node_setPosition}, 
    {"setGlobalPosition", _wrap_Node_setGlobalPosition}, 
    {"setOrientation", _wrap_Node_setOrientation}, 
    {"setGlobalOrientation", _wrap_Node_setGlobalOrientation}, 
    {"setScale", _wrap_Node_setScale}, 
    {"move", _wrap_Node_move}, 
    {"truck", _wrap_Node_truck}, 
    {"boom", _wrap_Node_boom}, 
    {"dolly", _wrap_Node_dolly}, 
    {"tilt", _wrap_Node_tilt}, 
    {"pan", _wrap_Node_pan}, 
    {"roll", _wrap_Node_roll}, 
    {"rotate", _wrap_Node_rotate}, 
    {"rotateAround", _wrap_Node_rotateAround}, 
    {"lookAt", _wrap_Node_lookAt}, 
    {"orbit", _wrap_Node_orbit}, 
    {"transformGL", _wrap_Node_transformGL}, 
    {"restoreTransformGL", _wrap_Node_restoreTransformGL}, 
    {"resetTransform", _wrap_Node_resetTransform}, 
    {"customDraw", _wrap_Node_customDraw}, 
    {"draw", _wrap_Node_draw}, 
    {0,0}
};
static swig_lua_attribute swig_ofNode_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofNode_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofNode_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofNode_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofNode_bases[] = {0};
static const char *swig_ofNode_base_names[] = {0};
static swig_lua_class _wrap_class_ofNode = { "Node", &SWIGTYPE_p_ofNode,_wrap_new_Node, swig_delete_Node, swig_ofNode_methods, swig_ofNode_attributes, { "Node", swig_ofNode_cls_methods, swig_ofNode_cls_attributes, swig_ofNode_cls_constants }, swig_ofNode_bases, swig_ofNode_base_names };

static int _wrap_new_Mesh__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *result = 0 ;
  SWIG_check_num_args("ofMesh::ofMesh",0,0) result = (ofMesh *)new ofMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Mesh__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPrimitiveMode arg1 ; std::vector< ofVec3f > *arg2 = 0 ;
  ofPrimitiveMode *argp1 ; ofMesh *result = 0 ; SWIG_check_num_args("ofMesh::ofMesh",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofMesh::ofMesh",1,"ofPrimitiveMode");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::ofMesh",2,"std::vector< ofVec3f > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("new_Mesh",1,SWIGTYPE_p_ofPrimitiveMode); }  arg1 = *argp1;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("new_Mesh",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  result = (ofMesh *)new ofMesh(arg1,(std::vector< ofVec3f > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Mesh(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Mesh__SWIG_0(L);}  if (argc == 2) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Mesh__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Mesh'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::ofMesh()\n" "    ofMesh::ofMesh(ofPrimitiveMode,std::vector< ofVec3f > const &)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_setMode(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofPrimitiveMode arg2 ;
  ofPrimitiveMode *argp2 ; SWIG_check_num_args("ofMesh::setMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setMode",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setMode",2,"ofPrimitiveMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_setMode",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("Mesh_setMode",2,SWIGTYPE_p_ofPrimitiveMode); }  arg2 = *argp2; (arg1)->setMode(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getMode(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofPrimitiveMode result;
  SWIG_check_num_args("ofMesh::getMode",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getMode",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_getMode",1,SWIGTYPE_p_ofMesh); } 
  result = ((ofMesh const *)arg1)->getMode(); {
    ofPrimitiveMode * resultptr = new ofPrimitiveMode((const ofPrimitiveMode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPrimitiveMode,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_clear(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clear",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_clear",1,SWIGTYPE_p_ofMesh); } 
  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_setupIndicesAuto(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::setupIndicesAuto",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setupIndicesAuto",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_setupIndicesAuto",1,SWIGTYPE_p_ofMesh); }  (arg1)->setupIndicesAuto(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getVertex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; ofVec3f result; SWIG_check_num_args("ofMesh::getVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVertex",1,"ofMesh const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::getVertex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_getVertex",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_getVertex",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; result = ((ofMesh const *)arg1)->getVertex(arg2);
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addVertex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::addVertex",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addVertex",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addVertex",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_addVertex",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Mesh_addVertex",2,SWIGTYPE_p_ofVec3f); }  (arg1)->addVertex((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addVertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addVertices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addVertices",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addVertices",2,"std::vector< ofVec3f > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addVertices",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("Mesh_addVertices",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  (arg1)->addVertices((std::vector< ofVec3f > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_addVertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; SWIG_check_num_args("ofMesh::addVertices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addVertices",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addVertices",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addVertices",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addVertices",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Mesh_addVertices",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addVertices((ofVec3f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addVertices(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_addVertices__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Mesh_addVertices__SWIG_1(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_addVertices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::addVertices(std::vector< ofVec3f > const &)\n"
  "    ofMesh::addVertices(ofVec3f const *,int)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_removeVertex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::removeVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeVertex",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::removeVertex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_removeVertex",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_removeVertex",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; (arg1)->removeVertex(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_setVertex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofVec3f *arg3 = 0 ; ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::setVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setVertex",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setVertex",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::setVertex",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_setVertex",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_setVertex",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Mesh_setVertex",3,SWIGTYPE_p_ofVec3f); }  (arg1)->setVertex(arg2,(ofVec3f const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_clearVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearVertices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearVertices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_clearVertices",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearVertices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getNormal(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; ofVec3f result; SWIG_check_num_args("ofMesh::getNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormal",1,"ofMesh const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::getNormal",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_getNormal",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_getNormal",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; result = ((ofMesh const *)arg1)->getNormal(arg2);
  { ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addNormal(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofVec3f *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::addNormal",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addNormal",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addNormal",2,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_addNormal",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Mesh_addNormal",2,SWIGTYPE_p_ofVec3f); }  (arg1)->addNormal((ofVec3f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addNormals__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addNormals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addNormals",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addNormals",2,"std::vector< ofVec3f > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addNormals",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec3f_t,0))){
    SWIG_fail_ptr("Mesh_addNormals",2,SWIGTYPE_p_std__vectorT_ofVec3f_t); } 
  (arg1)->addNormals((std::vector< ofVec3f > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_addNormals__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; SWIG_check_num_args("ofMesh::addNormals",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addNormals",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addNormals",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addNormals",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addNormals",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Mesh_addNormals",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addNormals((ofVec3f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addNormals(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec3f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_addNormals__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Mesh_addNormals__SWIG_1(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_addNormals'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::addNormals(std::vector< ofVec3f > const &)\n"
  "    ofMesh::addNormals(ofVec3f const *,int)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_removeNormal(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::removeNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeNormal",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::removeNormal",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_removeNormal",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_removeNormal",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; (arg1)->removeNormal(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_setNormal(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofVec3f *arg3 = 0 ; ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::setNormal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setNormal",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setNormal",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::setNormal",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_setNormal",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_setNormal",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Mesh_setNormal",3,SWIGTYPE_p_ofVec3f); }  (arg1)->setNormal(arg2,(ofVec3f const &)*arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_clearNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearNormals",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_clearNormals",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearNormals(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getColor(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; SwigValueWrapper< ofColor_< float > > result; SWIG_check_num_args("ofMesh::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColor",1,"ofMesh const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::getColor",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_getColor",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_getColor",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; result = ((ofMesh const *)arg1)->getColor(arg2); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addColor(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofFloatColor *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::addColor",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addColor",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addColor",2,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_addColor",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Mesh_addColor",2,SWIGTYPE_p_ofColor_T_float_t); }  (arg1)->addColor((ofFloatColor const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addColors__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofFloatColor > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addColors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addColors",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addColors",2,"std::vector< ofFloatColor > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_addColors",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t,0))){
    SWIG_fail_ptr("Mesh_addColors",2,SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t); } 
  (arg1)->addColors((std::vector< ofFloatColor > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_addColors__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofFloatColor *arg2 = (ofFloatColor *) 0 ; int arg3 ; SWIG_check_num_args("ofMesh::addColors",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addColors",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addColors",2,"ofFloatColor const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addColors",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_addColors",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Mesh_addColors",2,SWIGTYPE_p_ofColor_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addColors((ofFloatColor const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addColors(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_addColors__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Mesh_addColors__SWIG_1(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_addColors'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::addColors(std::vector< ofFloatColor > const &)\n" "    ofMesh::addColors(ofFloatColor const *,int)\n");
  lua_error(L);return 0; }
static int _wrap_Mesh_removeColor(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::removeColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeColor",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::removeColor",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_removeColor",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_removeColor",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; (arg1)->removeColor(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_setColor(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofFloatColor *arg3 = 0 ; ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setColor",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setColor",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::setColor",3,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_setColor",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_setColor",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Mesh_setColor",3,SWIGTYPE_p_ofColor_T_float_t); }  (arg1)->setColor(arg2,(ofFloatColor const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_clearColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearColors",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_clearColors",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearColors(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getTexCoord(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; ofVec2f result; SWIG_check_num_args("ofMesh::getTexCoord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoord",1,"ofMesh const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::getTexCoord",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getTexCoord",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_getTexCoord",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2;
  result = ((ofMesh const *)arg1)->getTexCoord(arg2); { ofVec2f * resultptr = new ofVec2f((const ofVec2f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec2f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addTexCoord(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofVec2f *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::addTexCoord",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addTexCoord",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addTexCoord",2,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addTexCoord",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Mesh_addTexCoord",2,SWIGTYPE_p_ofVec2f); }  (arg1)->addTexCoord((ofVec2f const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addTexCoords__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec2f > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addTexCoords",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addTexCoords",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addTexCoords",2,"std::vector< ofVec2f > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addTexCoords",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofVec2f_t,0))){
    SWIG_fail_ptr("Mesh_addTexCoords",2,SWIGTYPE_p_std__vectorT_ofVec2f_t); } 
  (arg1)->addTexCoords((std::vector< ofVec2f > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_addTexCoords__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; SWIG_check_num_args("ofMesh::addTexCoords",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addTexCoords",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addTexCoords",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addTexCoords",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addTexCoords",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Mesh_addTexCoords",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addTexCoords((ofVec2f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addTexCoords(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofVec2f_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_addTexCoords__SWIG_0(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Mesh_addTexCoords__SWIG_1(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_addTexCoords'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::addTexCoords(std::vector< ofVec2f > const &)\n"
  "    ofMesh::addTexCoords(ofVec2f const *,int)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_removeTexCoord(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::removeTexCoord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeTexCoord",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::removeTexCoord",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_removeTexCoord",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_removeTexCoord",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; (arg1)->removeTexCoord(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_setTexCoord(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofVec2f *arg3 = 0 ; ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::setTexCoord",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setTexCoord",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setTexCoord",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::setTexCoord",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_setTexCoord",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_setTexCoord",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Mesh_setTexCoord",3,SWIGTYPE_p_ofVec2f); }  (arg1)->setTexCoord(arg2,(ofVec2f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_clearTexCoords(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearTexCoords",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_clearTexCoords",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearTexCoords(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getIndex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; ofIndexType result; SWIG_check_num_args("ofMesh::getIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndex",1,"ofMesh const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::getIndex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_getIndex",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_getIndex",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; result = ((ofMesh const *)arg1)->getIndex(arg2); {
    ofIndexType * resultptr = new ofIndexType((const ofIndexType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TESSindex,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addIndex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::addIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addIndex",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addIndex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_addIndex",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_addIndex",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; (arg1)->addIndex(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addIndices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofIndexType > *arg2 = 0 ; SWIG_check_num_args("ofMesh::addIndices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addIndices",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addIndices",2,"std::vector< ofIndexType > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addIndices",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_TESSindex_t,0))){
    SWIG_fail_ptr("Mesh_addIndices",2,SWIGTYPE_p_std__vectorT_TESSindex_t); } 
  (arg1)->addIndices((std::vector< ofIndexType > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_addIndices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType *arg2 = (ofIndexType *) 0 ; int arg3 ; SWIG_check_num_args("ofMesh::addIndices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addIndices",1,"ofMesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofMesh::addIndices",2,"ofIndexType const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::addIndices",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addIndices",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_addIndices",2,SWIGTYPE_p_TESSindex); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->addIndices((ofIndexType const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addIndices(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_TESSindex_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_addIndices__SWIG_0(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TESSindex, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Mesh_addIndices__SWIG_1(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_addIndices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::addIndices(std::vector< ofIndexType > const &)\n"
  "    ofMesh::addIndices(ofIndexType const *,int)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_removeIndex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType *argp2 ; SWIG_check_num_args("ofMesh::removeIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::removeIndex",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::removeIndex",2,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_removeIndex",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_removeIndex",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2; (arg1)->removeIndex(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_setIndex(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType arg3 ; ofIndexType *argp2 ; ofIndexType *argp3 ; SWIG_check_num_args("ofMesh::setIndex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setIndex",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setIndex",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::setIndex",3,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_setIndex",1,SWIGTYPE_p_ofMesh); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_setIndex",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_setIndex",3,SWIGTYPE_p_TESSindex); }  arg3 = *argp3; (arg1)->setIndex(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_clearIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::clearIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::clearIndices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_clearIndices",1,SWIGTYPE_p_ofMesh); }  (arg1)->clearIndices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_addTriangle(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofIndexType arg2 ;
  ofIndexType arg3 ; ofIndexType arg4 ; ofIndexType *argp2 ; ofIndexType *argp3 ; ofIndexType *argp4 ;
  SWIG_check_num_args("ofMesh::addTriangle",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::addTriangle",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::addTriangle",2,"ofIndexType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::addTriangle",3,"ofIndexType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMesh::addTriangle",4,"ofIndexType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_addTriangle",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_addTriangle",2,SWIGTYPE_p_TESSindex); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_addTriangle",3,SWIGTYPE_p_TESSindex); }  arg3 = *argp3;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Mesh_addTriangle",4,SWIGTYPE_p_TESSindex); }  arg4 = *argp4; (arg1)->addTriangle(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getNumVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; int result;
  SWIG_check_num_args("ofMesh::getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumVertices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getNumVertices",1,SWIGTYPE_p_ofMesh); }  result = (int)((ofMesh const *)arg1)->getNumVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getNumColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; int result;
  SWIG_check_num_args("ofMesh::getNumColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumColors",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getNumColors",1,SWIGTYPE_p_ofMesh); }  result = (int)((ofMesh const *)arg1)->getNumColors();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getNumNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; int result;
  SWIG_check_num_args("ofMesh::getNumNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getNumNormals",1,SWIGTYPE_p_ofMesh); }  result = (int)((ofMesh const *)arg1)->getNumNormals();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getNumTexCoords(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; int result;
  SWIG_check_num_args("ofMesh::getNumTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumTexCoords",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getNumTexCoords",1,SWIGTYPE_p_ofMesh); }  result = (int)((ofMesh const *)arg1)->getNumTexCoords();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getNumIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; int result;
  SWIG_check_num_args("ofMesh::getNumIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNumIndices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getNumIndices",1,SWIGTYPE_p_ofMesh); }  result = (int)((ofMesh const *)arg1)->getNumIndices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getVerticesPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMesh::getVerticesPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVerticesPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getVerticesPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofVec3f *)(arg1)->getVerticesPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_getColorsPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofFloatColor *result = 0 ; SWIG_check_num_args("ofMesh::getColorsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColorsPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getColorsPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofFloatColor *)(arg1)->getColorsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getNormalsPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMesh::getNormalsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormalsPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getNormalsPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofVec3f *)(arg1)->getNormalsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_getTexCoordsPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofMesh::getTexCoordsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoordsPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getTexCoordsPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofVec2f *)(arg1)->getTexCoordsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_getIndexPointer__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType *result = 0 ; SWIG_check_num_args("ofMesh::getIndexPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndexPointer",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getIndexPointer",1,SWIGTYPE_p_ofMesh); }  result = (ofIndexType *)(arg1)->getIndexPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TESSindex,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_getVerticesPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMesh::getVerticesPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVerticesPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getVerticesPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofVec3f *)((ofMesh const *)arg1)->getVerticesPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_getVerticesPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getVerticesPointer__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getVerticesPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getVerticesPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getVerticesPointer()\n" "    ofMesh::getVerticesPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_Mesh_getColorsPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofFloatColor *result = 0 ; SWIG_check_num_args("ofMesh::getColorsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColorsPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getColorsPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofFloatColor *)((ofMesh const *)arg1)->getColorsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getColorsPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getColorsPointer__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getColorsPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getColorsPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getColorsPointer()\n" "    ofMesh::getColorsPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_Mesh_getNormalsPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMesh::getNormalsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormalsPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getNormalsPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofVec3f *)((ofMesh const *)arg1)->getNormalsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_getNormalsPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getNormalsPointer__SWIG_0(L);}  }  if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getNormalsPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getNormalsPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getNormalsPointer()\n" "    ofMesh::getNormalsPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_Mesh_getTexCoordsPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofMesh::getTexCoordsPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoordsPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getTexCoordsPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofVec2f *)((ofMesh const *)arg1)->getTexCoordsPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_getTexCoordsPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getTexCoordsPointer__SWIG_0(L);}  }  if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getTexCoordsPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getTexCoordsPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getTexCoordsPointer()\n" "    ofMesh::getTexCoordsPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_Mesh_getIndexPointer__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  ofIndexType *result = 0 ; SWIG_check_num_args("ofMesh::getIndexPointer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndexPointer",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getIndexPointer",1,SWIGTYPE_p_ofMesh); } 
  result = (ofIndexType *)((ofMesh const *)arg1)->getIndexPointer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TESSindex,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_getIndexPointer(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getIndexPointer__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getIndexPointer__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getIndexPointer'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getIndexPointer()\n" "    ofMesh::getIndexPointer() const\n");
  lua_error(L);return 0; }
static int _wrap_Mesh_getVertices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *result = 0 ; SWIG_check_num_args("ofMesh::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVertices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getVertices",1,SWIGTYPE_p_ofMesh); }  result = (std::vector< ofVec3f > *) &(arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getColors__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofFloatColor > *result = 0 ; SWIG_check_num_args("ofMesh::getColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColors",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_getColors",1,SWIGTYPE_p_ofMesh); }
   result = (std::vector< ofFloatColor > *) &(arg1)->getColors();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getNormals__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *result = 0 ; SWIG_check_num_args("ofMesh::getNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormals",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getNormals",1,SWIGTYPE_p_ofMesh); }  result = (std::vector< ofVec3f > *) &(arg1)->getNormals();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getTexCoords__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec2f > *result = 0 ; SWIG_check_num_args("ofMesh::getTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoords",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getTexCoords",1,SWIGTYPE_p_ofMesh); }  result = (std::vector< ofVec2f > *) &(arg1)->getTexCoords();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec2f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getIndices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofIndexType > *result = 0 ; SWIG_check_num_args("ofMesh::getIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getIndices",1,SWIGTYPE_p_ofMesh); }  result = (std::vector< ofIndexType > *) &(arg1)->getIndices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_TESSindex_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getVertices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *result = 0 ; SWIG_check_num_args("ofMesh::getVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getVertices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getVertices",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofVec3f > *) &((ofMesh const *)arg1)->getVertices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getVertices(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getVertices__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getVertices__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getVertices'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::getVertices()\n" "    ofMesh::getVertices() const\n"); lua_error(L);return 0; }
static int _wrap_Mesh_getColors__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofFloatColor > *result = 0 ; SWIG_check_num_args("ofMesh::getColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getColors",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_getColors",1,SWIGTYPE_p_ofMesh); }
   result = (std::vector< ofFloatColor > *) &((ofMesh const *)arg1)->getColors();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofColor_T_float_t_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getColors(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getColors__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getColors__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getColors'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::getColors()\n" "    ofMesh::getColors() const\n"); lua_error(L);return 0; }
static int _wrap_Mesh_getNormals__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec3f > *result = 0 ; SWIG_check_num_args("ofMesh::getNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getNormals",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofVec3f > *) &((ofMesh const *)arg1)->getNormals();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec3f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getNormals(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getNormals__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getNormals__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getNormals'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::getNormals()\n" "    ofMesh::getNormals() const\n"); lua_error(L);return 0; }
static int _wrap_Mesh_getTexCoords__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofVec2f > *result = 0 ; SWIG_check_num_args("ofMesh::getTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getTexCoords",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getTexCoords",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofVec2f > *) &((ofMesh const *)arg1)->getTexCoords();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofVec2f_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getTexCoords(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getTexCoords__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getTexCoords__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getTexCoords'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::getTexCoords()\n" "    ofMesh::getTexCoords() const\n"); lua_error(L);return 0; }
static int _wrap_Mesh_getIndices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofIndexType > *result = 0 ; SWIG_check_num_args("ofMesh::getIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getIndices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getIndices",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofIndexType > *) &((ofMesh const *)arg1)->getIndices();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_TESSindex_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getIndices(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getIndices__SWIG_0(L);}  }  if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getIndices__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getIndices'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::getIndices()\n" "    ofMesh::getIndices() const\n"); lua_error(L);return 0; }
static int _wrap_Mesh_getCentroid(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofVec3f result;
  SWIG_check_num_args("ofMesh::getCentroid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getCentroid",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getCentroid",1,SWIGTYPE_p_ofMesh); }  result = ((ofMesh const *)arg1)->getCentroid(); {
    ofVec3f * resultptr = new ofVec3f((const ofVec3f &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_setName(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofMesh::setName",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setName",1,"ofMesh *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofMesh::setName",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_setName",1,SWIGTYPE_p_ofMesh); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->setName(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_haveVertsChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveVertsChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveVertsChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_haveVertsChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveVertsChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_haveColorsChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveColorsChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveColorsChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_haveColorsChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveColorsChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_haveNormalsChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveNormalsChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveNormalsChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_haveNormalsChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveNormalsChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_haveTexCoordsChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveTexCoordsChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveTexCoordsChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_haveTexCoordsChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveTexCoordsChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_haveIndicesChanged(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::haveIndicesChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::haveIndicesChanged",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_haveIndicesChanged",1,SWIGTYPE_p_ofMesh); }  result = (bool)(arg1)->haveIndicesChanged();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_hasVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasVertices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_hasVertices",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->hasVertices();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_hasColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasColors",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_hasColors",1,SWIGTYPE_p_ofMesh); }
   result = (bool)((ofMesh const *)arg1)->hasColors(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_hasNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_hasNormals",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->hasNormals();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_hasTexCoords(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasTexCoords",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_hasTexCoords",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->hasTexCoords();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_hasIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::hasIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::hasIndices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_hasIndices",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->hasIndices();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_drawVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::drawVertices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::drawVertices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_drawVertices",1,SWIGTYPE_p_ofMesh); }  (arg1)->drawVertices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_drawWireframe(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::drawWireframe",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::drawWireframe",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_drawWireframe",1,SWIGTYPE_p_ofMesh); }  (arg1)->drawWireframe(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_drawFaces(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::drawFaces",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::drawFaces",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_drawFaces",1,SWIGTYPE_p_ofMesh); }
   (arg1)->drawFaces(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::draw",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_draw",1,SWIGTYPE_p_ofMesh); } 
  (arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_load(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofMesh::load",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::load",1,"ofMesh *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofMesh::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_load",1,SWIGTYPE_p_ofMesh); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->load(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_save__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::string arg2 ;
  bool arg3 ; SWIG_check_num_args("ofMesh::save",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::save",1,"ofMesh const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofMesh::save",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofMesh::save",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_save",1,SWIGTYPE_p_ofMesh); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (lua_toboolean(L, 3)!=0); ((ofMesh const *)arg1)->save(arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_save__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofMesh::save",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::save",1,"ofMesh const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofMesh::save",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_save",1,SWIGTYPE_p_ofMesh); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); ((ofMesh const *)arg1)->save(arg2); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_save(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_Mesh_save__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_Mesh_save__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_save'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::save(std::string,bool) const\n" "    ofMesh::save(std::string) const\n"); lua_error(L);return 0; }
static int _wrap_Mesh_enableColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::enableColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::enableColors",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_enableColors",1,SWIGTYPE_p_ofMesh); }  (arg1)->enableColors(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_enableTextures(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::enableTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::enableTextures",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_enableTextures",1,SWIGTYPE_p_ofMesh); }  (arg1)->enableTextures(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_enableNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::enableNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::enableNormals",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_enableNormals",1,SWIGTYPE_p_ofMesh); }  (arg1)->enableNormals(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_enableIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::enableIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::enableIndices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_enableIndices",1,SWIGTYPE_p_ofMesh); }  (arg1)->enableIndices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_disableColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::disableColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::disableColors",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_disableColors",1,SWIGTYPE_p_ofMesh); }  (arg1)->disableColors(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_disableTextures(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::disableTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::disableTextures",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_disableTextures",1,SWIGTYPE_p_ofMesh); }  (arg1)->disableTextures(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_disableNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::disableNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::disableNormals",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_disableNormals",1,SWIGTYPE_p_ofMesh); }  (arg1)->disableNormals(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_disableIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::disableIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::disableIndices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_disableIndices",1,SWIGTYPE_p_ofMesh); }  (arg1)->disableIndices(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_usingColors(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::usingColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::usingColors",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_usingColors",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->usingColors();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_usingTextures(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::usingTextures",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::usingTextures",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_usingTextures",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->usingTextures();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_usingNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::usingNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::usingNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_usingNormals",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->usingNormals();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_usingIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool result;
  SWIG_check_num_args("ofMesh::usingIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::usingIndices",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_usingIndices",1,SWIGTYPE_p_ofMesh); }  result = (bool)((ofMesh const *)arg1)->usingIndices();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_append(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofMesh *arg2 = 0 ;
  SWIG_check_num_args("ofMesh::append",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::append",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::append",2,"ofMesh &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_append",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_append",2,SWIGTYPE_p_ofMesh); } 
  (arg1)->append(*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_setColorForIndices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; int arg2 ; int arg3 ;
  ofColor arg4 ; ofColor *argp4 ; SWIG_check_num_args("ofMesh::setColorForIndices",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setColorForIndices",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::setColorForIndices",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::setColorForIndices",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMesh::setColorForIndices",4,"ofColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_setColorForIndices",1,SWIGTYPE_p_ofMesh); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Mesh_setColorForIndices",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); }  arg4 = *argp4;
  (arg1)->setColorForIndices(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getMeshForIndices__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; int arg2 ;
  int arg3 ; ofMesh result; SWIG_check_num_args("ofMesh::getMeshForIndices",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getMeshForIndices",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getMeshForIndices",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::getMeshForIndices",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getMeshForIndices",1,SWIGTYPE_p_ofMesh); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = ((ofMesh const *)arg1)->getMeshForIndices(arg2,arg3); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getMeshForIndices__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; int arg5 ; ofMesh result; SWIG_check_num_args("ofMesh::getMeshForIndices",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getMeshForIndices",1,"ofMesh const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::getMeshForIndices",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::getMeshForIndices",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::getMeshForIndices",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::getMeshForIndices",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getMeshForIndices",1,SWIGTYPE_p_ofMesh); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  result = ((ofMesh const *)arg1)->getMeshForIndices(arg2,arg3,arg4,arg5); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getMeshForIndices(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Mesh_getMeshForIndices__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Mesh_getMeshForIndices__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getMeshForIndices'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getMeshForIndices(int,int) const\n"
  "    ofMesh::getMeshForIndices(int,int,int,int) const\n"); lua_error(L);return 0; }
static int _wrap_Mesh_mergeDuplicateVertices(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SWIG_check_num_args("ofMesh::mergeDuplicateVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::mergeDuplicateVertices",1,"ofMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_mergeDuplicateVertices",1,SWIGTYPE_p_ofMesh); }  (arg1)->mergeDuplicateVertices(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getUniqueFaces(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofMeshFace > *result = 0 ; SWIG_check_num_args("ofMesh::getUniqueFaces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getUniqueFaces",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getUniqueFaces",1,SWIGTYPE_p_ofMesh); } 
  result = (std::vector< ofMeshFace > *) &((ofMesh const *)arg1)->getUniqueFaces();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_ofMeshFace_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getFaceNormals__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; bool arg2 ;
  SwigValueWrapper< std::vector< ofVec3f > > result; SWIG_check_num_args("ofMesh::getFaceNormals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getFaceNormals",1,"ofMesh const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofMesh::getFaceNormals",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getFaceNormals",1,SWIGTYPE_p_ofMesh); }  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((ofMesh const *)arg1)->getFaceNormals(arg2); {
    std::vector< ofVec3f > * resultptr = new std::vector< ofVec3f >((const std::vector< ofVec3f > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getFaceNormals__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  SwigValueWrapper< std::vector< ofVec3f > > result; SWIG_check_num_args("ofMesh::getFaceNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::getFaceNormals",1,"ofMesh const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_getFaceNormals",1,SWIGTYPE_p_ofMesh); }  result = ((ofMesh const *)arg1)->getFaceNormals(); {
    std::vector< ofVec3f > * resultptr = new std::vector< ofVec3f >((const std::vector< ofVec3f > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofVec3f_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_getFaceNormals(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_getFaceNormals__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_Mesh_getFaceNormals__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_getFaceNormals'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::getFaceNormals(bool) const\n" "    ofMesh::getFaceNormals() const\n");
  lua_error(L);return 0; }
static int _wrap_Mesh_setFromTriangles__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofMeshFace > *arg2 = 0 ; bool arg3 ; SWIG_check_num_args("ofMesh::setFromTriangles",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setFromTriangles",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setFromTriangles",2,"std::vector< ofMeshFace > const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofMesh::setFromTriangles",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_setFromTriangles",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofMeshFace_t,0))){
    SWIG_fail_ptr("Mesh_setFromTriangles",2,SWIGTYPE_p_std__vectorT_ofMeshFace_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setFromTriangles((std::vector< ofMeshFace > const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_setFromTriangles__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ;
  std::vector< ofMeshFace > *arg2 = 0 ; SWIG_check_num_args("ofMesh::setFromTriangles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::setFromTriangles",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::setFromTriangles",2,"std::vector< ofMeshFace > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_setFromTriangles",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_ofMeshFace_t,0))){
    SWIG_fail_ptr("Mesh_setFromTriangles",2,SWIGTYPE_p_std__vectorT_ofMeshFace_t); } 
  (arg1)->setFromTriangles((std::vector< ofMeshFace > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Mesh_setFromTriangles(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofMeshFace_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_setFromTriangles__SWIG_1(L);}  }  }  if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_ofMeshFace_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_Mesh_setFromTriangles__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_setFromTriangles'\n"
  "  Possible C/C++ prototypes are:\n" "    ofMesh::setFromTriangles(std::vector< ofMeshFace > const &,bool)\n"
  "    ofMesh::setFromTriangles(std::vector< ofMeshFace > const &)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_smoothNormals(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMesh::smoothNormals",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::smoothNormals",1,"ofMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::smoothNormals",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){
    SWIG_fail_ptr("Mesh_smoothNormals",1,SWIGTYPE_p_ofMesh); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->smoothNormals(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_plane__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofPrimitiveMode arg5 ; ofPrimitiveMode *argp5 ; ofMesh result; SWIG_check_num_args("ofMesh::plane",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::plane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::plane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::plane",3,"int"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::plane",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMesh::plane",5,"ofPrimitiveMode"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("Mesh_plane",5,SWIGTYPE_p_ofPrimitiveMode); }  arg5 = *argp5;
  result = ofMesh::plane(arg1,arg2,arg3,arg4,arg5); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_plane__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofMesh result; SWIG_check_num_args("ofMesh::plane",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::plane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::plane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::plane",3,"int"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::plane",4,"int");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); result = ofMesh::plane(arg1,arg2,arg3,arg4); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_plane__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; ofMesh result;
  SWIG_check_num_args("ofMesh::plane",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::plane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::plane",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::plane",3,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); result = ofMesh::plane(arg1,arg2,arg3); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_plane__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::plane",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::plane",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::plane",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofMesh::plane(arg1,arg2); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_plane(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Mesh_plane__SWIG_3(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Mesh_plane__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_Mesh_plane__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_plane__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_plane'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::plane(float,float,int,int,ofPrimitiveMode)\n" "    ofMesh::plane(float,float,int,int)\n"
  "    ofMesh::plane(float,float,int)\n" "    ofMesh::plane(float,float)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_sphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; int arg2 ; ofPrimitiveMode arg3 ;
  ofPrimitiveMode *argp3 ; ofMesh result; SWIG_check_num_args("ofMesh::sphere",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::sphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::sphere",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMesh::sphere",3,"ofPrimitiveMode"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("Mesh_sphere",3,SWIGTYPE_p_ofPrimitiveMode); }  arg3 = *argp3; result = ofMesh::sphere(arg1,arg2,arg3); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_sphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; int arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::sphere",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::sphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::sphere",2,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); result = ofMesh::sphere(arg1,arg2); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_sphere__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofMesh result;
  SWIG_check_num_args("ofMesh::sphere",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::sphere",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = ofMesh::sphere(arg1); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_sphere(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_Mesh_sphere__SWIG_2(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Mesh_sphere__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_sphere__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_sphere'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::sphere(float,int,ofPrimitiveMode)\n" "    ofMesh::sphere(float,int)\n" "    ofMesh::sphere(float)\n");
  lua_error(L);return 0; }
static int _wrap_Mesh_icosahedron(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofMesh result;
  SWIG_check_num_args("ofMesh::icosahedron",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::icosahedron",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = ofMesh::icosahedron(arg1); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_icosphere__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; int arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::icosphere",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::icosphere",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::icosphere",2,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); result = ofMesh::icosphere(arg1,arg2); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_icosphere__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; ofMesh result;
  SWIG_check_num_args("ofMesh::icosphere",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::icosphere",1,"float");
  arg1 = (float)lua_tonumber(L, 1); result = ofMesh::icosphere(arg1); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_icosphere(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_Mesh_icosphere__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Mesh_icosphere__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_icosphere'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::icosphere(float,int)\n" "    ofMesh::icosphere(float)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_cylinder__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; bool arg6 ; ofPrimitiveMode arg7 ; ofPrimitiveMode *argp7 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cylinder",7,7) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cylinder",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cylinder",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofMesh::cylinder",6,"bool");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ofMesh::cylinder",7,"ofPrimitiveMode"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("Mesh_cylinder",7,SWIGTYPE_p_ofPrimitiveMode); }  arg7 = *argp7;
  result = ofMesh::cylinder(arg1,arg2,arg3,arg4,arg5,arg6,arg7); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cylinder__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; bool arg6 ; ofMesh result; SWIG_check_num_args("ofMesh::cylinder",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cylinder",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cylinder",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofMesh::cylinder",6,"bool"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0); result = ofMesh::cylinder(arg1,arg2,arg3,arg4,arg5,arg6); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cylinder__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  int arg5 ; ofMesh result; SWIG_check_num_args("ofMesh::cylinder",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cylinder",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cylinder",5,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); result = ofMesh::cylinder(arg1,arg2,arg3,arg4,arg5); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cylinder__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofMesh result; SWIG_check_num_args("ofMesh::cylinder",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cylinder",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = ofMesh::cylinder(arg1,arg2,arg3,arg4); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cylinder__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cylinder",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cylinder",3,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); result = ofMesh::cylinder(arg1,arg2,arg3); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cylinder__SWIG_5(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cylinder",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cylinder",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cylinder",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofMesh::cylinder(arg1,arg2); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cylinder(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Mesh_cylinder__SWIG_5(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Mesh_cylinder__SWIG_4(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Mesh_cylinder__SWIG_3(L);}  }  }  }  }  if (argc == 5) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Mesh_cylinder__SWIG_2(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_Mesh_cylinder__SWIG_1(L);}  }  }  }  }  }  }  if (argc == 7) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { { void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                    _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_cylinder__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_cylinder'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::cylinder(float,float,int,int,int,bool,ofPrimitiveMode)\n" "    ofMesh::cylinder(float,float,int,int,int,bool)\n"
  "    ofMesh::cylinder(float,float,int,int,int)\n" "    ofMesh::cylinder(float,float,int,int)\n"
  "    ofMesh::cylinder(float,float,int)\n" "    ofMesh::cylinder(float,float)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_cone__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ; int arg5 ;
  ofPrimitiveMode arg6 ; ofPrimitiveMode *argp6 ; ofMesh result; SWIG_check_num_args("ofMesh::cone",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cone",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cone",4,"int"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cone",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofMesh::cone",6,"ofPrimitiveMode"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_ofPrimitiveMode,0))){
    SWIG_fail_ptr("Mesh_cone",6,SWIGTYPE_p_ofPrimitiveMode); }  arg6 = *argp6;
  result = ofMesh::cone(arg1,arg2,arg3,arg4,arg5,arg6); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cone__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ; int arg5 ;
  ofMesh result; SWIG_check_num_args("ofMesh::cone",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cone",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cone",4,"int"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::cone",5,"int");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); result = ofMesh::cone(arg1,arg2,arg3,arg4,arg5); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cone__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; int arg4 ;
  ofMesh result; SWIG_check_num_args("ofMesh::cone",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cone",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::cone",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = ofMesh::cone(arg1,arg2,arg3,arg4); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cone__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; int arg3 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cone",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::cone",3,"int");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  result = ofMesh::cone(arg1,arg2,arg3); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cone__SWIG_4(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; ofMesh result;
  SWIG_check_num_args("ofMesh::cone",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::cone",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::cone",2,"float"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); result = ofMesh::cone(arg1,arg2); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_cone(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Mesh_cone__SWIG_4(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Mesh_cone__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { {
        _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }
           if (_v) { return _wrap_Mesh_cone__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { _v = lua_isnumber(L,argv[0]); }
     if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Mesh_cone__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) { int _v; { _v = lua_isnumber(L,argv[0]); } 
    if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_ofPrimitiveMode, 0)) {
                  _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_cone__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_cone'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::cone(float,float,int,int,int,ofPrimitiveMode)\n" "    ofMesh::cone(float,float,int,int,int)\n"
  "    ofMesh::cone(float,float,int,int)\n" "    ofMesh::cone(float,float,int)\n" "    ofMesh::cone(float,float)\n");
  lua_error(L);return 0; }
static int _wrap_Mesh_box__SWIG_0(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; int arg4 ; int arg5 ;
  int arg6 ; ofMesh result; SWIG_check_num_args("ofMesh::box",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::box",1,"float"); if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::box",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::box",3,"float"); if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::box",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::box",5,"int"); if(!lua_isnumber(L,6)) SWIG_fail_arg("ofMesh::box",6,"int");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  result = ofMesh::box(arg1,arg2,arg3,arg4,arg5,arg6); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_box__SWIG_1(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; int arg4 ; int arg5 ;
  ofMesh result; SWIG_check_num_args("ofMesh::box",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::box",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::box",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::box",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::box",4,"int"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofMesh::box",5,"int");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); result = ofMesh::box(arg1,arg2,arg3,arg4,arg5); {
    ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_box__SWIG_2(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; int arg4 ;
  ofMesh result; SWIG_check_num_args("ofMesh::box",4,4) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::box",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::box",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::box",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofMesh::box",4,"int"); arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  result = ofMesh::box(arg1,arg2,arg3,arg4); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_box__SWIG_3(lua_State* L) { int SWIG_arg = 0; float arg1 ; float arg2 ; float arg3 ; ofMesh result;
  SWIG_check_num_args("ofMesh::box",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofMesh::box",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMesh::box",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofMesh::box",3,"float");
  arg1 = (float)lua_tonumber(L, 1); arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  result = ofMesh::box(arg1,arg2,arg3); { ofMesh * resultptr = new ofMesh((const ofMesh &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofMesh,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_box(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Mesh_box__SWIG_3(L);}  }  }  }  if (argc == 4) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Mesh_box__SWIG_2(L);}  }  }  }  }  if (argc == 5) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Mesh_box__SWIG_1(L);}  }  }  }  }  }  if (argc == 6) {
    int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { {
          _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_Mesh_box__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_box'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::box(float,float,float,int,int,int)\n" "    ofMesh::box(float,float,float,int,int)\n"
  "    ofMesh::box(float,float,float,int)\n" "    ofMesh::box(float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Mesh_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = (ofMesh *) 0 ; ofPolyRenderMode arg2 ;
  ofPolyRenderMode *argp2 ; SWIG_check_num_args("ofMesh::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMesh::draw",1,"ofMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMesh::draw",2,"ofPolyRenderMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Mesh_draw",1,SWIGTYPE_p_ofMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPolyRenderMode,0))){
    SWIG_fail_ptr("Mesh_draw",2,SWIGTYPE_p_ofPolyRenderMode); }  arg2 = *argp2; (arg1)->draw(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Mesh_draw(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_draw__SWIG_0(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPolyRenderMode, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Mesh_draw__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Mesh_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofMesh::draw()\n" "    ofMesh::draw(ofPolyRenderMode)\n"); lua_error(L);return 0; }
static void swig_delete_Mesh(void *obj) {
ofMesh *arg1 = (ofMesh *) obj;
delete arg1;
}
static swig_lua_method swig_ofMesh_methods[] = {
    {"setMode", _wrap_Mesh_setMode}, 
    {"getMode", _wrap_Mesh_getMode}, 
    {"clear", _wrap_Mesh_clear}, 
    {"setupIndicesAuto", _wrap_Mesh_setupIndicesAuto}, 
    {"getVertex", _wrap_Mesh_getVertex}, 
    {"addVertex", _wrap_Mesh_addVertex}, 
    {"addVertices", _wrap_Mesh_addVertices}, 
    {"removeVertex", _wrap_Mesh_removeVertex}, 
    {"setVertex", _wrap_Mesh_setVertex}, 
    {"clearVertices", _wrap_Mesh_clearVertices}, 
    {"getNormal", _wrap_Mesh_getNormal}, 
    {"addNormal", _wrap_Mesh_addNormal}, 
    {"addNormals", _wrap_Mesh_addNormals}, 
    {"removeNormal", _wrap_Mesh_removeNormal}, 
    {"setNormal", _wrap_Mesh_setNormal}, 
    {"clearNormals", _wrap_Mesh_clearNormals}, 
    {"getColor", _wrap_Mesh_getColor}, 
    {"addColor", _wrap_Mesh_addColor}, 
    {"addColors", _wrap_Mesh_addColors}, 
    {"removeColor", _wrap_Mesh_removeColor}, 
    {"setColor", _wrap_Mesh_setColor}, 
    {"clearColors", _wrap_Mesh_clearColors}, 
    {"getTexCoord", _wrap_Mesh_getTexCoord}, 
    {"addTexCoord", _wrap_Mesh_addTexCoord}, 
    {"addTexCoords", _wrap_Mesh_addTexCoords}, 
    {"removeTexCoord", _wrap_Mesh_removeTexCoord}, 
    {"setTexCoord", _wrap_Mesh_setTexCoord}, 
    {"clearTexCoords", _wrap_Mesh_clearTexCoords}, 
    {"getIndex", _wrap_Mesh_getIndex}, 
    {"addIndex", _wrap_Mesh_addIndex}, 
    {"addIndices", _wrap_Mesh_addIndices}, 
    {"removeIndex", _wrap_Mesh_removeIndex}, 
    {"setIndex", _wrap_Mesh_setIndex}, 
    {"clearIndices", _wrap_Mesh_clearIndices}, 
    {"addTriangle", _wrap_Mesh_addTriangle}, 
    {"getNumVertices", _wrap_Mesh_getNumVertices}, 
    {"getNumColors", _wrap_Mesh_getNumColors}, 
    {"getNumNormals", _wrap_Mesh_getNumNormals}, 
    {"getNumTexCoords", _wrap_Mesh_getNumTexCoords}, 
    {"getNumIndices", _wrap_Mesh_getNumIndices}, 
    {"getVerticesPointer", _wrap_Mesh_getVerticesPointer}, 
    {"getColorsPointer", _wrap_Mesh_getColorsPointer}, 
    {"getNormalsPointer", _wrap_Mesh_getNormalsPointer}, 
    {"getTexCoordsPointer", _wrap_Mesh_getTexCoordsPointer}, 
    {"getIndexPointer", _wrap_Mesh_getIndexPointer}, 
    {"getVertices", _wrap_Mesh_getVertices}, 
    {"getColors", _wrap_Mesh_getColors}, 
    {"getNormals", _wrap_Mesh_getNormals}, 
    {"getTexCoords", _wrap_Mesh_getTexCoords}, 
    {"getIndices", _wrap_Mesh_getIndices}, 
    {"getCentroid", _wrap_Mesh_getCentroid}, 
    {"setName", _wrap_Mesh_setName}, 
    {"haveVertsChanged", _wrap_Mesh_haveVertsChanged}, 
    {"haveColorsChanged", _wrap_Mesh_haveColorsChanged}, 
    {"haveNormalsChanged", _wrap_Mesh_haveNormalsChanged}, 
    {"haveTexCoordsChanged", _wrap_Mesh_haveTexCoordsChanged}, 
    {"haveIndicesChanged", _wrap_Mesh_haveIndicesChanged}, 
    {"hasVertices", _wrap_Mesh_hasVertices}, 
    {"hasColors", _wrap_Mesh_hasColors}, 
    {"hasNormals", _wrap_Mesh_hasNormals}, 
    {"hasTexCoords", _wrap_Mesh_hasTexCoords}, 
    {"hasIndices", _wrap_Mesh_hasIndices}, 
    {"drawVertices", _wrap_Mesh_drawVertices}, 
    {"drawWireframe", _wrap_Mesh_drawWireframe}, 
    {"drawFaces", _wrap_Mesh_drawFaces}, 
    {"load", _wrap_Mesh_load}, 
    {"save", _wrap_Mesh_save}, 
    {"enableColors", _wrap_Mesh_enableColors}, 
    {"enableTextures", _wrap_Mesh_enableTextures}, 
    {"enableNormals", _wrap_Mesh_enableNormals}, 
    {"enableIndices", _wrap_Mesh_enableIndices}, 
    {"disableColors", _wrap_Mesh_disableColors}, 
    {"disableTextures", _wrap_Mesh_disableTextures}, 
    {"disableNormals", _wrap_Mesh_disableNormals}, 
    {"disableIndices", _wrap_Mesh_disableIndices}, 
    {"usingColors", _wrap_Mesh_usingColors}, 
    {"usingTextures", _wrap_Mesh_usingTextures}, 
    {"usingNormals", _wrap_Mesh_usingNormals}, 
    {"usingIndices", _wrap_Mesh_usingIndices}, 
    {"append", _wrap_Mesh_append}, 
    {"setColorForIndices", _wrap_Mesh_setColorForIndices}, 
    {"getMeshForIndices", _wrap_Mesh_getMeshForIndices}, 
    {"mergeDuplicateVertices", _wrap_Mesh_mergeDuplicateVertices}, 
    {"getUniqueFaces", _wrap_Mesh_getUniqueFaces}, 
    {"getFaceNormals", _wrap_Mesh_getFaceNormals}, 
    {"setFromTriangles", _wrap_Mesh_setFromTriangles}, 
    {"smoothNormals", _wrap_Mesh_smoothNormals}, 
    {"draw", _wrap_Mesh_draw}, 
    {0,0}
};
static swig_lua_attribute swig_ofMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofMesh_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofMesh_cls_methods[] = {
    {"plane", _wrap_Mesh_plane}, 
    {"sphere", _wrap_Mesh_sphere}, 
    {"icosahedron", _wrap_Mesh_icosahedron}, 
    {"icosphere", _wrap_Mesh_icosphere}, 
    {"cylinder", _wrap_Mesh_cylinder}, 
    {"cone", _wrap_Mesh_cone}, 
    {"box", _wrap_Mesh_box}, 
    {0,0}
};
static swig_lua_const_info swig_ofMesh_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofMesh_bases[] = {0};
static const char *swig_ofMesh_base_names[] = {0};
static swig_lua_class _wrap_class_ofMesh = { "Mesh", &SWIGTYPE_p_ofMesh,_wrap_new_Mesh, swig_delete_Mesh, swig_ofMesh_methods, swig_ofMesh_attributes, { "Mesh", swig_ofMesh_cls_methods, swig_ofMesh_cls_attributes, swig_ofMesh_cls_constants }, swig_ofMesh_bases, swig_ofMesh_base_names };

static int _wrap_new_ofMeshFace(lua_State* L) { int SWIG_arg = 0; ofMeshFace *result = 0 ;
  SWIG_check_num_args("ofMeshFace::ofMeshFace",0,0) result = (ofMeshFace *)new ofMeshFace();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMeshFace,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_getFaceNormal(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMeshFace::getFaceNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getFaceNormal",1,"ofMeshFace const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getFaceNormal",1,SWIGTYPE_p_ofMeshFace); } 
  result = (ofVec3f *) &((ofMeshFace const *)arg1)->getFaceNormal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_setVertex(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; int arg2 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofMeshFace::setVertex",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setVertex",1,"ofMeshFace *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::setVertex",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMeshFace::setVertex",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setVertex",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMeshFace_setVertex",3,SWIGTYPE_p_ofVec3f); }  (arg1)->setVertex(arg2,(ofVec3f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_getVertex(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; int arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMeshFace::getVertex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getVertex",1,"ofMeshFace const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::getVertex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getVertex",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (int)lua_tonumber(L, 2);
  result = (ofVec3f *) &((ofMeshFace const *)arg1)->getVertex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_setNormal(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; int arg2 ;
  ofVec3f *arg3 = 0 ; SWIG_check_num_args("ofMeshFace::setNormal",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setNormal",1,"ofMeshFace *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::setNormal",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMeshFace::setNormal",3,"ofVec3f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setNormal",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("ofMeshFace_setNormal",3,SWIGTYPE_p_ofVec3f); }  (arg1)->setNormal(arg2,(ofVec3f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_getNormal(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; int arg2 ;
  ofVec3f *result = 0 ; SWIG_check_num_args("ofMeshFace::getNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getNormal",1,"ofMeshFace const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::getNormal",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getNormal",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (int)lua_tonumber(L, 2);
  result = (ofVec3f *) &((ofMeshFace const *)arg1)->getNormal(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_setColor(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; int arg2 ;
  ofFloatColor *arg3 = 0 ; SWIG_check_num_args("ofMeshFace::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setColor",1,"ofMeshFace *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::setColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMeshFace::setColor",3,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setColor",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("ofMeshFace_setColor",3,SWIGTYPE_p_ofColor_T_float_t); }  (arg1)->setColor(arg2,(ofFloatColor const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_getColor(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; int arg2 ;
  ofFloatColor *result = 0 ; SWIG_check_num_args("ofMeshFace::getColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getColor",1,"ofMeshFace const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::getColor",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getColor",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (int)lua_tonumber(L, 2);
  result = (ofFloatColor *) &((ofMeshFace const *)arg1)->getColor(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofColor_T_float_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_setTexCoord(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; int arg2 ;
  ofVec2f *arg3 = 0 ; SWIG_check_num_args("ofMeshFace::setTexCoord",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setTexCoord",1,"ofMeshFace *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::setTexCoord",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMeshFace::setTexCoord",3,"ofVec2f const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setTexCoord",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("ofMeshFace_setTexCoord",3,SWIGTYPE_p_ofVec2f); }  (arg1)->setTexCoord(arg2,(ofVec2f const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_getTexCoord(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; int arg2 ;
  ofVec2f *result = 0 ; SWIG_check_num_args("ofMeshFace::getTexCoord",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::getTexCoord",1,"ofMeshFace const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMeshFace::getTexCoord",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_getTexCoord",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (int)lua_tonumber(L, 2);
  result = (ofVec2f *) &((ofMeshFace const *)arg1)->getTexCoord(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec2f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofMeshFace_setHasColors(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofMeshFace::setHasColors",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setHasColors",1,"ofMeshFace *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofMeshFace::setHasColors",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setHasColors",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setHasColors(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_setHasNormals(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofMeshFace::setHasNormals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setHasNormals",1,"ofMeshFace *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofMeshFace::setHasNormals",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setHasNormals",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setHasNormals(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_setHasTexcoords(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofMeshFace::setHasTexcoords",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::setHasTexcoords",1,"ofMeshFace *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofMeshFace::setHasTexcoords",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_setHasTexcoords",1,SWIGTYPE_p_ofMeshFace); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setHasTexcoords(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_hasColors(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool result;
  SWIG_check_num_args("ofMeshFace::hasColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::hasColors",1,"ofMeshFace const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_hasColors",1,SWIGTYPE_p_ofMeshFace); }  result = (bool)((ofMeshFace const *)arg1)->hasColors();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_hasNormals(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool result;
  SWIG_check_num_args("ofMeshFace::hasNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::hasNormals",1,"ofMeshFace const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_hasNormals",1,SWIGTYPE_p_ofMeshFace); }  result = (bool)((ofMeshFace const *)arg1)->hasNormals();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofMeshFace_hasTexcoords(lua_State* L) { int SWIG_arg = 0; ofMeshFace *arg1 = (ofMeshFace *) 0 ; bool result;
  SWIG_check_num_args("ofMeshFace::hasTexcoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMeshFace::hasTexcoords",1,"ofMeshFace const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMeshFace,0))){
    SWIG_fail_ptr("ofMeshFace_hasTexcoords",1,SWIGTYPE_p_ofMeshFace); } 
  result = (bool)((ofMeshFace const *)arg1)->hasTexcoords(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_ofMeshFace(void *obj) {
ofMeshFace *arg1 = (ofMeshFace *) obj;
delete arg1;
}
static swig_lua_method swig_ofMeshFace_methods[] = {
    {"getFaceNormal", _wrap_ofMeshFace_getFaceNormal}, 
    {"setVertex", _wrap_ofMeshFace_setVertex}, 
    {"getVertex", _wrap_ofMeshFace_getVertex}, 
    {"setNormal", _wrap_ofMeshFace_setNormal}, 
    {"getNormal", _wrap_ofMeshFace_getNormal}, 
    {"setColor", _wrap_ofMeshFace_setColor}, 
    {"getColor", _wrap_ofMeshFace_getColor}, 
    {"setTexCoord", _wrap_ofMeshFace_setTexCoord}, 
    {"getTexCoord", _wrap_ofMeshFace_getTexCoord}, 
    {"setHasColors", _wrap_ofMeshFace_setHasColors}, 
    {"setHasNormals", _wrap_ofMeshFace_setHasNormals}, 
    {"setHasTexcoords", _wrap_ofMeshFace_setHasTexcoords}, 
    {"hasColors", _wrap_ofMeshFace_hasColors}, 
    {"hasNormals", _wrap_ofMeshFace_hasNormals}, 
    {"hasTexcoords", _wrap_ofMeshFace_hasTexcoords}, 
    {0,0}
};
static swig_lua_attribute swig_ofMeshFace_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofMeshFace_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofMeshFace_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofMeshFace_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofMeshFace_bases[] = {0};
static const char *swig_ofMeshFace_base_names[] = {0};
static swig_lua_class _wrap_class_ofMeshFace = { "ofMeshFace", &SWIGTYPE_p_ofMeshFace,_wrap_new_ofMeshFace, swig_delete_ofMeshFace, swig_ofMeshFace_methods, swig_ofMeshFace_attributes, { "ofMeshFace", swig_ofMeshFace_cls_methods, swig_ofMeshFace_cls_attributes, swig_ofMeshFace_cls_constants }, swig_ofMeshFace_bases, swig_ofMeshFace_base_names };

static int _wrap_new_Image__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofImage_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",0,0)
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Image__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofPixels_< unsigned char > *arg1 = 0 ;
  ofImage_< unsigned char > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::ofImage_",1,"ofPixels_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("new_Image",1,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((ofPixels_< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Image__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFile *arg1 = 0 ; ofImage_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::ofImage_",1,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFile,0))){ SWIG_fail_ptr("new_Image",1,SWIGTYPE_p_ofFile); } 
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((ofFile const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Image__SWIG_3(lua_State* L) { int SWIG_arg = 0; std::string *arg1 = 0 ; std::string temp1 ;
  ofImage_< unsigned char > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::ofImage_",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Image_allocate(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofImageType arg4 ;
  SWIG_check_num_args("ofImage_< unsigned char >::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::allocate",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::allocate",4,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_allocate",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (ofImageType)(int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_clear(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::clear",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_clear",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Image__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofImage_< unsigned char > *arg1 = 0 ;
  ofImage_< unsigned char > *result = 0 ; SWIG_check_num_args("ofImage_< unsigned char >::ofImage_",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::ofImage_",1,"ofImage_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("new_Image",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofImage_< unsigned char > *)new ofImage_< unsigned char >((ofImage_< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofImage_T_unsigned_char_t,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_Image(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Image__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Image__SWIG_1(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Image__SWIG_2(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_new_Image__SWIG_4(L);}  }  if (argc == 1) { int _v; {
      _v = lua_isstring(L,argv[0]); }  if (_v) { return _wrap_new_Image__SWIG_3(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Image'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::ofImage_()\n" "    ofImage_< unsigned char >::ofImage_(ofPixels_< unsigned char > const &)\n"
  "    ofImage_< unsigned char >::ofImage_(ofFile const &)\n" "    ofImage_< unsigned char >::ofImage_(std::string const &)\n"
  "    ofImage_< unsigned char >::ofImage_(ofImage_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_Image_setUseTexture(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setUseTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setUseTexture",1,"ofImage_< unsigned char > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setUseTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setUseTexture",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setUseTexture(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_isUsingTexture(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::isUsingTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::isUsingTexture",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_isUsingTexture",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (bool)(arg1)->isUsingTexture();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_getTextureReference(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getTextureReference",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_getTextureReference",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofTexture *) &(arg1)->getTextureReference(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_bind(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; SWIG_check_num_args("ofImage_< unsigned char >::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::bind",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_bind",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (arg1)->bind(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_unbind(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::unbind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::unbind",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_unbind",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (arg1)->unbind(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_loadImage__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; std::string arg2 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",1,"ofImage_< unsigned char > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_loadImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); result = (bool)(arg1)->loadImage(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_loadImage__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofBuffer *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",2,"ofBuffer const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_loadImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("Image_loadImage",2,SWIGTYPE_p_ofBuffer); }  result = (bool)(arg1)->loadImage((ofBuffer const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_loadImage__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofFile *arg2 = 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::loadImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::loadImage",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_loadImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("Image_loadImage",2,SWIGTYPE_p_ofFile); }  result = (bool)(arg1)->loadImage((ofFile const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_loadImage(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Image_loadImage__SWIG_1(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Image_loadImage__SWIG_2(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_Image_loadImage__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Image_loadImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::loadImage(std::string)\n" "    ofImage_< unsigned char >::loadImage(ofBuffer const &)\n"
  "    ofImage_< unsigned char >::loadImage(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_Image_saveImage__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; std::string arg2 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_saveImage__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; std::string arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); (arg1)->saveImage(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Image_saveImage__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofBuffer *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"ofBuffer &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("Image_saveImage",2,SWIGTYPE_p_ofBuffer); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_saveImage__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofBuffer *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"ofBuffer &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBuffer,0))){
    SWIG_fail_ptr("Image_saveImage",2,SWIGTYPE_p_ofBuffer); }  (arg1)->saveImage(*arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Image_saveImage__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofFile *arg2 = 0 ; ofImageQualityType arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"ofFile const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",3,"ofImageQualityType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("Image_saveImage",2,SWIGTYPE_p_ofFile); }  arg3 = (ofImageQualityType)(int)lua_tonumber(L, 3);
  (arg1)->saveImage((ofFile const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_saveImage__SWIG_5(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofFile *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::saveImage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::saveImage",2,"ofFile const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_saveImage",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofFile,0))){
    SWIG_fail_ptr("Image_saveImage",2,SWIGTYPE_p_ofFile); }  (arg1)->saveImage((ofFile const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_saveImage(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Image_saveImage__SWIG_3(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Image_saveImage__SWIG_5(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_Image_saveImage__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFile, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Image_saveImage__SWIG_4(L);}  }
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBuffer, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Image_saveImage__SWIG_2(L);}  }
       }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Image_saveImage__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Image_saveImage'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::saveImage(std::string,ofImageQualityType)\n"
  "    ofImage_< unsigned char >::saveImage(std::string)\n"
  "    ofImage_< unsigned char >::saveImage(ofBuffer &,ofImageQualityType)\n"
  "    ofImage_< unsigned char >::saveImage(ofBuffer &)\n"
  "    ofImage_< unsigned char >::saveImage(ofFile const &,ofImageQualityType)\n"
  "    ofImage_< unsigned char >::saveImage(ofFile const &)\n"); lua_error(L);return 0; }
static int _wrap_Image_setCompression(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofTexCompression arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setCompression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setCompression",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setCompression",2,"ofTexCompression");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setCompression",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  arg2 = (ofTexCompression)(int)lua_tonumber(L, 2); (arg1)->setCompression(arg2); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Image_getPixels(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; unsigned char *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getPixels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getPixels",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_getPixels",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (unsigned char *)(arg1)->getPixels();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_getPixelsRef(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPixels_< unsigned char > *result = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::getPixelsRef",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getPixelsRef",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_getPixelsRef",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  result = (ofPixels_< unsigned char > *) &(arg1)->getPixelsRef();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Image_getColor(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ; ofColor_< unsigned char > result;
  SWIG_check_num_args("ofImage_< unsigned char >::getColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getColor",1,"ofImage_< unsigned char > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::getColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::getColor",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_getColor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); result = ((ofImage_< unsigned char > const *)arg1)->getColor(arg2,arg3); {
    ofColor_< unsigned char > * resultptr = new ofColor_< unsigned char >((const ofColor_< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_unsigned_char_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_setColor__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ;
  ofColor_< unsigned char > *arg4 = 0 ; SWIG_check_num_args("ofImage_< unsigned char >::setColor",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",4,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setColor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setColor",4,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor(arg2,arg3,(ofColor_< unsigned char > const &)*arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_setColor__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; ofColor_< unsigned char > *arg3 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setColor",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",2,"int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",3,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setColor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setColor",3,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor(arg2,(ofColor_< unsigned char > const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_setColor__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofColor_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setColor",2,"ofColor_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setColor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setColor",2,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  (arg1)->setColor((ofColor_< unsigned char > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_setColor(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Image_setColor__SWIG_2(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Image_setColor__SWIG_1(L);}  }  }  }  if (argc == 4) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofColor_T_unsigned_char_t, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Image_setColor__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Image_setColor'\n" "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::setColor(int,int,ofColor_< unsigned char > const &)\n"
  "    ofImage_< unsigned char >::setColor(int,ofColor_< unsigned char > const &)\n"
  "    ofImage_< unsigned char >::setColor(ofColor_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_Image_setFromPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; ofImageType arg5 ; bool arg6 ; SWIG_check_num_args("ofImage_< unsigned char >::setFromPixels",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",1,"ofImage_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",5,"ofImageType");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setFromPixels",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Image_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5); arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_setFromPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; unsigned char *arg2 = (unsigned char *) 0 ; int arg3 ;
  int arg4 ; ofImageType arg5 ; SWIG_check_num_args("ofImage_< unsigned char >::setFromPixels",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",1,"ofImage_< unsigned char > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",2,"unsigned char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",5,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setFromPixels",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Image_setFromPixels",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (ofImageType)(int)lua_tonumber(L, 5);
  (arg1)->setFromPixels((unsigned char const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_setFromPixels__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPixels_< unsigned char > *arg2 = 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setFromPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setFromPixels",2,"ofPixels_< unsigned char > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setFromPixels",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setFromPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); } 
  (arg1)->setFromPixels((ofPixels_< unsigned char > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_setFromPixels(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Image_setFromPixels__SWIG_2(L);}  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Image_setFromPixels__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_Image_setFromPixels__SWIG_0(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Image_setFromPixels'\n"
  "  Possible C/C++ prototypes are:\n"
  "    ofImage_< unsigned char >::setFromPixels(unsigned char const *,int,int,ofImageType,bool)\n"
  "    ofImage_< unsigned char >::setFromPixels(unsigned char const *,int,int,ofImageType)\n"
  "    ofImage_< unsigned char >::setFromPixels(ofPixels_< unsigned char > const &)\n"); lua_error(L);return 0; }
static int _wrap_Image_setImageType(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofImageType arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setImageType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setImageType",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setImageType",2,"ofImageType");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setImageType",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (ofImageType)(int)lua_tonumber(L, 2);
  (arg1)->setImageType(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_resize(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::resize",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::resize",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_resize",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); (arg1)->resize(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_grabScreen(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofImage_< unsigned char >::grabScreen",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::grabScreen",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_grabScreen",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->grabScreen(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_crop(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofImage_< unsigned char >::crop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::crop",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::crop",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::crop",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::crop",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::crop",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_crop",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->crop(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_cropFrom(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofImage_< unsigned char > *arg2 = 0 ; int arg3 ;
  int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofImage_< unsigned char >::cropFrom",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",2,"ofImage_< unsigned char > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::cropFrom",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_cropFrom",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_cropFrom",2,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->cropFrom(*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_rotate90(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::rotate90",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::rotate90",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::rotate90",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_rotate90",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->rotate90(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_mirror(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool arg2 ; bool arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::mirror",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::mirror",1,"ofImage_< unsigned char > *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::mirror",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::mirror",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_mirror",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0); (arg1)->mirror(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_update(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::update",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_update",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (arg1)->update(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_setAnchorPercent(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPercent",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setAnchorPercent",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_setAnchorPoint(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPoint",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_setAnchorPoint",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_resetAnchor(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::resetAnchor",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_resetAnchor",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (arg1)->resetAnchor(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_draw__SWIG_0_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPoint *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Image_draw",2,SWIGTYPE_p_ofVec3f); } 
  (arg1)->draw((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_draw__SWIG_0_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofRectangle *arg2 = 0 ; SWIG_check_num_args("draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Image_draw",2,SWIGTYPE_p_ofRectangle); }  (arg1)->draw((ofRectangle const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_draw__SWIG_0_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; ofPoint *arg2 = 0 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("draw",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofImage_< unsigned char > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &"); if(!lua_isnumber(L,3)) SWIG_fail_arg("draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Image_draw",2,SWIGTYPE_p_ofVec3f); } 
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->draw((ofPoint const &)*arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofImage_< unsigned char >::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::draw",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ;
  SWIG_check_num_args("ofImage_< unsigned char >::draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::draw",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->draw(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_draw__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  SWIG_check_num_args("ofImage_< unsigned char >::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::draw",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_draw__SWIG_4(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; SWIG_check_num_args("ofImage_< unsigned char >::draw",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::draw",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::draw",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::draw",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_draw",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); (arg1)->draw(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Image_draw(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Image_draw__SWIG_0_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Image_draw__SWIG_0_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { return _wrap_Image_draw__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Image_draw__SWIG_0_2(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Image_draw__SWIG_2(L);}  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Image_draw__SWIG_3(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_Image_draw__SWIG_4(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Image_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    draw(ofPoint const &)\n" "    draw(ofRectangle const &)\n" "    draw(ofPoint const &,float,float)\n"
  "    ofImage_< unsigned char >::draw(float,float)\n" "    ofImage_< unsigned char >::draw(float,float,float)\n"
  "    ofImage_< unsigned char >::draw(float,float,float,float)\n"
  "    ofImage_< unsigned char >::draw(float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Image_drawSubsection__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; SWIG_check_num_args("ofImage_< unsigned char >::drawSubsection",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_drawSubsection__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; SWIG_check_num_args("ofImage_< unsigned char >::drawSubsection",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_drawSubsection__SWIG_2(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; float arg9 ; SWIG_check_num_args("ofImage_< unsigned char >::drawSubsection",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_drawSubsection__SWIG_3(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float arg2 ; float arg3 ; float arg4 ; float arg5 ;
  float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofImage_< unsigned char >::drawSubsection",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofImage_< unsigned char >::drawSubsection",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_drawSubsection",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Image_drawSubsection(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ; argc = lua_gettop(L);
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Image_drawSubsection__SWIG_0(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Image_drawSubsection__SWIG_1(L);}  }  }  }  }  }  }
       }  }  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_Image_drawSubsection__SWIG_2(L);}  }  }  }  }  }  }  }  }  }  if (argc == 10) { int _v; {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofImage_T_unsigned_char_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_Image_drawSubsection__SWIG_3(L);}  }  }  }  }  }
             }  }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Image_drawSubsection'\n"
  "  Possible C/C++ prototypes are:\n" "    ofImage_< unsigned char >::drawSubsection(float,float,float,float,float,float)\n"
  "    ofImage_< unsigned char >::drawSubsection(float,float,float,float,float,float,float)\n"
  "    ofImage_< unsigned char >::drawSubsection(float,float,float,float,float,float,float,float)\n"
  "    ofImage_< unsigned char >::drawSubsection(float,float,float,float,float,float,float,float,float)\n");
  lua_error(L);return 0; }
static int _wrap_Image_getHeight(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofImage_< unsigned char >::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getHeight",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_getHeight",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (float)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_getWidth(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; float result;
  SWIG_check_num_args("ofImage_< unsigned char >::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::getWidth",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_getWidth",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (float)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_bAllocated(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::bAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::bAllocated",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_bAllocated",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (bool)(arg1)->bAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_isAllocated(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; bool result;
  SWIG_check_num_args("ofImage_< unsigned char >::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::isAllocated",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_isAllocated",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (bool)(arg1)->isAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_reloadTexture(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ;
  SWIG_check_num_args("ofImage_< unsigned char >::reloadTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::reloadTexture",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_reloadTexture",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  (arg1)->reloadTexture(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_width_set(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::width",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::width",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_width_set",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_width_get(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofImage_< unsigned char >::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::width",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_width_get",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (int) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_height_set(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::height",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::height",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_height_set",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_height_get(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofImage_< unsigned char >::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::height",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_height_get",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (int) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_bpp_set(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::bpp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::bpp",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::bpp",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_bpp_set",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->bpp = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_bpp_get(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofImage_< unsigned char >::bpp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::bpp",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_bpp_get",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (int) ((arg1)->bpp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_type_set(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int arg2 ;
  SWIG_check_num_args("ofImage_< unsigned char >::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::type",1,"ofImage_< unsigned char > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofImage_< unsigned char >::type",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_type_set",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Image_type_get(lua_State* L) { int SWIG_arg = 0;
  ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) 0 ; int result;
  SWIG_check_num_args("ofImage_< unsigned char >::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofImage_< unsigned char >::type",1,"ofImage_< unsigned char > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofImage_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Image_type_get",1,SWIGTYPE_p_ofImage_T_unsigned_char_t); }  result = (int) ((arg1)->type);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Image(void *obj) {
ofImage_< unsigned char > *arg1 = (ofImage_< unsigned char > *) obj;
delete arg1;
}
static swig_lua_method swig_ofImage__Sl_unsigned_SS_char_Sg__methods[] = {
    {"allocate", _wrap_Image_allocate}, 
    {"clear", _wrap_Image_clear}, 
    {"setUseTexture", _wrap_Image_setUseTexture}, 
    {"isUsingTexture", _wrap_Image_isUsingTexture}, 
    {"getTextureReference", _wrap_Image_getTextureReference}, 
    {"bind", _wrap_Image_bind}, 
    {"unbind", _wrap_Image_unbind}, 
    {"loadImage", _wrap_Image_loadImage}, 
    {"saveImage", _wrap_Image_saveImage}, 
    {"setCompression", _wrap_Image_setCompression}, 
    {"getPixels", _wrap_Image_getPixels}, 
    {"getPixelsRef", _wrap_Image_getPixelsRef}, 
    {"getColor", _wrap_Image_getColor}, 
    {"setColor", _wrap_Image_setColor}, 
    {"setFromPixels", _wrap_Image_setFromPixels}, 
    {"setImageType", _wrap_Image_setImageType}, 
    {"resize", _wrap_Image_resize}, 
    {"grabScreen", _wrap_Image_grabScreen}, 
    {"crop", _wrap_Image_crop}, 
    {"cropFrom", _wrap_Image_cropFrom}, 
    {"rotate90", _wrap_Image_rotate90}, 
    {"mirror", _wrap_Image_mirror}, 
    {"update", _wrap_Image_update}, 
    {"setAnchorPercent", _wrap_Image_setAnchorPercent}, 
    {"setAnchorPoint", _wrap_Image_setAnchorPoint}, 
    {"resetAnchor", _wrap_Image_resetAnchor}, 
    {"draw", _wrap_Image_draw}, 
    {"drawSubsection", _wrap_Image_drawSubsection}, 
    {"getHeight", _wrap_Image_getHeight}, 
    {"getWidth", _wrap_Image_getWidth}, 
    {"bAllocated", _wrap_Image_bAllocated}, 
    {"isAllocated", _wrap_Image_isAllocated}, 
    {"reloadTexture", _wrap_Image_reloadTexture}, 
    {0,0}
};
static swig_lua_attribute swig_ofImage__Sl_unsigned_SS_char_Sg__attributes[] = {
    { "width", _wrap_Image_width_get, _wrap_Image_width_set},
    { "height", _wrap_Image_height_get, _wrap_Image_height_set},
    { "bpp", _wrap_Image_bpp_get, _wrap_Image_bpp_set},
    { "type", _wrap_Image_type_get, _wrap_Image_type_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofImage__Sl_unsigned_SS_char_Sg__cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofImage__Sl_unsigned_SS_char_Sg__cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofImage__Sl_unsigned_SS_char_Sg__cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofImage__Sl_unsigned_SS_char_Sg__bases[] = {0};
static const char *swig_ofImage__Sl_unsigned_SS_char_Sg__base_names[] = {0};
static swig_lua_class _wrap_class_ofImage__Sl_unsigned_SS_char_Sg_ = { "Image", &SWIGTYPE_p_ofImage_T_unsigned_char_t,_wrap_new_Image, swig_delete_Image, swig_ofImage__Sl_unsigned_SS_char_Sg__methods, swig_ofImage__Sl_unsigned_SS_char_Sg__attributes, { "Image", swig_ofImage__Sl_unsigned_SS_char_Sg__cls_methods, swig_ofImage__Sl_unsigned_SS_char_Sg__cls_attributes, swig_ofImage__Sl_unsigned_SS_char_Sg__cls_constants }, swig_ofImage__Sl_unsigned_SS_char_Sg__bases, swig_ofImage__Sl_unsigned_SS_char_Sg__base_names };

static int _wrap_new_Font(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *result = 0 ;
  SWIG_check_num_args("ofTrueTypeFont::ofTrueTypeFont",0,0) result = (ofTrueTypeFont *)new ofTrueTypeFont();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTrueTypeFont,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Font_setGlobalDpi(lua_State* L) { int SWIG_arg = 0; int arg1 ;
  SWIG_check_num_args("ofTrueTypeFont::setGlobalDpi",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofTrueTypeFont::setGlobalDpi",1,"int"); arg1 = (int)lua_tonumber(L, 1);
  ofTrueTypeFont::setGlobalDpi(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_loadFont__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool arg5 ; bool arg6 ; float arg7 ; int arg8 ; bool result;
  SWIG_check_num_args("ofTrueTypeFont::loadFont",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::loadFont",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::loadFont",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::loadFont",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::loadFont",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::loadFont",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofTrueTypeFont::loadFont",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTrueTypeFont::loadFont",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTrueTypeFont::loadFont",8,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_loadFont",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0); arg7 = (float)lua_tonumber(L, 7); arg8 = (int)lua_tonumber(L, 8);
  result = (bool)(arg1)->loadFont(arg2,arg3,arg4,arg5,arg6,arg7,arg8); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_loadFont__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool arg5 ; bool arg6 ; float arg7 ; bool result;
  SWIG_check_num_args("ofTrueTypeFont::loadFont",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::loadFont",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::loadFont",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::loadFont",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::loadFont",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::loadFont",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofTrueTypeFont::loadFont",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTrueTypeFont::loadFont",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_loadFont",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0); arg7 = (float)lua_tonumber(L, 7);
  result = (bool)(arg1)->loadFont(arg2,arg3,arg4,arg5,arg6,arg7); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_loadFont__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool arg5 ; bool arg6 ; bool result;
  SWIG_check_num_args("ofTrueTypeFont::loadFont",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::loadFont",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::loadFont",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::loadFont",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::loadFont",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::loadFont",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofTrueTypeFont::loadFont",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_loadFont",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0); result = (bool)(arg1)->loadFont(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_loadFont__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool arg5 ; bool result; SWIG_check_num_args("ofTrueTypeFont::loadFont",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::loadFont",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::loadFont",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::loadFont",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::loadFont",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTrueTypeFont::loadFont",5,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_loadFont",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  result = (bool)(arg1)->loadFont(arg2,arg3,arg4,arg5); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_loadFont__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool arg4 ; bool result; SWIG_check_num_args("ofTrueTypeFont::loadFont",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::loadFont",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::loadFont",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::loadFont",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofTrueTypeFont::loadFont",4,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_loadFont",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); result = (bool)(arg1)->loadFont(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_loadFont__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; int arg3 ; bool result; SWIG_check_num_args("ofTrueTypeFont::loadFont",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::loadFont",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::loadFont",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::loadFont",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_loadFont",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (int)lua_tonumber(L, 3); result = (bool)(arg1)->loadFont(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_loadFont(lua_State* L) { int argc; int argv[9]={ 1,2,3,4,5,6,7,8,9} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Font_loadFont__SWIG_5(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { return _wrap_Font_loadFont__SWIG_4(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_Font_loadFont__SWIG_3(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { return _wrap_Font_loadFont__SWIG_2(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Font_loadFont__SWIG_1(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isboolean(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isboolean(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Font_loadFont__SWIG_0(L);}  }  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Font_loadFont'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTrueTypeFont::loadFont(std::string,int,bool,bool,bool,float,int)\n"
  "    ofTrueTypeFont::loadFont(std::string,int,bool,bool,bool,float)\n"
  "    ofTrueTypeFont::loadFont(std::string,int,bool,bool,bool)\n" "    ofTrueTypeFont::loadFont(std::string,int,bool,bool)\n"
  "    ofTrueTypeFont::loadFont(std::string,int,bool)\n" "    ofTrueTypeFont::loadFont(std::string,int)\n");
  lua_error(L);return 0; }
static int _wrap_Font_isLoaded(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; bool result;
  SWIG_check_num_args("ofTrueTypeFont::isLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::isLoaded",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_isLoaded",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (bool)(arg1)->isLoaded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_isAntiAliased(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; bool result;
  SWIG_check_num_args("ofTrueTypeFont::isAntiAliased",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::isAntiAliased",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_isAntiAliased",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (bool)(arg1)->isAntiAliased();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_hasFullCharacterSet(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  bool result; SWIG_check_num_args("ofTrueTypeFont::hasFullCharacterSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::hasFullCharacterSet",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_hasFullCharacterSet",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (bool)(arg1)->hasFullCharacterSet();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getSize(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; int result;
  SWIG_check_num_args("ofTrueTypeFont::getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getSize",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getSize",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (int)(arg1)->getSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getLineHeight(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float result; SWIG_check_num_args("ofTrueTypeFont::getLineHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getLineHeight",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getLineHeight",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (float)(arg1)->getLineHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_setLineHeight(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; float arg2 ;
  SWIG_check_num_args("ofTrueTypeFont::setLineHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::setLineHeight",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::setLineHeight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_setLineHeight",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLineHeight(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getLetterSpacing(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float result; SWIG_check_num_args("ofTrueTypeFont::getLetterSpacing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getLetterSpacing",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getLetterSpacing",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (float)(arg1)->getLetterSpacing();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_setLetterSpacing(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTrueTypeFont::setLetterSpacing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::setLetterSpacing",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::setLetterSpacing",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_setLetterSpacing",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLetterSpacing(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getSpaceSize(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; float result;
  SWIG_check_num_args("ofTrueTypeFont::getSpaceSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getSpaceSize",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getSpaceSize",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (float)(arg1)->getSpaceSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_setSpaceSize(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; float arg2 ;
  SWIG_check_num_args("ofTrueTypeFont::setSpaceSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::setSpaceSize",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::setSpaceSize",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_setSpaceSize",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpaceSize(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_stringWidth(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; float result; SWIG_check_num_args("ofTrueTypeFont::stringWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::stringWidth",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::stringWidth",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_stringWidth",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (float)(arg1)->stringWidth(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_stringHeight(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; float result; SWIG_check_num_args("ofTrueTypeFont::stringHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::stringHeight",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::stringHeight",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_stringHeight",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (float)(arg1)->stringHeight(arg2); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getStringBoundingBox(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; float arg3 ; float arg4 ; ofRectangle result;
  SWIG_check_num_args("ofTrueTypeFont::getStringBoundingBox",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::getStringBoundingBox",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getStringBoundingBox",1,SWIGTYPE_p_ofTrueTypeFont); } 
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2)); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (arg1)->getStringBoundingBox(arg2,arg3,arg4); {
    ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Font_drawString(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofTrueTypeFont::drawString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::drawString",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::drawString",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::drawString",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::drawString",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_drawString",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->drawString(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_drawStringAsShapes(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; float arg3 ; float arg4 ; SWIG_check_num_args("ofTrueTypeFont::drawStringAsShapes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::drawStringAsShapes",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::drawStringAsShapes",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::drawStringAsShapes",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::drawStringAsShapes",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_drawStringAsShapes",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->drawStringAsShapes(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getNumCharacters(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  int result; SWIG_check_num_args("ofTrueTypeFont::getNumCharacters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getNumCharacters",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getNumCharacters",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (int)(arg1)->getNumCharacters();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getCharacterAsPoints__SWIG_0(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; int arg2 ; bool arg3 ; ofTTFCharacter result;
  SWIG_check_num_args("ofTrueTypeFont::getCharacterAsPoints",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getCharacterAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0); result = (arg1)->getCharacterAsPoints(arg2,arg3); {
    ofTTFCharacter * resultptr = new ofTTFCharacter((const ofTTFCharacter &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofTTFCharacter,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Font_getCharacterAsPoints__SWIG_1(lua_State* L) { int SWIG_arg = 0;
  ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ; int arg2 ; ofTTFCharacter result;
  SWIG_check_num_args("ofTrueTypeFont::getCharacterAsPoints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::getCharacterAsPoints",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getCharacterAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (int)lua_tonumber(L, 2);
  result = (arg1)->getCharacterAsPoints(arg2); {
    ofTTFCharacter * resultptr = new ofTTFCharacter((const ofTTFCharacter &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofTTFCharacter,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Font_getCharacterAsPoints(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Font_getCharacterAsPoints__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_Font_getCharacterAsPoints__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Font_getCharacterAsPoints'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTrueTypeFont::getCharacterAsPoints(int,bool)\n"
  "    ofTrueTypeFont::getCharacterAsPoints(int)\n"); lua_error(L);return 0; }
static int _wrap_Font_getStringAsPoints__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; bool arg3 ; SwigValueWrapper< std::vector< ofTTFCharacter > > result;
  SWIG_check_num_args("ofTrueTypeFont::getStringAsPoints",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getStringAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); result = (arg1)->getStringAsPoints(arg2,arg3); {
    std::vector< ofTTFCharacter > * resultptr = new std::vector< ofTTFCharacter >((const std::vector< ofTTFCharacter > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofTTFCharacter_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getStringAsPoints__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; SwigValueWrapper< std::vector< ofTTFCharacter > > result;
  SWIG_check_num_args("ofTrueTypeFont::getStringAsPoints",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringAsPoints",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getStringAsPoints",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (arg1)->getStringAsPoints(arg2); {
    std::vector< ofTTFCharacter > * resultptr = new std::vector< ofTTFCharacter >((const std::vector< ofTTFCharacter > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_ofTTFCharacter_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getStringAsPoints(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_Font_getStringAsPoints__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTrueTypeFont, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_Font_getStringAsPoints__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Font_getStringAsPoints'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTrueTypeFont::getStringAsPoints(std::string,bool)\n"
  "    ofTrueTypeFont::getStringAsPoints(std::string)\n"); lua_error(L);return 0; }
static int _wrap_Font_getStringMesh(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  std::string arg2 ; float arg3 ; float arg4 ; ofMesh *result = 0 ; SWIG_check_num_args("ofTrueTypeFont::getStringMesh",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",1,"ofTrueTypeFont *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",2,"std::string");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTrueTypeFont::getStringMesh",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getStringMesh",1,SWIGTYPE_p_ofTrueTypeFont); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  result = (ofMesh *) &(arg1)->getStringMesh(arg2,arg3,arg4); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMesh,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Font_getFontTexture(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofTrueTypeFont::getFontTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getFontTexture",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getFontTexture",1,SWIGTYPE_p_ofTrueTypeFont); }  result = (ofTexture *) &(arg1)->getFontTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Font_bind(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  SWIG_check_num_args("ofTrueTypeFont::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::bind",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_bind",1,SWIGTYPE_p_ofTrueTypeFont); }  (arg1)->bind(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Font_unbind(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  SWIG_check_num_args("ofTrueTypeFont::unbind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::unbind",1,"ofTrueTypeFont *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_unbind",1,SWIGTYPE_p_ofTrueTypeFont); }  (arg1)->unbind(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Font_getEncoding(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  ofTextEncoding result; SWIG_check_num_args("ofTrueTypeFont::getEncoding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::getEncoding",1,"ofTrueTypeFont const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_getEncoding",1,SWIGTYPE_p_ofTrueTypeFont); } 
  result = (ofTextEncoding)((ofTrueTypeFont const *)arg1)->getEncoding();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Font_setEncoding(lua_State* L) { int SWIG_arg = 0; ofTrueTypeFont *arg1 = (ofTrueTypeFont *) 0 ;
  ofTextEncoding arg2 ; SWIG_check_num_args("ofTrueTypeFont::setEncoding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTrueTypeFont::setEncoding",1,"ofTrueTypeFont *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTrueTypeFont::setEncoding",2,"ofTextEncoding");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTrueTypeFont,0))){
    SWIG_fail_ptr("Font_setEncoding",1,SWIGTYPE_p_ofTrueTypeFont); }  arg2 = (ofTextEncoding)(int)lua_tonumber(L, 2);
  (arg1)->setEncoding(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Font(void *obj) {
ofTrueTypeFont *arg1 = (ofTrueTypeFont *) obj;
delete arg1;
}
static swig_lua_method swig_ofTrueTypeFont_methods[] = {
    {"loadFont", _wrap_Font_loadFont}, 
    {"isLoaded", _wrap_Font_isLoaded}, 
    {"isAntiAliased", _wrap_Font_isAntiAliased}, 
    {"hasFullCharacterSet", _wrap_Font_hasFullCharacterSet}, 
    {"getSize", _wrap_Font_getSize}, 
    {"getLineHeight", _wrap_Font_getLineHeight}, 
    {"setLineHeight", _wrap_Font_setLineHeight}, 
    {"getLetterSpacing", _wrap_Font_getLetterSpacing}, 
    {"setLetterSpacing", _wrap_Font_setLetterSpacing}, 
    {"getSpaceSize", _wrap_Font_getSpaceSize}, 
    {"setSpaceSize", _wrap_Font_setSpaceSize}, 
    {"stringWidth", _wrap_Font_stringWidth}, 
    {"stringHeight", _wrap_Font_stringHeight}, 
    {"getStringBoundingBox", _wrap_Font_getStringBoundingBox}, 
    {"drawString", _wrap_Font_drawString}, 
    {"drawStringAsShapes", _wrap_Font_drawStringAsShapes}, 
    {"getNumCharacters", _wrap_Font_getNumCharacters}, 
    {"getCharacterAsPoints", _wrap_Font_getCharacterAsPoints}, 
    {"getStringAsPoints", _wrap_Font_getStringAsPoints}, 
    {"getStringMesh", _wrap_Font_getStringMesh}, 
    {"getFontTexture", _wrap_Font_getFontTexture}, 
    {"bind", _wrap_Font_bind}, 
    {"unbind", _wrap_Font_unbind}, 
    {"getEncoding", _wrap_Font_getEncoding}, 
    {"setEncoding", _wrap_Font_setEncoding}, 
    {0,0}
};
static swig_lua_attribute swig_ofTrueTypeFont_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofTrueTypeFont_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofTrueTypeFont_cls_methods[] = {
    {"setGlobalDpi", _wrap_Font_setGlobalDpi}, 
    {0,0}
};
static swig_lua_const_info swig_ofTrueTypeFont_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofTrueTypeFont_bases[] = {0};
static const char *swig_ofTrueTypeFont_base_names[] = {0};
static swig_lua_class _wrap_class_ofTrueTypeFont = { "Font", &SWIGTYPE_p_ofTrueTypeFont,_wrap_new_Font, swig_delete_Font, swig_ofTrueTypeFont_methods, swig_ofTrueTypeFont_attributes, { "Font", swig_ofTrueTypeFont_cls_methods, swig_ofTrueTypeFont_cls_attributes, swig_ofTrueTypeFont_cls_constants }, swig_ofTrueTypeFont_bases, swig_ofTrueTypeFont_base_names };

static int _wrap_new_Fbo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *result = 0 ; SWIG_check_num_args("ofFbo::ofFbo",0,0)
  result = (ofFbo *)new ofFbo(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFbo,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Fbo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = 0 ; ofFbo *result = 0 ;
  SWIG_check_num_args("ofFbo::ofFbo",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofFbo::ofFbo",1,"ofFbo const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("new_Fbo",1,SWIGTYPE_p_ofFbo); } 
  result = (ofFbo *)new ofFbo((ofFbo const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofFbo,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Fbo(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Fbo__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Fbo__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Fbo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::ofFbo()\n" "    ofFbo::ofFbo(ofFbo const &)\n"); lua_error(L);return 0; }
static int _wrap_Fbo_allocate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; int arg5 ; SWIG_check_num_args("ofFbo::allocate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofFbo::allocate",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofFbo::allocate",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->allocate(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Fbo_allocate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; SWIG_check_num_args("ofFbo::allocate",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofFbo::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_allocate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofFbo::allocate",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::allocate",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); (arg1)->allocate(arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_allocate__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofFbo::Settings arg2 ;
  ofFbo::Settings *argp2 ; SWIG_check_num_args("ofFbo::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::allocate",2,"ofFbo::Settings");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofFbo__Settings,0))){
    SWIG_fail_ptr("Fbo_allocate",2,SWIGTYPE_p_ofFbo__Settings); }  arg2 = *argp2; (arg1)->allocate(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_allocate__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::allocate",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::allocate",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_allocate",1,SWIGTYPE_p_ofFbo); } 
  (arg1)->allocate(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_allocate(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Fbo_allocate__SWIG_4(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofFbo__Settings, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Fbo_allocate__SWIG_3(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Fbo_allocate__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Fbo_allocate__SWIG_1(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Fbo_allocate__SWIG_0(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fbo_allocate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::allocate(int,int,int,int)\n" "    ofFbo::allocate(int,int,int)\n" "    ofFbo::allocate(int,int)\n"
  "    ofFbo::allocate(ofFbo::Settings)\n" "    ofFbo::allocate()\n"); lua_error(L);return 0; }
static int _wrap_Fbo_isAllocated(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; bool result;
  SWIG_check_num_args("ofFbo::isAllocated",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::isAllocated",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_isAllocated",1,SWIGTYPE_p_ofFbo); }
   result = (bool)(arg1)->isAllocated(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_draw__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofFbo::draw",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::draw",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::draw",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_draw",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); (arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float arg2 ; float arg3 ;
  float arg4 ; float arg5 ; SWIG_check_num_args("ofFbo::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::draw",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::draw",2,"float"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofFbo::draw",4,"float"); if(!lua_isnumber(L,5)) SWIG_fail_arg("ofFbo::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_draw",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5); (arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Fbo_draw(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Fbo_draw__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Fbo_draw__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fbo_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::draw(float,float)\n" "    ofFbo::draw(float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Fbo_setAnchorPercent(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofFbo::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setAnchorPercent",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_setAnchorPercent",1,SWIGTYPE_p_ofFbo); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Fbo_setAnchorPoint(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float arg2 ; float arg3 ;
  SWIG_check_num_args("ofFbo::setAnchorPoint",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setAnchorPoint",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_setAnchorPoint",1,SWIGTYPE_p_ofFbo); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Fbo_resetAnchor(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::resetAnchor",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::resetAnchor",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_resetAnchor",1,SWIGTYPE_p_ofFbo); }
   (arg1)->resetAnchor(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_setDefaultTextureIndex(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  SWIG_check_num_args("ofFbo::setDefaultTextureIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setDefaultTextureIndex",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::setDefaultTextureIndex",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_setDefaultTextureIndex",1,SWIGTYPE_p_ofFbo); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDefaultTextureIndex(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_getDefaultTextureIndex(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int result;
  SWIG_check_num_args("ofFbo::getDefaultTextureIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getDefaultTextureIndex",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_getDefaultTextureIndex",1,SWIGTYPE_p_ofFbo); }  result = (int)(arg1)->getDefaultTextureIndex();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_getTextureReference__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getTextureReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTextureReference",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_getTextureReference",1,SWIGTYPE_p_ofFbo); }  result = (ofTexture *) &(arg1)->getTextureReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Fbo_getTextureReference__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  ofTexture *result = 0 ; SWIG_check_num_args("ofFbo::getTextureReference",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getTextureReference",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::getTextureReference",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_getTextureReference",1,SWIGTYPE_p_ofFbo); }  arg2 = (int)lua_tonumber(L, 2);
  result = (ofTexture *) &(arg1)->getTextureReference(arg2); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_getTextureReference(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Fbo_getTextureReference__SWIG_0(L);}  }  if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_Fbo_getTextureReference__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fbo_getTextureReference'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFbo::getTextureReference()\n" "    ofFbo::getTextureReference(int)\n");
  lua_error(L);return 0; }
static int _wrap_Fbo_getDepthTexture(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofTexture *result = 0 ;
  SWIG_check_num_args("ofFbo::getDepthTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getDepthTexture",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_getDepthTexture",1,SWIGTYPE_p_ofFbo); }  result = (ofTexture *) &(arg1)->getDepthTexture();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTexture,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Fbo_begin__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofFbo::begin",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::begin",1,"ofFbo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofFbo::begin",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_begin",1,SWIGTYPE_p_ofFbo); } 
  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->begin(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_begin__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::begin",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::begin",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_begin",1,SWIGTYPE_p_ofFbo); } 
  (arg1)->begin(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_begin(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Fbo_begin__SWIG_1(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) { return _wrap_Fbo_begin__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fbo_begin'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::begin(bool)\n" "    ofFbo::begin()\n"); lua_error(L);return 0; }
static int _wrap_Fbo_end(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; SWIG_check_num_args("ofFbo::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::end",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_end",1,SWIGTYPE_p_ofFbo); } 
  (arg1)->end(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_readToPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofPixels *arg2 = 0 ;
  int arg3 ; SWIG_check_num_args("ofFbo::readToPixels",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofPixels &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::readToPixels",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_readToPixels",1,SWIGTYPE_p_ofFbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Fbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->readToPixels(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_readToPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; ofPixels *arg2 = 0 ;
  SWIG_check_num_args("ofFbo::readToPixels",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_readToPixels",1,SWIGTYPE_p_ofFbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Fbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->readToPixels(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_readToPixels__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofShortPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofFbo::readToPixels",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofShortPixels &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::readToPixels",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_readToPixels",1,SWIGTYPE_p_ofFbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("Fbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->readToPixels(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_readToPixels__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofShortPixels *arg2 = 0 ; SWIG_check_num_args("ofFbo::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofShortPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_readToPixels",1,SWIGTYPE_p_ofFbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("Fbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  (arg1)->readToPixels(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_readToPixels__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofFloatPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofFbo::readToPixels",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofFloatPixels &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofFbo::readToPixels",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_readToPixels",1,SWIGTYPE_p_ofFbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("Fbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->readToPixels(*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_readToPixels__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  ofFloatPixels *arg2 = 0 ; SWIG_check_num_args("ofFbo::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::readToPixels",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::readToPixels",2,"ofFloatPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_readToPixels",1,SWIGTYPE_p_ofFbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("Fbo_readToPixels",2,SWIGTYPE_p_ofPixels_T_float_t); }  (arg1)->readToPixels(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_readToPixels(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Fbo_readToPixels__SWIG_1(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Fbo_readToPixels__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Fbo_readToPixels__SWIG_5(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Fbo_readToPixels__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Fbo_readToPixels__SWIG_4(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Fbo_readToPixels__SWIG_2(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fbo_readToPixels'\n" "  Possible C/C++ prototypes are:\n"
  "    ofFbo::readToPixels(ofPixels &,int)\n" "    ofFbo::readToPixels(ofPixels &)\n"
  "    ofFbo::readToPixels(ofShortPixels &,int)\n" "    ofFbo::readToPixels(ofShortPixels &)\n"
  "    ofFbo::readToPixels(ofFloatPixels &,int)\n" "    ofFbo::readToPixels(ofFloatPixels &)\n"); lua_error(L);return 0; }
static int _wrap_Fbo_getWidth(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float result;
  SWIG_check_num_args("ofFbo::getWidth",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getWidth",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_getWidth",1,SWIGTYPE_p_ofFbo); } 
  result = (float)(arg1)->getWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_getHeight(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; float result;
  SWIG_check_num_args("ofFbo::getHeight",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getHeight",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_getHeight",1,SWIGTYPE_p_ofFbo); } 
  result = (float)(arg1)->getHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_bind(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; SWIG_check_num_args("ofFbo::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::bind",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_bind",1,SWIGTYPE_p_ofFbo); } 
  (arg1)->bind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_unbind(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::unbind",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::unbind",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_unbind",1,SWIGTYPE_p_ofFbo); } 
  (arg1)->unbind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_checkStatus(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; bool result;
  SWIG_check_num_args("ofFbo::checkStatus",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::checkStatus",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_checkStatus",1,SWIGTYPE_p_ofFbo); }
   result = (bool)(arg1)->checkStatus(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_createAndAttachTexture(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLenum arg2 ;
  GLenum arg3 ; GLenum *argp2 ; GLenum *argp3 ; SWIG_check_num_args("ofFbo::createAndAttachTexture",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::createAndAttachTexture",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::createAndAttachTexture",2,"GLenum");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofFbo::createAndAttachTexture",3,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_createAndAttachTexture",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachTexture",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachTexture",3,SWIGTYPE_p_GLenum); }  arg3 = *argp3;
  (arg1)->createAndAttachTexture(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_createAndAttachRenderbuffer(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLenum arg2 ;
  GLenum arg3 ; GLenum *argp2 ; GLenum *argp3 ; GLuint result; SWIG_check_num_args("ofFbo::createAndAttachRenderbuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::createAndAttachRenderbuffer",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::createAndAttachRenderbuffer",2,"GLenum");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofFbo::createAndAttachRenderbuffer",3,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_createAndAttachRenderbuffer",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachRenderbuffer",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachRenderbuffer",3,SWIGTYPE_p_GLenum); }  arg3 = *argp3;
  result = (arg1)->createAndAttachRenderbuffer(arg2,arg3); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_createAndAttachDepthStencilTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  GLenum arg2 ; GLint arg3 ; GLenum arg4 ; GLenum *argp2 ; GLint *argp3 ; GLenum *argp4 ;
  SWIG_check_num_args("ofFbo::createAndAttachDepthStencilTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",2,"GLenum");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",3,"GLint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",4,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",3,SWIGTYPE_p_GLint); }  arg3 = *argp3;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",4,SWIGTYPE_p_GLenum); }  arg4 = *argp4;
  (arg1)->createAndAttachDepthStencilTexture(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Fbo_createAndAttachDepthStencilTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  GLenum arg2 ; GLint arg3 ; GLenum arg4 ; GLenum arg5 ; GLenum arg6 ; GLenum *argp2 ; GLint *argp3 ; GLenum *argp4 ;
  GLenum *argp5 ; GLenum *argp6 ; SWIG_check_num_args("ofFbo::createAndAttachDepthStencilTexture",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",2,"GLenum");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",3,"GLint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",4,"GLenum");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",5,"GLenum");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ofFbo::createAndAttachDepthStencilTexture",6,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",3,SWIGTYPE_p_GLint); }  arg3 = *argp3;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",4,SWIGTYPE_p_GLenum); }  arg4 = *argp4;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",5,SWIGTYPE_p_GLenum); }  arg5 = *argp5;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Fbo_createAndAttachDepthStencilTexture",6,SWIGTYPE_p_GLenum); }  arg6 = *argp6;
  (arg1)->createAndAttachDepthStencilTexture(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Fbo_createAndAttachDepthStencilTexture(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ;
  argc = lua_gettop(L); if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_GLint, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Fbo_createAndAttachDepthStencilTexture__SWIG_0(L);}  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofFbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_GLint, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { { void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) { _v = 0; }
                 else { _v = 1; }  }  if (_v) { return _wrap_Fbo_createAndAttachDepthStencilTexture__SWIG_1(L);}  }  }  }  }  }
     }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Fbo_createAndAttachDepthStencilTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofFbo::createAndAttachDepthStencilTexture(GLenum,GLint,GLenum)\n"
  "    ofFbo::createAndAttachDepthStencilTexture(GLenum,GLint,GLenum,GLenum,GLenum)\n"); lua_error(L);return 0; }
static int _wrap_Fbo_getNumTextures(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int result;
  SWIG_check_num_args("ofFbo::getNumTextures",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getNumTextures",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_getNumTextures",1,SWIGTYPE_p_ofFbo); }  result = (int)(arg1)->getNumTextures();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_setActiveDrawBuffer(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; int arg2 ;
  SWIG_check_num_args("ofFbo::setActiveDrawBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setActiveDrawBuffer",1,"ofFbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofFbo::setActiveDrawBuffer",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_setActiveDrawBuffer",1,SWIGTYPE_p_ofFbo); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setActiveDrawBuffer(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_setActiveDrawBuffers(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  std::vector< int > *arg2 = 0 ; SWIG_check_num_args("ofFbo::setActiveDrawBuffers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::setActiveDrawBuffers",1,"ofFbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofFbo::setActiveDrawBuffers",2,"std::vector< int > const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_setActiveDrawBuffers",1,SWIGTYPE_p_ofFbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("Fbo_setActiveDrawBuffers",2,SWIGTYPE_p_std__vectorT_int_t); } 
  (arg1)->setActiveDrawBuffers((std::vector< int > const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Fbo_activateAllDrawBuffers(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ;
  SWIG_check_num_args("ofFbo::activateAllDrawBuffers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::activateAllDrawBuffers",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_activateAllDrawBuffers",1,SWIGTYPE_p_ofFbo); }  (arg1)->activateAllDrawBuffers(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_getFbo(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofFbo::getFbo",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getFbo",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){ SWIG_fail_ptr("Fbo_getFbo",1,SWIGTYPE_p_ofFbo); } 
  result = (arg1)->getFbo(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_checkGLSupport(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofFbo::checkGLSupport",0,0) result = (bool)ofFbo::checkGLSupport();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_maxColorAttachments(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofFbo::maxColorAttachments",0,0) result = (int)ofFbo::maxColorAttachments();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_maxDrawBuffers(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofFbo::maxDrawBuffers",0,0) result = (int)ofFbo::maxDrawBuffers();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_maxSamples(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofFbo::maxSamples",0,0)
  result = (int)ofFbo::maxSamples(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_getDepthBuffer(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofFbo::getDepthBuffer",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getDepthBuffer",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_getDepthBuffer",1,SWIGTYPE_p_ofFbo); }  result = (arg1)->getDepthBuffer(); {
    GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Fbo_getStencilBuffer(lua_State* L) { int SWIG_arg = 0; ofFbo *arg1 = (ofFbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofFbo::getStencilBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofFbo::getStencilBuffer",1,"ofFbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofFbo,0))){
    SWIG_fail_ptr("Fbo_getStencilBuffer",1,SWIGTYPE_p_ofFbo); }  result = (arg1)->getStencilBuffer(); {
    GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_Fbo(void *obj) {
ofFbo *arg1 = (ofFbo *) obj;
delete arg1;
}
static swig_lua_method swig_ofFbo_methods[] = {
    {"allocate", _wrap_Fbo_allocate}, 
    {"isAllocated", _wrap_Fbo_isAllocated}, 
    {"draw", _wrap_Fbo_draw}, 
    {"setAnchorPercent", _wrap_Fbo_setAnchorPercent}, 
    {"setAnchorPoint", _wrap_Fbo_setAnchorPoint}, 
    {"resetAnchor", _wrap_Fbo_resetAnchor}, 
    {"setDefaultTextureIndex", _wrap_Fbo_setDefaultTextureIndex}, 
    {"getDefaultTextureIndex", _wrap_Fbo_getDefaultTextureIndex}, 
    {"getTextureReference", _wrap_Fbo_getTextureReference}, 
    {"getDepthTexture", _wrap_Fbo_getDepthTexture}, 
    {"begin", _wrap_Fbo_begin}, 
    {"end", _wrap_Fbo_end}, 
    {"readToPixels", _wrap_Fbo_readToPixels}, 
    {"getWidth", _wrap_Fbo_getWidth}, 
    {"getHeight", _wrap_Fbo_getHeight}, 
    {"bind", _wrap_Fbo_bind}, 
    {"unbind", _wrap_Fbo_unbind}, 
    {"checkStatus", _wrap_Fbo_checkStatus}, 
    {"createAndAttachTexture", _wrap_Fbo_createAndAttachTexture}, 
    {"createAndAttachRenderbuffer", _wrap_Fbo_createAndAttachRenderbuffer}, 
    {"createAndAttachDepthStencilTexture", _wrap_Fbo_createAndAttachDepthStencilTexture}, 
    {"getNumTextures", _wrap_Fbo_getNumTextures}, 
    {"setActiveDrawBuffer", _wrap_Fbo_setActiveDrawBuffer}, 
    {"setActiveDrawBuffers", _wrap_Fbo_setActiveDrawBuffers}, 
    {"activateAllDrawBuffers", _wrap_Fbo_activateAllDrawBuffers}, 
    {"getFbo", _wrap_Fbo_getFbo}, 
    {"getDepthBuffer", _wrap_Fbo_getDepthBuffer}, 
    {"getStencilBuffer", _wrap_Fbo_getStencilBuffer}, 
    {0,0}
};
static swig_lua_attribute swig_ofFbo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofFbo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofFbo_cls_methods[] = {
    {"checkGLSupport", _wrap_Fbo_checkGLSupport}, 
    {"maxColorAttachments", _wrap_Fbo_maxColorAttachments}, 
    {"maxDrawBuffers", _wrap_Fbo_maxDrawBuffers}, 
    {"maxSamples", _wrap_Fbo_maxSamples}, 
    {0,0}
};
static swig_lua_const_info swig_ofFbo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofFbo_bases[] = {0,0};
static const char *swig_ofFbo_base_names[] = {"ofBaseHasTexture *",0};
static swig_lua_class _wrap_class_ofFbo = { "Fbo", &SWIGTYPE_p_ofFbo,_wrap_new_Fbo, swig_delete_Fbo, swig_ofFbo_methods, swig_ofFbo_attributes, { "Fbo", swig_ofFbo_cls_methods, swig_ofFbo_cls_attributes, swig_ofFbo_cls_constants }, swig_ofFbo_bases, swig_ofFbo_base_names };

static int _wrap_ofEnableLighting(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableLighting",0,0)
  ofEnableLighting(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableLighting(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableLighting",0,0)
  ofDisableLighting(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofEnableSeparateSpecularLight(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofEnableSeparateSpecularLight",0,0) ofEnableSeparateSpecularLight(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofDisableSeparateSpecularLight(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofDisableSeparateSpecularLight",0,0) ofDisableSeparateSpecularLight(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofGetLightingEnabled(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofGetLightingEnabled",0,0) result = (bool)ofGetLightingEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofSetSmoothLighting(lua_State* L) { int SWIG_arg = 0; bool arg1 ;
  SWIG_check_num_args("ofSetSmoothLighting",1,1) if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetSmoothLighting",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0); ofSetSmoothLighting(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_ofSetGlobalAmbientColor(lua_State* L) { int SWIG_arg = 0; ofColor *arg1 = 0 ;
  SWIG_check_num_args("ofSetGlobalAmbientColor",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetGlobalAmbientColor",1,"ofColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofColor_T_unsigned_char_t,0))){
    SWIG_fail_ptr("ofSetGlobalAmbientColor",1,SWIGTYPE_p_ofColor_T_unsigned_char_t); } 
  ofSetGlobalAmbientColor((ofColor_< unsigned char > const &)*arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Light__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofLight *result = 0 ;
  SWIG_check_num_args("ofLight::ofLight",0,0) result = (ofLight *)new ofLight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofLight,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Light__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = 0 ; ofLight *result = 0 ;
  SWIG_check_num_args("ofLight::ofLight",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofLight::ofLight",1,"ofLight const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){ SWIG_fail_ptr("new_Light",1,SWIGTYPE_p_ofLight); } 
  result = (ofLight *)new ofLight((ofLight const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofLight,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Light(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Light__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Light__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Light'\n" "  Possible C/C++ prototypes are:\n"
  "    ofLight::ofLight()\n" "    ofLight::ofLight(ofLight const &)\n"); lua_error(L);return 0; }
static int _wrap_Light_destroy(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::destroy",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::destroy",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_destroy",1,SWIGTYPE_p_ofLight); }  (arg1)->destroy(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Light_setup(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setup",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setup",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){ SWIG_fail_ptr("Light_setup",1,SWIGTYPE_p_ofLight); }
   (arg1)->setup(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_enable(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::enable",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::enable",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){ SWIG_fail_ptr("Light_enable",1,SWIGTYPE_p_ofLight); }
   (arg1)->enable(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_disable(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::disable",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::disable",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_disable",1,SWIGTYPE_p_ofLight); }  (arg1)->disable(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Light_getIsEnabled(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; bool result;
  SWIG_check_num_args("ofLight::getIsEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getIsEnabled",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getIsEnabled",1,SWIGTYPE_p_ofLight); }  result = (bool)((ofLight const *)arg1)->getIsEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setDirectional(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setDirectional",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setDirectional",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setDirectional",1,SWIGTYPE_p_ofLight); }  (arg1)->setDirectional(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getIsDirectional(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; bool result;
  SWIG_check_num_args("ofLight::getIsDirectional",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getIsDirectional",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getIsDirectional",1,SWIGTYPE_p_ofLight); }  result = (bool)((ofLight const *)arg1)->getIsDirectional();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setSpotlight__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofLight::setSpotlight",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotlight",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setSpotlight",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLight::setSpotlight",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setSpotlight",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setSpotlight(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Light_setSpotlight__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  SWIG_check_num_args("ofLight::setSpotlight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotlight",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setSpotlight",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setSpotlight",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setSpotlight(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setSpotlight__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setSpotlight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotlight",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setSpotlight",1,SWIGTYPE_p_ofLight); }  (arg1)->setSpotlight(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Light_setSpotlight(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_Light_setSpotlight__SWIG_2(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Light_setSpotlight__SWIG_1(L);}  }  } 
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Light_setSpotlight__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Light_setSpotlight'\n" "  Possible C/C++ prototypes are:\n"
  "    ofLight::setSpotlight(float,float)\n" "    ofLight::setSpotlight(float)\n" "    ofLight::setSpotlight()\n");
  lua_error(L);return 0; }
static int _wrap_Light_getIsSpotlight(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; bool result;
  SWIG_check_num_args("ofLight::getIsSpotlight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getIsSpotlight",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getIsSpotlight",1,SWIGTYPE_p_ofLight); }  result = (bool)(arg1)->getIsSpotlight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setSpotlightCutOff(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  SWIG_check_num_args("ofLight::setSpotlightCutOff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotlightCutOff",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setSpotlightCutOff",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setSpotlightCutOff",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpotlightCutOff(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getSpotlightCutOff(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getSpotlightCutOff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getSpotlightCutOff",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getSpotlightCutOff",1,SWIGTYPE_p_ofLight); }  result = (float)(arg1)->getSpotlightCutOff();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setSpotConcentration(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  SWIG_check_num_args("ofLight::setSpotConcentration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpotConcentration",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setSpotConcentration",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setSpotConcentration",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpotConcentration(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getSpotConcentration(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getSpotConcentration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getSpotConcentration",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getSpotConcentration",1,SWIGTYPE_p_ofLight); }  result = (float)(arg1)->getSpotConcentration();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setPointLight(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setPointLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setPointLight",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setPointLight",1,SWIGTYPE_p_ofLight); }  (arg1)->setPointLight(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getIsPointLight(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; bool result;
  SWIG_check_num_args("ofLight::getIsPointLight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getIsPointLight",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getIsPointLight",1,SWIGTYPE_p_ofLight); }  result = (bool)(arg1)->getIsPointLight();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setAttenuation__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofLight::setAttenuation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAttenuation",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setAttenuation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLight::setAttenuation",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofLight::setAttenuation",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setAttenuation",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->setAttenuation(arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setAttenuation__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofLight::setAttenuation",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAttenuation",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setAttenuation",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofLight::setAttenuation",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setAttenuation",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAttenuation(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Light_setAttenuation__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float arg2 ;
  SWIG_check_num_args("ofLight::setAttenuation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAttenuation",1,"ofLight *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofLight::setAttenuation",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setAttenuation",1,SWIGTYPE_p_ofLight); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAttenuation(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setAttenuation__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SWIG_check_num_args("ofLight::setAttenuation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAttenuation",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setAttenuation",1,SWIGTYPE_p_ofLight); }  (arg1)->setAttenuation(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setAttenuation(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_Light_setAttenuation__SWIG_3(L);}  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { return _wrap_Light_setAttenuation__SWIG_2(L);}  }  }
   if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Light_setAttenuation__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofLight, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Light_setAttenuation__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Light_setAttenuation'\n"
  "  Possible C/C++ prototypes are:\n" "    ofLight::setAttenuation(float,float,float)\n"
  "    ofLight::setAttenuation(float,float)\n" "    ofLight::setAttenuation(float)\n" "    ofLight::setAttenuation()\n");
  lua_error(L);return 0; }
static int _wrap_Light_getAttenuationConstant(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getAttenuationConstant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getAttenuationConstant",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getAttenuationConstant",1,SWIGTYPE_p_ofLight); }  result = (float)(arg1)->getAttenuationConstant();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getAttenuationLinear(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getAttenuationLinear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getAttenuationLinear",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getAttenuationLinear",1,SWIGTYPE_p_ofLight); }  result = (float)(arg1)->getAttenuationLinear();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getAttenuationQuadratic(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; float result;
  SWIG_check_num_args("ofLight::getAttenuationQuadratic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getAttenuationQuadratic",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getAttenuationQuadratic",1,SWIGTYPE_p_ofLight); }  result = (float)(arg1)->getAttenuationQuadratic();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getType(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; int result;
  SWIG_check_num_args("ofLight::getType",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getType",1,"ofLight *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getType",1,SWIGTYPE_p_ofLight); }  result = (int)(arg1)->getType();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setAmbientColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  ofFloatColor *arg2 = 0 ; SWIG_check_num_args("ofLight::setAmbientColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setAmbientColor",1,"ofLight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLight::setAmbientColor",2,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setAmbientColor",1,SWIGTYPE_p_ofLight); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Light_setAmbientColor",2,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setAmbientColor((ofFloatColor const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setDiffuseColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  ofFloatColor *arg2 = 0 ; SWIG_check_num_args("ofLight::setDiffuseColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setDiffuseColor",1,"ofLight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLight::setDiffuseColor",2,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setDiffuseColor",1,SWIGTYPE_p_ofLight); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Light_setDiffuseColor",2,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setDiffuseColor((ofFloatColor const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_setSpecularColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  ofFloatColor *arg2 = 0 ; SWIG_check_num_args("ofLight::setSpecularColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::setSpecularColor",1,"ofLight *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofLight::setSpecularColor",2,"ofFloatColor const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_setSpecularColor",1,SWIGTYPE_p_ofLight); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Light_setSpecularColor",2,SWIGTYPE_p_ofColor_T_float_t); } 
  (arg1)->setSpecularColor((ofFloatColor const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getAmbientColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SwigValueWrapper< ofColor_< float > > result; SWIG_check_num_args("ofLight::getAmbientColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getAmbientColor",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getAmbientColor",1,SWIGTYPE_p_ofLight); }  result = ((ofLight const *)arg1)->getAmbientColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getDiffuseColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SwigValueWrapper< ofColor_< float > > result; SWIG_check_num_args("ofLight::getDiffuseColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getDiffuseColor",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getDiffuseColor",1,SWIGTYPE_p_ofLight); }  result = ((ofLight const *)arg1)->getDiffuseColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getSpecularColor(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ;
  SwigValueWrapper< ofColor_< float > > result; SWIG_check_num_args("ofLight::getSpecularColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getSpecularColor",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getSpecularColor",1,SWIGTYPE_p_ofLight); }  result = ((ofLight const *)arg1)->getSpecularColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Light_getLightID(lua_State* L) { int SWIG_arg = 0; ofLight *arg1 = (ofLight *) 0 ; int result;
  SWIG_check_num_args("ofLight::getLightID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofLight::getLightID",1,"ofLight const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofLight,0))){
    SWIG_fail_ptr("Light_getLightID",1,SWIGTYPE_p_ofLight); }  result = (int)((ofLight const *)arg1)->getLightID();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Light(void *obj) {
ofLight *arg1 = (ofLight *) obj;
delete arg1;
}
static swig_lua_method swig_ofLight_methods[] = {
    {"destroy", _wrap_Light_destroy}, 
    {"setup", _wrap_Light_setup}, 
    {"enable", _wrap_Light_enable}, 
    {"disable", _wrap_Light_disable}, 
    {"getIsEnabled", _wrap_Light_getIsEnabled}, 
    {"setDirectional", _wrap_Light_setDirectional}, 
    {"getIsDirectional", _wrap_Light_getIsDirectional}, 
    {"setSpotlight", _wrap_Light_setSpotlight}, 
    {"getIsSpotlight", _wrap_Light_getIsSpotlight}, 
    {"setSpotlightCutOff", _wrap_Light_setSpotlightCutOff}, 
    {"getSpotlightCutOff", _wrap_Light_getSpotlightCutOff}, 
    {"setSpotConcentration", _wrap_Light_setSpotConcentration}, 
    {"getSpotConcentration", _wrap_Light_getSpotConcentration}, 
    {"setPointLight", _wrap_Light_setPointLight}, 
    {"getIsPointLight", _wrap_Light_getIsPointLight}, 
    {"setAttenuation", _wrap_Light_setAttenuation}, 
    {"getAttenuationConstant", _wrap_Light_getAttenuationConstant}, 
    {"getAttenuationLinear", _wrap_Light_getAttenuationLinear}, 
    {"getAttenuationQuadratic", _wrap_Light_getAttenuationQuadratic}, 
    {"getType", _wrap_Light_getType}, 
    {"setAmbientColor", _wrap_Light_setAmbientColor}, 
    {"setDiffuseColor", _wrap_Light_setDiffuseColor}, 
    {"setSpecularColor", _wrap_Light_setSpecularColor}, 
    {"getAmbientColor", _wrap_Light_getAmbientColor}, 
    {"getDiffuseColor", _wrap_Light_getDiffuseColor}, 
    {"getSpecularColor", _wrap_Light_getSpecularColor}, 
    {"getLightID", _wrap_Light_getLightID}, 
    {0,0}
};
static swig_lua_attribute swig_ofLight_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofLight_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofLight_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofLight_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofLight_bases[] = {0,0};
static const char *swig_ofLight_base_names[] = {"ofNode *",0};
static swig_lua_class _wrap_class_ofLight = { "Light", &SWIGTYPE_p_ofLight,_wrap_new_Light, swig_delete_Light, swig_ofLight_methods, swig_ofLight_attributes, { "Light", swig_ofLight_cls_methods, swig_ofLight_cls_attributes, swig_ofLight_cls_constants }, swig_ofLight_bases, swig_ofLight_base_names };

static int _wrap_new_Material(lua_State* L) { int SWIG_arg = 0; ofMaterial *result = 0 ;
  SWIG_check_num_args("ofMaterial::ofMaterial",0,0) result = (ofMaterial *)new ofMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMaterial,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Material_setColors(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SwigValueWrapper< ofColor_< float > > arg2 ; SwigValueWrapper< ofColor_< float > > arg3 ;
  SwigValueWrapper< ofColor_< float > > arg4 ; SwigValueWrapper< ofColor_< float > > arg5 ; ofFloatColor *argp2 ;
  ofFloatColor *argp3 ; ofFloatColor *argp4 ; ofFloatColor *argp5 ; SWIG_check_num_args("ofMaterial::setColors",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setColors",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setColors",2,"ofFloatColor");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofMaterial::setColors",3,"ofFloatColor");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofMaterial::setColors",4,"ofFloatColor");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofMaterial::setColors",5,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_setColors",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Material_setColors",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Material_setColors",3,SWIGTYPE_p_ofColor_T_float_t); }  arg3 = *argp3;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Material_setColors",4,SWIGTYPE_p_ofColor_T_float_t); }  arg4 = *argp4;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Material_setColors",5,SWIGTYPE_p_ofColor_T_float_t); }  arg5 = *argp5;
  (arg1)->setColors(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_setDiffuseColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SwigValueWrapper< ofColor_< float > > arg2 ; ofFloatColor *argp2 ; SWIG_check_num_args("ofMaterial::setDiffuseColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setDiffuseColor",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setDiffuseColor",2,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_setDiffuseColor",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Material_setDiffuseColor",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2; (arg1)->setDiffuseColor(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_setAmbientColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SwigValueWrapper< ofColor_< float > > arg2 ; ofFloatColor *argp2 ; SWIG_check_num_args("ofMaterial::setAmbientColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setAmbientColor",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setAmbientColor",2,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_setAmbientColor",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Material_setAmbientColor",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2; (arg1)->setAmbientColor(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_setSpecularColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SwigValueWrapper< ofColor_< float > > arg2 ; ofFloatColor *argp2 ; SWIG_check_num_args("ofMaterial::setSpecularColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setSpecularColor",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setSpecularColor",2,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_setSpecularColor",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Material_setSpecularColor",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2; (arg1)->setSpecularColor(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_setEmissiveColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SwigValueWrapper< ofColor_< float > > arg2 ; ofFloatColor *argp2 ; SWIG_check_num_args("ofMaterial::setEmissiveColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setEmissiveColor",1,"ofMaterial *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofMaterial::setEmissiveColor",2,"ofFloatColor");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_setEmissiveColor",1,SWIGTYPE_p_ofMaterial); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Material_setEmissiveColor",2,SWIGTYPE_p_ofColor_T_float_t); }  arg2 = *argp2; (arg1)->setEmissiveColor(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_setShininess(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ; float arg2 ;
  SWIG_check_num_args("ofMaterial::setShininess",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::setShininess",1,"ofMaterial *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofMaterial::setShininess",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_setShininess",1,SWIGTYPE_p_ofMaterial); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setShininess(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_getDiffuseColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SwigValueWrapper< ofColor_< float > > result; SWIG_check_num_args("ofMaterial::getDiffuseColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::getDiffuseColor",1,"ofMaterial *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_getDiffuseColor",1,SWIGTYPE_p_ofMaterial); }  result = (arg1)->getDiffuseColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_getAmbientColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SwigValueWrapper< ofColor_< float > > result; SWIG_check_num_args("ofMaterial::getAmbientColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::getAmbientColor",1,"ofMaterial *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_getAmbientColor",1,SWIGTYPE_p_ofMaterial); }  result = (arg1)->getAmbientColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_getSpecularColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SwigValueWrapper< ofColor_< float > > result; SWIG_check_num_args("ofMaterial::getSpecularColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::getSpecularColor",1,"ofMaterial *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_getSpecularColor",1,SWIGTYPE_p_ofMaterial); }  result = (arg1)->getSpecularColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_getEmissiveColor(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SwigValueWrapper< ofColor_< float > > result; SWIG_check_num_args("ofMaterial::getEmissiveColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::getEmissiveColor",1,"ofMaterial *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_getEmissiveColor",1,SWIGTYPE_p_ofMaterial); }  result = (arg1)->getEmissiveColor(); {
    ofFloatColor * resultptr = new ofFloatColor((const ofFloatColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofColor_T_float_t,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_getShininess(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ; float result;
  SWIG_check_num_args("ofMaterial::getShininess",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::getShininess",1,"ofMaterial *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_getShininess",1,SWIGTYPE_p_ofMaterial); }  result = (float)(arg1)->getShininess();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Material_begin(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SWIG_check_num_args("ofMaterial::begin",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::begin",1,"ofMaterial *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_begin",1,SWIGTYPE_p_ofMaterial); }  (arg1)->begin(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Material_end(lua_State* L) { int SWIG_arg = 0; ofMaterial *arg1 = (ofMaterial *) 0 ;
  SWIG_check_num_args("ofMaterial::end",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofMaterial::end",1,"ofMaterial *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMaterial,0))){
    SWIG_fail_ptr("Material_end",1,SWIGTYPE_p_ofMaterial); }  (arg1)->end(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static void swig_delete_Material(void *obj) {
ofMaterial *arg1 = (ofMaterial *) obj;
delete arg1;
}
static swig_lua_method swig_ofMaterial_methods[] = {
    {"setColors", _wrap_Material_setColors}, 
    {"setDiffuseColor", _wrap_Material_setDiffuseColor}, 
    {"setAmbientColor", _wrap_Material_setAmbientColor}, 
    {"setSpecularColor", _wrap_Material_setSpecularColor}, 
    {"setEmissiveColor", _wrap_Material_setEmissiveColor}, 
    {"setShininess", _wrap_Material_setShininess}, 
    {"getDiffuseColor", _wrap_Material_getDiffuseColor}, 
    {"getAmbientColor", _wrap_Material_getAmbientColor}, 
    {"getSpecularColor", _wrap_Material_getSpecularColor}, 
    {"getEmissiveColor", _wrap_Material_getEmissiveColor}, 
    {"getShininess", _wrap_Material_getShininess}, 
    {"begin", _wrap_Material_begin}, 
    {"end", _wrap_Material_end}, 
    {0,0}
};
static swig_lua_attribute swig_ofMaterial_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofMaterial_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofMaterial_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofMaterial_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofMaterial_bases[] = {0};
static const char *swig_ofMaterial_base_names[] = {0};
static swig_lua_class _wrap_class_ofMaterial = { "Material", &SWIGTYPE_p_ofMaterial,_wrap_new_Material, swig_delete_Material, swig_ofMaterial_methods, swig_ofMaterial_attributes, { "Material", swig_ofMaterial_cls_methods, swig_ofMaterial_cls_attributes, swig_ofMaterial_cls_constants }, swig_ofMaterial_bases, swig_ofMaterial_base_names };

static int _wrap_new_Shader__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *result = 0 ;
  SWIG_check_num_args("ofShader::ofShader",0,0) result = (ofShader *)new ofShader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofShader,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_Shader__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = 0 ; ofShader *result = 0 ;
  SWIG_check_num_args("ofShader::ofShader",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofShader::ofShader",1,"ofShader const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){ SWIG_fail_ptr("new_Shader",1,SWIGTYPE_p_ofShader); }
   result = (ofShader *)new ofShader((ofShader const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofShader,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Shader(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Shader__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_new_Shader__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Shader'\n" "  Possible C/C++ prototypes are:\n"
  "    ofShader::ofShader()\n" "    ofShader::ofShader(ofShader const &)\n"); lua_error(L);return 0; }
static int _wrap_Shader_load__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string arg2 ;
  bool result; SWIG_check_num_args("ofShader::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::load",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::load",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_load",1,SWIGTYPE_p_ofShader); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->load(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Shader_load__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string arg2 ;
  std::string arg3 ; std::string arg4 ; bool result; SWIG_check_num_args("ofShader::load",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::load",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::load",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::load",3,"std::string");
  if(!lua_isstring(L,4)) SWIG_fail_arg("ofShader::load",4,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_load",1,SWIGTYPE_p_ofShader); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); (&arg4)->assign(lua_tostring(L,4),lua_rawlen(L,4));
  result = (bool)(arg1)->load(arg2,arg3,arg4); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_load__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string arg2 ;
  std::string arg3 ; bool result; SWIG_check_num_args("ofShader::load",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::load",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::load",2,"std::string");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::load",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_load",1,SWIGTYPE_p_ofShader); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (bool)(arg1)->load(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_load(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 2) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_Shader_load__SWIG_0(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          return _wrap_Shader_load__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isstring(L,argv[2]); }  if (_v) {
          { _v = lua_isstring(L,argv[3]); }  if (_v) { return _wrap_Shader_load__SWIG_1(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_load'\n" "  Possible C/C++ prototypes are:\n"
  "    ofShader::load(std::string)\n" "    ofShader::load(std::string,std::string,std::string)\n"
  "    ofShader::load(std::string,std::string)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setGeometryInputType(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLenum arg2 ;
  GLenum *argp2 ; SWIG_check_num_args("ofShader::setGeometryInputType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setGeometryInputType",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setGeometryInputType",2,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setGeometryInputType",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Shader_setGeometryInputType",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2; (arg1)->setGeometryInputType(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setGeometryOutputType(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLenum arg2 ;
  GLenum *argp2 ; SWIG_check_num_args("ofShader::setGeometryOutputType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setGeometryOutputType",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setGeometryOutputType",2,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setGeometryOutputType",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Shader_setGeometryOutputType",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2; (arg1)->setGeometryOutputType(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setGeometryOutputCount(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; int arg2 ;
  SWIG_check_num_args("ofShader::setGeometryOutputCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setGeometryOutputCount",1,"ofShader *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofShader::setGeometryOutputCount",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setGeometryOutputCount",1,SWIGTYPE_p_ofShader); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setGeometryOutputCount(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_getGeometryMaxOutputCount(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  int result; SWIG_check_num_args("ofShader::getGeometryMaxOutputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getGeometryMaxOutputCount",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_getGeometryMaxOutputCount",1,SWIGTYPE_p_ofShader); } 
  result = (int)(arg1)->getGeometryMaxOutputCount(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_unload(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::unload",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::unload",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_unload",1,SWIGTYPE_p_ofShader); }  (arg1)->unload(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Shader_isLoaded(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; bool result;
  SWIG_check_num_args("ofShader::isLoaded",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::isLoaded",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_isLoaded",1,SWIGTYPE_p_ofShader); }  result = (bool)(arg1)->isLoaded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_begin(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::begin",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::begin",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_begin",1,SWIGTYPE_p_ofShader); }  (arg1)->begin(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Shader_end(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::end",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::end",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){ SWIG_fail_ptr("Shader_end",1,SWIGTYPE_p_ofShader); }
   (arg1)->end(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniformTexture__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofBaseHasTexture *arg3 = 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniformTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformTexture",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformTexture",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniformTexture",3,"ofBaseHasTexture &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniformTexture",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniformTexture",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofBaseHasTexture,0))){
    SWIG_fail_ptr("Shader_setUniformTexture",3,SWIGTYPE_p_ofBaseHasTexture); }  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setUniformTexture((std::string const &)*arg2,*arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniformTexture__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofTexture *arg3 = 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniformTexture",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformTexture",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformTexture",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniformTexture",3,"ofTexture &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniformTexture",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniformTexture",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Shader_setUniformTexture",3,SWIGTYPE_p_ofTexture); }  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setUniformTexture((std::string const &)*arg2,*arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniformTexture__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int arg3 ; GLint arg4 ; int arg5 ; std::string temp2 ; GLint *argp4 ;
  SWIG_check_num_args("ofShader::setUniformTexture",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformTexture",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformTexture",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniformTexture",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofShader::setUniformTexture",4,"GLint");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniformTexture",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniformTexture",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2; arg3 = (int)lua_tonumber(L, 3);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setUniformTexture",4,SWIGTYPE_p_GLint); }  arg4 = *argp4; arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setUniformTexture((std::string const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniformTexture(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofBaseHasTexture, 0)) {
            _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_Shader_setUniformTexture__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_Shader_setUniformTexture__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { void *ptr; if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
              _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Shader_setUniformTexture__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setUniformTexture'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniformTexture(std::string const &,ofBaseHasTexture &,int)\n"
  "    ofShader::setUniformTexture(std::string const &,ofTexture &,int)\n"
  "    ofShader::setUniformTexture(std::string const &,int,GLint,int)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setUniform1i(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string *arg2 = 0 ;
  int arg3 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform1i",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1i",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1i",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform1i",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform1i",1,SWIGTYPE_p_ofShader); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3); (arg1)->setUniform1i((std::string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform2i(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string *arg2 = 0 ;
  int arg3 ; int arg4 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform2i",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2i",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2i",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform2i",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform2i",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform2i",1,SWIGTYPE_p_ofShader); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->setUniform2i((std::string const &)*arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform3i(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string *arg2 = 0 ;
  int arg3 ; int arg4 ; int arg5 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform3i",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3i",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3i",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform3i",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform3i",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniform3i",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform3i",1,SWIGTYPE_p_ofShader); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setUniform3i((std::string const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform4i(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string *arg2 = 0 ;
  int arg3 ; int arg4 ; int arg5 ; int arg6 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform4i",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4i",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4i",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform4i",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform4i",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniform4i",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofShader::setUniform4i",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform4i",1,SWIGTYPE_p_ofShader); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); (arg1)->setUniform4i((std::string const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform1f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string *arg2 = 0 ;
  float arg3 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform1f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1f",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1f",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform1f",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform1f",1,SWIGTYPE_p_ofShader); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setUniform1f((std::string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform2f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string *arg2 = 0 ;
  float arg3 ; float arg4 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform2f",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2f",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2f",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform2f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform2f",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform2f",1,SWIGTYPE_p_ofShader); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setUniform2f((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform3f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform3f",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3f",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3f",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform3f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform3f",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniform3f",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform3f",1,SWIGTYPE_p_ofShader); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  (arg1)->setUniform3f((std::string const &)*arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform4f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; std::string *arg2 = 0 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform4f",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4f",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4f",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setUniform4f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform4f",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setUniform4f",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofShader::setUniform4f",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform4f",1,SWIGTYPE_p_ofShader); }  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); (arg1)->setUniform4f((std::string const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform1iv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform1iv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1iv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform1iv",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform1iv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform1iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Shader_setUniform1iv",3,SWIGTYPE_p_int); }
   arg4 = (int)lua_tonumber(L, 4); (arg1)->setUniform1iv((std::string const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform1iv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform1iv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1iv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform1iv",3,"int *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform1iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Shader_setUniform1iv",3,SWIGTYPE_p_int); }
   (arg1)->setUniform1iv((std::string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform1iv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { return _wrap_Shader_setUniform1iv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Shader_setUniform1iv__SWIG_0(L);}
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setUniform1iv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform1iv(std::string const &,int *,int)\n"
  "    ofShader::setUniform1iv(std::string const &,int *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setUniform2iv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform2iv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2iv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform2iv",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform2iv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform2iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Shader_setUniform2iv",3,SWIGTYPE_p_int); }
   arg4 = (int)lua_tonumber(L, 4); (arg1)->setUniform2iv((std::string const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform2iv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform2iv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2iv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform2iv",3,"int *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform2iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Shader_setUniform2iv",3,SWIGTYPE_p_int); }
   (arg1)->setUniform2iv((std::string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform2iv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { return _wrap_Shader_setUniform2iv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Shader_setUniform2iv__SWIG_0(L);}
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setUniform2iv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform2iv(std::string const &,int *,int)\n"
  "    ofShader::setUniform2iv(std::string const &,int *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setUniform3iv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform3iv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3iv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform3iv",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform3iv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform3iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Shader_setUniform3iv",3,SWIGTYPE_p_int); }
   arg4 = (int)lua_tonumber(L, 4); (arg1)->setUniform3iv((std::string const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform3iv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform3iv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3iv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform3iv",3,"int *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform3iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Shader_setUniform3iv",3,SWIGTYPE_p_int); }
   (arg1)->setUniform3iv((std::string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform3iv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { return _wrap_Shader_setUniform3iv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Shader_setUniform3iv__SWIG_0(L);}
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setUniform3iv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform3iv(std::string const &,int *,int)\n"
  "    ofShader::setUniform3iv(std::string const &,int *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setUniform4iv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform4iv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4iv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform4iv",3,"int *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform4iv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform4iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Shader_setUniform4iv",3,SWIGTYPE_p_int); }
   arg4 = (int)lua_tonumber(L, 4); (arg1)->setUniform4iv((std::string const &)*arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform4iv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; int *arg3 = (int *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform4iv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4iv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4iv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform4iv",3,"int *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform4iv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){ SWIG_fail_ptr("Shader_setUniform4iv",3,SWIGTYPE_p_int); }
   (arg1)->setUniform4iv((std::string const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform4iv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { return _wrap_Shader_setUniform4iv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_int, 0)) { _v = 0; }  else {
            _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Shader_setUniform4iv__SWIG_0(L);}
           }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setUniform4iv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform4iv(std::string const &,int *,int)\n"
  "    ofShader::setUniform4iv(std::string const &,int *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setUniform1fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform1fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform1fv",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform1fv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform1fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setUniform1fv",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setUniform1fv((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform1fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform1fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform1fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform1fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform1fv",3,"float *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform1fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setUniform1fv",3,SWIGTYPE_p_float); }  (arg1)->setUniform1fv((std::string const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform1fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Shader_setUniform1fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_Shader_setUniform1fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setUniform1fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform1fv(std::string const &,float *,int)\n"
  "    ofShader::setUniform1fv(std::string const &,float *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setUniform2fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform2fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform2fv",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform2fv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform2fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setUniform2fv",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setUniform2fv((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform2fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform2fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform2fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform2fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform2fv",3,"float *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform2fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setUniform2fv",3,SWIGTYPE_p_float); }  (arg1)->setUniform2fv((std::string const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform2fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Shader_setUniform2fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_Shader_setUniform2fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setUniform2fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform2fv(std::string const &,float *,int)\n"
  "    ofShader::setUniform2fv(std::string const &,float *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setUniform3fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform3fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform3fv",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform3fv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform3fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setUniform3fv",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setUniform3fv((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform3fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform3fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform3fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform3fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform3fv",3,"float *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform3fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setUniform3fv",3,SWIGTYPE_p_float); }  (arg1)->setUniform3fv((std::string const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform3fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Shader_setUniform3fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_Shader_setUniform3fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setUniform3fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform3fv(std::string const &,float *,int)\n"
  "    ofShader::setUniform3fv(std::string const &,float *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setUniform4fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; int arg4 ; std::string temp2 ;
  SWIG_check_num_args("ofShader::setUniform4fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform4fv",3,"float *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setUniform4fv",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform4fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setUniform4fv",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setUniform4fv((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setUniform4fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniform4fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniform4fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniform4fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setUniform4fv",3,"float *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniform4fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setUniform4fv",3,SWIGTYPE_p_float); }  (arg1)->setUniform4fv((std::string const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setUniform4fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Shader_setUniform4fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_Shader_setUniform4fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setUniform4fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setUniform4fv(std::string const &,float *,int)\n"
  "    ofShader::setUniform4fv(std::string const &,float *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setUniformMatrix4f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; ofMatrix4x4 *arg3 = 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setUniformMatrix4f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setUniformMatrix4f",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setUniformMatrix4f",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofShader::setUniformMatrix4f",3,"ofMatrix4x4 const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setUniformMatrix4f",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("Shader_setUniformMatrix4f",3,SWIGTYPE_p_ofMatrix4x4); } 
  (arg1)->setUniformMatrix4f((std::string const &)*arg2,(ofMatrix4x4 const &)*arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Shader_getAttributeLocation(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; std::string temp2 ; GLint result; SWIG_check_num_args("ofShader::getAttributeLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getAttributeLocation",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::getAttributeLocation",2,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_getAttributeLocation",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->getAttributeLocation((std::string const &)*arg2); { GLint * resultptr = new GLint((const GLint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute1s(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  short arg3 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute1s",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute1s",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute1s",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute1s",3,"short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute1s",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute1s",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (short)lua_tonumber(L, 3);
  (arg1)->setAttribute1s(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute2s(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  short arg3 ; short arg4 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute2s",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute2s",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute2s",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute2s",3,"short");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute2s",4,"short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute2s",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute2s",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (short)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4); (arg1)->setAttribute2s(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute3s(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  short arg3 ; short arg4 ; short arg5 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute3s",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute3s",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute3s",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute3s",3,"short");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute3s",4,"short");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setAttribute3s",5,"short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute3s",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute3s",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (short)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4); arg5 = (short)lua_tonumber(L, 5); (arg1)->setAttribute3s(arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute4s(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  short arg3 ; short arg4 ; short arg5 ; short arg6 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute4s",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute4s",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute4s",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute4s",3,"short");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute4s",4,"short");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setAttribute4s",5,"short");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofShader::setAttribute4s",6,"short");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute4s",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute4s",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (short)lua_tonumber(L, 3);
  arg4 = (short)lua_tonumber(L, 4); arg5 = (short)lua_tonumber(L, 5); arg6 = (short)lua_tonumber(L, 6);
  (arg1)->setAttribute4s(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute1f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  float arg3 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute1f",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute1f",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute1f",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute1f",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute1f",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute1f",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setAttribute1f(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute2f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  float arg3 ; float arg4 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute2f",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute2f",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute2f",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute2f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute2f",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute2f",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute2f",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); (arg1)->setAttribute2f(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute3f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  float arg3 ; float arg4 ; float arg5 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute3f",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute3f",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute3f",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute3f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute3f",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setAttribute3f",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute3f",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute3f",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); (arg1)->setAttribute3f(arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute4f(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute4f",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute4f",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute4f",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute4f",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute4f",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setAttribute4f",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofShader::setAttribute4f",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute4f",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute4f",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  (arg1)->setAttribute4f(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute1d(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  double arg3 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute1d",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute1d",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute1d",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute1d",3,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute1d",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute1d",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setAttribute1d(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute2d(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  double arg3 ; double arg4 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute2d",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute2d",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute2d",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute2d",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute2d",4,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute2d",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute2d",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4); (arg1)->setAttribute2d(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute3d(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  double arg3 ; double arg4 ; double arg5 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute3d",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute3d",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute3d",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute3d",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute3d",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setAttribute3d",5,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute3d",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute3d",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5); (arg1)->setAttribute3d(arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute4d(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLint arg2 ;
  double arg3 ; double arg4 ; double arg5 ; double arg6 ; GLint *argp2 ; SWIG_check_num_args("ofShader::setAttribute4d",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute4d",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setAttribute4d",2,"GLint");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofShader::setAttribute4d",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofShader::setAttribute4d",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofShader::setAttribute4d",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofShader::setAttribute4d",6,"double");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute4d",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Shader_setAttribute4d",2,SWIGTYPE_p_GLint); }  arg2 = *argp2; arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4); arg5 = (double)lua_tonumber(L, 5); arg6 = (double)lua_tonumber(L, 6);
  (arg1)->setAttribute4d(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute1fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; GLsizei arg4 ; std::string temp2 ; GLsizei *argp4 ;
  SWIG_check_num_args("ofShader::setAttribute1fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute1fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute1fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute1fv",3,"float *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofShader::setAttribute1fv",4,"GLsizei");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute1fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setAttribute1fv",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLsizei,0))){
    SWIG_fail_ptr("Shader_setAttribute1fv",4,SWIGTYPE_p_GLsizei); }  arg4 = *argp4;
  (arg1)->setAttribute1fv((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setAttribute1fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setAttribute1fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute1fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute1fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute1fv",3,"float *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute1fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setAttribute1fv",3,SWIGTYPE_p_float); }  (arg1)->setAttribute1fv((std::string const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute1fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Shader_setAttribute1fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLsizei, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Shader_setAttribute1fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setAttribute1fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setAttribute1fv(std::string const &,float *,GLsizei)\n"
  "    ofShader::setAttribute1fv(std::string const &,float *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setAttribute2fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; GLsizei arg4 ; std::string temp2 ; GLsizei *argp4 ;
  SWIG_check_num_args("ofShader::setAttribute2fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute2fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute2fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute2fv",3,"float *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofShader::setAttribute2fv",4,"GLsizei");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute2fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setAttribute2fv",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLsizei,0))){
    SWIG_fail_ptr("Shader_setAttribute2fv",4,SWIGTYPE_p_GLsizei); }  arg4 = *argp4;
  (arg1)->setAttribute2fv((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setAttribute2fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setAttribute2fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute2fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute2fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute2fv",3,"float *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute2fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setAttribute2fv",3,SWIGTYPE_p_float); }  (arg1)->setAttribute2fv((std::string const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute2fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Shader_setAttribute2fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLsizei, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Shader_setAttribute2fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setAttribute2fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setAttribute2fv(std::string const &,float *,GLsizei)\n"
  "    ofShader::setAttribute2fv(std::string const &,float *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setAttribute3fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; GLsizei arg4 ; std::string temp2 ; GLsizei *argp4 ;
  SWIG_check_num_args("ofShader::setAttribute3fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute3fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute3fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute3fv",3,"float *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofShader::setAttribute3fv",4,"GLsizei");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute3fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setAttribute3fv",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLsizei,0))){
    SWIG_fail_ptr("Shader_setAttribute3fv",4,SWIGTYPE_p_GLsizei); }  arg4 = *argp4;
  (arg1)->setAttribute3fv((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setAttribute3fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setAttribute3fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute3fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute3fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute3fv",3,"float *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute3fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setAttribute3fv",3,SWIGTYPE_p_float); }  (arg1)->setAttribute3fv((std::string const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute3fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Shader_setAttribute3fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLsizei, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Shader_setAttribute3fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setAttribute3fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setAttribute3fv(std::string const &,float *,GLsizei)\n"
  "    ofShader::setAttribute3fv(std::string const &,float *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_setAttribute4fv__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; GLsizei arg4 ; std::string temp2 ; GLsizei *argp4 ;
  SWIG_check_num_args("ofShader::setAttribute4fv",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute4fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute4fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute4fv",3,"float *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofShader::setAttribute4fv",4,"GLsizei");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute4fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setAttribute4fv",3,SWIGTYPE_p_float); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLsizei,0))){
    SWIG_fail_ptr("Shader_setAttribute4fv",4,SWIGTYPE_p_GLsizei); }  arg4 = *argp4;
  (arg1)->setAttribute4fv((std::string const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_setAttribute4fv__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  std::string *arg2 = 0 ; float *arg3 = (float *) 0 ; std::string temp2 ; SWIG_check_num_args("ofShader::setAttribute4fv",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setAttribute4fv",1,"ofShader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofShader::setAttribute4fv",2,"std::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofShader::setAttribute4fv",3,"float *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setAttribute4fv",1,SWIGTYPE_p_ofShader); } 
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Shader_setAttribute4fv",3,SWIGTYPE_p_float); }  (arg1)->setAttribute4fv((std::string const &)*arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setAttribute4fv(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_Shader_setAttribute4fv__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofShader, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLsizei, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { return _wrap_Shader_setAttribute4fv__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Shader_setAttribute4fv'\n"
  "  Possible C/C++ prototypes are:\n" "    ofShader::setAttribute4fv(std::string const &,float *,GLsizei)\n"
  "    ofShader::setAttribute4fv(std::string const &,float *)\n"); lua_error(L);return 0; }
static int _wrap_Shader_bindAttribute(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLuint arg2 ;
  std::string *arg3 = 0 ; GLuint *argp2 ; std::string temp3 ; SWIG_check_num_args("ofShader::bindAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::bindAttribute",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::bindAttribute",2,"GLuint");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::bindAttribute",3,"std::string const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_bindAttribute",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("Shader_bindAttribute",2,SWIGTYPE_p_GLuint); }  arg2 = *argp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3; (arg1)->bindAttribute(arg2,(std::string const &)*arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_printActiveUniforms(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::printActiveUniforms",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::printActiveUniforms",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_printActiveUniforms",1,SWIGTYPE_p_ofShader); }  (arg1)->printActiveUniforms(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_printActiveAttributes(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ;
  SWIG_check_num_args("ofShader::printActiveAttributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::printActiveAttributes",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_printActiveAttributes",1,SWIGTYPE_p_ofShader); }  (arg1)->printActiveAttributes(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setupShaderFromSource(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLenum arg2 ;
  std::string arg3 ; GLenum *argp2 ; bool result; SWIG_check_num_args("ofShader::setupShaderFromSource",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setupShaderFromSource",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setupShaderFromSource",2,"GLenum");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::setupShaderFromSource",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setupShaderFromSource",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Shader_setupShaderFromSource",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (bool)(arg1)->setupShaderFromSource(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_setupShaderFromFile(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLenum arg2 ;
  std::string arg3 ; GLenum *argp2 ; bool result; SWIG_check_num_args("ofShader::setupShaderFromFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::setupShaderFromFile",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::setupShaderFromFile",2,"GLenum");
  if(!lua_isstring(L,3)) SWIG_fail_arg("ofShader::setupShaderFromFile",3,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_setupShaderFromFile",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Shader_setupShaderFromFile",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2;
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3)); result = (bool)(arg1)->setupShaderFromFile(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_linkProgram(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; bool result;
  SWIG_check_num_args("ofShader::linkProgram",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::linkProgram",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_linkProgram",1,SWIGTYPE_p_ofShader); }  result = (bool)(arg1)->linkProgram();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_bindDefaults(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; bool result;
  SWIG_check_num_args("ofShader::bindDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::bindDefaults",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_bindDefaults",1,SWIGTYPE_p_ofShader); }  result = (bool)(arg1)->bindDefaults();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Shader_getProgram(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLuint *result = 0 ;
  SWIG_check_num_args("ofShader::getProgram",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getProgram",1,"ofShader *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_getProgram",1,SWIGTYPE_p_ofShader); }  result = (GLuint *) &(arg1)->getProgram();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GLuint,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader_getShader(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; GLenum arg2 ;
  GLenum *argp2 ; GLuint *result = 0 ; SWIG_check_num_args("ofShader::getShader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::getShader",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::getShader",2,"GLenum");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader_getShader",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("Shader_getShader",2,SWIGTYPE_p_GLenum); }  arg2 = *argp2; result = (GLuint *) &(arg1)->getShader(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_GLuint,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Shader___eq(lua_State* L) { int SWIG_arg = 0; ofShader *arg1 = (ofShader *) 0 ; ofShader *arg2 = 0 ;
  bool result; SWIG_check_num_args("ofShader::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofShader::operator ==",1,"ofShader *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofShader::operator ==",2,"ofShader const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader___eq",1,SWIGTYPE_p_ofShader); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofShader,0))){
    SWIG_fail_ptr("Shader___eq",2,SWIGTYPE_p_ofShader); }  result = (bool)(arg1)->operator ==((ofShader const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Shader(void *obj) {
ofShader *arg1 = (ofShader *) obj;
delete arg1;
}
static swig_lua_method swig_ofShader_methods[] = {
    {"load", _wrap_Shader_load}, 
    {"setGeometryInputType", _wrap_Shader_setGeometryInputType}, 
    {"setGeometryOutputType", _wrap_Shader_setGeometryOutputType}, 
    {"setGeometryOutputCount", _wrap_Shader_setGeometryOutputCount}, 
    {"getGeometryMaxOutputCount", _wrap_Shader_getGeometryMaxOutputCount}, 
    {"unload", _wrap_Shader_unload}, 
    {"isLoaded", _wrap_Shader_isLoaded}, 
    {"begin", _wrap_Shader_begin}, 
    {"end", _wrap_Shader_end}, 
    {"setUniformTexture", _wrap_Shader_setUniformTexture}, 
    {"setUniform1i", _wrap_Shader_setUniform1i}, 
    {"setUniform2i", _wrap_Shader_setUniform2i}, 
    {"setUniform3i", _wrap_Shader_setUniform3i}, 
    {"setUniform4i", _wrap_Shader_setUniform4i}, 
    {"setUniform1f", _wrap_Shader_setUniform1f}, 
    {"setUniform2f", _wrap_Shader_setUniform2f}, 
    {"setUniform3f", _wrap_Shader_setUniform3f}, 
    {"setUniform4f", _wrap_Shader_setUniform4f}, 
    {"setUniform1iv", _wrap_Shader_setUniform1iv}, 
    {"setUniform2iv", _wrap_Shader_setUniform2iv}, 
    {"setUniform3iv", _wrap_Shader_setUniform3iv}, 
    {"setUniform4iv", _wrap_Shader_setUniform4iv}, 
    {"setUniform1fv", _wrap_Shader_setUniform1fv}, 
    {"setUniform2fv", _wrap_Shader_setUniform2fv}, 
    {"setUniform3fv", _wrap_Shader_setUniform3fv}, 
    {"setUniform4fv", _wrap_Shader_setUniform4fv}, 
    {"setUniformMatrix4f", _wrap_Shader_setUniformMatrix4f}, 
    {"getAttributeLocation", _wrap_Shader_getAttributeLocation}, 
    {"setAttribute1s", _wrap_Shader_setAttribute1s}, 
    {"setAttribute2s", _wrap_Shader_setAttribute2s}, 
    {"setAttribute3s", _wrap_Shader_setAttribute3s}, 
    {"setAttribute4s", _wrap_Shader_setAttribute4s}, 
    {"setAttribute1f", _wrap_Shader_setAttribute1f}, 
    {"setAttribute2f", _wrap_Shader_setAttribute2f}, 
    {"setAttribute3f", _wrap_Shader_setAttribute3f}, 
    {"setAttribute4f", _wrap_Shader_setAttribute4f}, 
    {"setAttribute1d", _wrap_Shader_setAttribute1d}, 
    {"setAttribute2d", _wrap_Shader_setAttribute2d}, 
    {"setAttribute3d", _wrap_Shader_setAttribute3d}, 
    {"setAttribute4d", _wrap_Shader_setAttribute4d}, 
    {"setAttribute1fv", _wrap_Shader_setAttribute1fv}, 
    {"setAttribute2fv", _wrap_Shader_setAttribute2fv}, 
    {"setAttribute3fv", _wrap_Shader_setAttribute3fv}, 
    {"setAttribute4fv", _wrap_Shader_setAttribute4fv}, 
    {"bindAttribute", _wrap_Shader_bindAttribute}, 
    {"printActiveUniforms", _wrap_Shader_printActiveUniforms}, 
    {"printActiveAttributes", _wrap_Shader_printActiveAttributes}, 
    {"setupShaderFromSource", _wrap_Shader_setupShaderFromSource}, 
    {"setupShaderFromFile", _wrap_Shader_setupShaderFromFile}, 
    {"linkProgram", _wrap_Shader_linkProgram}, 
    {"bindDefaults", _wrap_Shader_bindDefaults}, 
    {"getProgram", _wrap_Shader_getProgram}, 
    {"getShader", _wrap_Shader_getShader}, 
    {"__eq", _wrap_Shader___eq}, 
    {0,0}
};
static swig_lua_attribute swig_ofShader_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofShader_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofShader_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofShader_cls_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("POSITION_ATTRIBUTE", ofShader::POSITION_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("COLOR_ATTRIBUTE", ofShader::COLOR_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("NORMAL_ATTRIBUTE", ofShader::NORMAL_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("TEXCOORD_ATTRIBUTE", ofShader::TEXCOORD_ATTRIBUTE)},
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofShader_bases[] = {0};
static const char *swig_ofShader_base_names[] = {0};
static swig_lua_class _wrap_class_ofShader = { "Shader", &SWIGTYPE_p_ofShader,_wrap_new_Shader, swig_delete_Shader, swig_ofShader_methods, swig_ofShader_attributes, { "Shader", swig_ofShader_cls_methods, swig_ofShader_cls_attributes, swig_ofShader_cls_constants }, swig_ofShader_bases, swig_ofShader_base_names };

static int _wrap_new_Vbo__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *result = 0 ; SWIG_check_num_args("ofVbo::ofVbo",0,0)
  result = (ofVbo *)new ofVbo(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVbo,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Vbo__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = 0 ; ofVbo *result = 0 ;
  SWIG_check_num_args("ofVbo::ofVbo",1,1) if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVbo::ofVbo",1,"ofVbo const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("new_Vbo",1,SWIGTYPE_p_ofVbo); } 
  result = (ofVbo *)new ofVbo((ofVbo const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVbo,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_Vbo(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_Vbo__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_Vbo__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vbo'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVbo::ofVbo()\n" "    ofVbo::ofVbo(ofVbo const &)\n"); lua_error(L);return 0; }
static int _wrap_Vbo_setMesh__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; ofMesh *arg2 = 0 ; int arg3 ;
  SWIG_check_num_args("ofVbo::setMesh",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setMesh",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setMesh",2,"ofMesh const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setMesh",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_setMesh",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Vbo_setMesh",2,SWIGTYPE_p_ofMesh); } 
  arg3 = (int)lua_tonumber(L, 3); (arg1)->setMesh((ofMesh const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setMesh__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; ofMesh *arg2 = 0 ; int arg3 ;
  bool arg4 ; bool arg5 ; bool arg6 ; SWIG_check_num_args("ofVbo::setMesh",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setMesh",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::setMesh",2,"ofMesh const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setMesh",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ofVbo::setMesh",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofVbo::setMesh",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ofVbo::setMesh",6,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_setMesh",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Vbo_setMesh",2,SWIGTYPE_p_ofMesh); } 
  arg3 = (int)lua_tonumber(L, 3); arg4 = (lua_toboolean(L, 4)!=0); arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0); (arg1)->setMesh((ofMesh const &)*arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setMesh(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vbo_setMesh__SWIG_0(L);}  }  }
     }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isboolean(L,argv[3]); } 
          if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { { _v = lua_isboolean(L,argv[5]); }  if (_v) {
                return _wrap_Vbo_setMesh__SWIG_1(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_setMesh'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVbo::setMesh(ofMesh const &,int)\n" "    ofVbo::setMesh(ofMesh const &,int,bool,bool,bool)\n"); lua_error(L);return 0; }
static int _wrap_Vbo_setVertexData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setVertexData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setVertexData",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vbo_setVertexData",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setVertexData((ofVec3f const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_setVertexData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setVertexData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setVertexData",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vbo_setVertexData",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setVertexData((ofVec2f const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_setColorData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofFloatColor *arg2 = (ofFloatColor *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setColorData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setColorData",2,"ofFloatColor const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setColorData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setColorData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_setColorData",1,SWIGTYPE_p_ofVbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Vbo_setColorData",2,SWIGTYPE_p_ofColor_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setColorData((ofFloatColor const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setNormalData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setNormalData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setNormalData",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setNormalData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setNormalData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vbo_setNormalData",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setNormalData((ofVec3f const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_setTexCoordData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setTexCoordData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setTexCoordData",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setTexCoordData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setTexCoordData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vbo_setTexCoordData",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->setTexCoordData((ofVec2f const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setIndexData(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofIndexType *arg2 = (ofIndexType *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setIndexData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setIndexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setIndexData",2,"ofIndexType const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setIndexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setIndexData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_setIndexData",1,SWIGTYPE_p_ofVbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Vbo_setIndexData",2,SWIGTYPE_p_TESSindex); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setIndexData((ofIndexType const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_setVertexData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofVbo::setVertexData",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setVertexData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setVertexData",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofVbo::setVertexData",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setVertexData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->setVertexData((float const *)arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_setVertexData__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setVertexData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setVertexData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setVertexData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setVertexData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setVertexData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setVertexData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->setVertexData((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setVertexData(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Vbo_setVertexData__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Vbo_setVertexData__SWIG_1(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Vbo_setVertexData__SWIG_3(L);}  }  }  }  }  } 
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) {
                return _wrap_Vbo_setVertexData__SWIG_2(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_setVertexData'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVbo::setVertexData(ofVec3f const *,int,int)\n" "    ofVbo::setVertexData(ofVec2f const *,int,int)\n"
  "    ofVbo::setVertexData(float const *,int,int,int,int)\n" "    ofVbo::setVertexData(float const *,int,int,int)\n");
  lua_error(L);return 0; }
static int _wrap_Vbo_setColorData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setColorData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setColorData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setColorData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setColorData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setColorData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_setColorData",1,SWIGTYPE_p_ofVbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setColorData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->setColorData((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setColorData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setColorData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setColorData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setColorData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setColorData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_setColorData",1,SWIGTYPE_p_ofVbo); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setColorData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setColorData((float const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setColorData(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { {
            _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Vbo_setColorData__SWIG_0(L);}  }  }  }  }  if (argc == 4) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_Vbo_setColorData__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Vbo_setColorData__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_setColorData'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVbo::setColorData(ofFloatColor const *,int,int)\n" "    ofVbo::setColorData(float const *,int,int,int)\n"
  "    ofVbo::setColorData(float const *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_Vbo_setNormalData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setNormalData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setNormalData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setNormalData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setNormalData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setNormalData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setNormalData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->setNormalData((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setNormalData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setNormalData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setNormalData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setNormalData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setNormalData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setNormalData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setNormalData((float const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setNormalData(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 4) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Vbo_setNormalData__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_Vbo_setNormalData__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Vbo_setNormalData__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_setNormalData'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVbo::setNormalData(ofVec3f const *,int,int)\n" "    ofVbo::setNormalData(float const *,int,int,int)\n"
  "    ofVbo::setNormalData(float const *,int,int)\n"); lua_error(L);return 0; }
static int _wrap_Vbo_setTexCoordData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::setTexCoordData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setTexCoordData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setTexCoordData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setTexCoordData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setTexCoordData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setTexCoordData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); (arg1)->setTexCoordData((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setTexCoordData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofVbo::setTexCoordData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::setTexCoordData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::setTexCoordData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setTexCoordData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setTexCoordData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setTexCoordData((float const *)arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_setTexCoordData(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L);
  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Vbo_setTexCoordData__SWIG_0(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) {
            return _wrap_Vbo_setTexCoordData__SWIG_2(L);}  }  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Vbo_setTexCoordData__SWIG_1(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_setTexCoordData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setTexCoordData(ofVec2f const *,int,int)\n"
  "    ofVbo::setTexCoordData(float const *,int,int,int)\n" "    ofVbo::setTexCoordData(float const *,int,int)\n");
  lua_error(L);return 0; }
static int _wrap_Vbo_setAttributeData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  float *arg3 = (float *) 0 ; int arg4 ; int arg5 ; int arg6 ; int arg7 ; SWIG_check_num_args("ofVbo::setAttributeData",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setAttributeData",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::setAttributeData",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofVbo::setAttributeData",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setAttributeData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setAttributeData",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofVbo::setAttributeData",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofVbo::setAttributeData",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setAttributeData",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setAttributeData",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); arg7 = (int)lua_tonumber(L, 7);
  (arg1)->setAttributeData(arg2,(float const *)arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_setAttributeData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  float *arg3 = (float *) 0 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofVbo::setAttributeData",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::setAttributeData",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::setAttributeData",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofVbo::setAttributeData",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::setAttributeData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::setAttributeData",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofVbo::setAttributeData",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_setAttributeData",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_setAttributeData",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); (arg1)->setAttributeData(arg2,(float const *)arg3,arg4,arg5,arg6); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_setAttributeData(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); } 
            if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_Vbo_setAttributeData__SWIG_1(L);}  }  }  }  }  }
     }  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); } 
            if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Vbo_setAttributeData__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_setAttributeData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::setAttributeData(int,float const *,int,int,int,int)\n"
  "    ofVbo::setAttributeData(int,float const *,int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_Vbo_updateMesh(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; ofMesh *arg2 = 0 ;
  SWIG_check_num_args("ofVbo::updateMesh",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateMesh",1,"ofVbo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVbo::updateMesh",2,"ofMesh const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_updateMesh",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("Vbo_updateMesh",2,SWIGTYPE_p_ofMesh); }
   (arg1)->updateMesh((ofMesh const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_updateVertexData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateVertexData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateVertexData",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateVertexData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vbo_updateVertexData",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateVertexData((ofVec3f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_updateVertexData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateVertexData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateVertexData",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateVertexData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vbo_updateVertexData",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateVertexData((ofVec2f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_updateColorData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofFloatColor *arg2 = (ofFloatColor *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateColorData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateColorData",2,"ofFloatColor const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateColorData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateColorData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofColor_T_float_t,0))){
    SWIG_fail_ptr("Vbo_updateColorData",2,SWIGTYPE_p_ofColor_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateColorData((ofFloatColor const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_updateNormalData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec3f *arg2 = (ofVec3f *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateNormalData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateNormalData",2,"ofVec3f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateNormalData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Vbo_updateNormalData",2,SWIGTYPE_p_ofVec3f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateNormalData((ofVec3f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_updateTexCoordData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofVec2f *arg2 = (ofVec2f *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateTexCoordData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateTexCoordData",2,"ofVec2f const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateTexCoordData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec2f,0))){
    SWIG_fail_ptr("Vbo_updateTexCoordData",2,SWIGTYPE_p_ofVec2f); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateTexCoordData((ofVec2f const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_updateIndexData(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  ofIndexType *arg2 = (ofIndexType *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateIndexData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateIndexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateIndexData",2,"ofIndexType const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateIndexData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateIndexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TESSindex,0))){
    SWIG_fail_ptr("Vbo_updateIndexData",2,SWIGTYPE_p_TESSindex); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateIndexData((ofIndexType const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_updateVertexData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateVertexData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateVertexData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateVertexData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateVertexData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateVertexData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_updateVertexData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateVertexData((float const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_updateVertexData(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Vbo_updateVertexData__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Vbo_updateVertexData__SWIG_1(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vbo_updateVertexData__SWIG_2(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_updateVertexData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::updateVertexData(ofVec3f const *,int)\n"
  "    ofVbo::updateVertexData(ofVec2f const *,int)\n" "    ofVbo::updateVertexData(float const *,int)\n");
  lua_error(L);return 0; }
static int _wrap_Vbo_updateColorData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateColorData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateColorData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateColorData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateColorData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateColorData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_updateColorData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateColorData((float const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_updateColorData(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofColor_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Vbo_updateColorData__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vbo_updateColorData__SWIG_1(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_updateColorData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::updateColorData(ofFloatColor const *,int)\n"
  "    ofVbo::updateColorData(float const *,int)\n"); lua_error(L);return 0; }
static int _wrap_Vbo_updateNormalData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateNormalData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateNormalData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateNormalData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateNormalData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateNormalData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_updateNormalData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateNormalData((float const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_updateNormalData(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 3) {
    int _v; { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Vbo_updateNormalData__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vbo_updateNormalData__SWIG_1(L);}  }
       }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_updateNormalData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::updateNormalData(ofVec3f const *,int)\n"
  "    ofVbo::updateNormalData(float const *,int)\n"); lua_error(L);return 0; }
static int _wrap_Vbo_updateTexCoordData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; SWIG_check_num_args("ofVbo::updateTexCoordData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateTexCoordData",1,"ofVbo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofVbo::updateTexCoordData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::updateTexCoordData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateTexCoordData",1,SWIGTYPE_p_ofVbo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_updateTexCoordData",2,SWIGTYPE_p_float); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->updateTexCoordData((float const *)arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_updateTexCoordData(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L);
  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec2f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Vbo_updateTexCoordData__SWIG_0(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVbo, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { return _wrap_Vbo_updateTexCoordData__SWIG_1(L);}
         }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vbo_updateTexCoordData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofVbo::updateTexCoordData(ofVec2f const *,int)\n"
  "    ofVbo::updateTexCoordData(float const *,int)\n"); lua_error(L);return 0; }
static int _wrap_Vbo_updateAttributeData(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ;
  float *arg3 = (float *) 0 ; int arg4 ; SWIG_check_num_args("ofVbo::updateAttributeData",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::updateAttributeData",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::updateAttributeData",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofVbo::updateAttributeData",3,"float const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::updateAttributeData",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_updateAttributeData",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Vbo_updateAttributeData",3,SWIGTYPE_p_float); }  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->updateAttributeData(arg2,(float const *)arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Vbo_enableColors(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::enableColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::enableColors",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_enableColors",1,SWIGTYPE_p_ofVbo); }
   (arg1)->enableColors(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_enableNormals(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::enableNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::enableNormals",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_enableNormals",1,SWIGTYPE_p_ofVbo); }  (arg1)->enableNormals(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_enableTexCoords(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::enableTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::enableTexCoords",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_enableTexCoords",1,SWIGTYPE_p_ofVbo); }  (arg1)->enableTexCoords(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_enableIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::enableIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::enableIndices",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_enableIndices",1,SWIGTYPE_p_ofVbo); }  (arg1)->enableIndices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_disableColors(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::disableColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::disableColors",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_disableColors",1,SWIGTYPE_p_ofVbo); }  (arg1)->disableColors(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_disableNormals(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::disableNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::disableNormals",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_disableNormals",1,SWIGTYPE_p_ofVbo); }  (arg1)->disableNormals(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_disableTexCoords(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::disableTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::disableTexCoords",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_disableTexCoords",1,SWIGTYPE_p_ofVbo); }  (arg1)->disableTexCoords(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_disableIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::disableIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::disableIndices",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_disableIndices",1,SWIGTYPE_p_ofVbo); }  (arg1)->disableIndices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getVertId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getVertId",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getVertId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_getVertId",1,SWIGTYPE_p_ofVbo); } 
  result = ((ofVbo const *)arg1)->getVertId(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getColorId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getColorId",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getColorId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_getColorId",1,SWIGTYPE_p_ofVbo); } 
  result = ((ofVbo const *)arg1)->getColorId(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getNormalId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getNormalId",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getNormalId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_getNormalId",1,SWIGTYPE_p_ofVbo); }
   result = ((ofVbo const *)arg1)->getNormalId(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getTexCoordId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getTexCoordId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getTexCoordId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_getTexCoordId",1,SWIGTYPE_p_ofVbo); }  result = ((ofVbo const *)arg1)->getTexCoordId(); {
    GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getIndexId(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; GLuint result;
  SWIG_check_num_args("ofVbo::getIndexId",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getIndexId",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_getIndexId",1,SWIGTYPE_p_ofVbo); } 
  result = ((ofVbo const *)arg1)->getIndexId(); { GLuint * resultptr = new GLuint((const GLuint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getIsAllocated(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getIsAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getIsAllocated",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_getIsAllocated",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getIsAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getUsingVerts(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingVerts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingVerts",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_getUsingVerts",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingVerts();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getUsingColors(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingColors",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingColors",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_getUsingColors",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingColors();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getUsingNormals(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingNormals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingNormals",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_getUsingNormals",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingNormals();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getUsingTexCoords(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingTexCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingTexCoords",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_getUsingTexCoords",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingTexCoords();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getUsingIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; bool result;
  SWIG_check_num_args("ofVbo::getUsingIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getUsingIndices",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_getUsingIndices",1,SWIGTYPE_p_ofVbo); }  result = (bool)((ofVbo const *)arg1)->getUsingIndices();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_draw(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; int arg3 ; int arg4 ;
  SWIG_check_num_args("ofVbo::draw",4,4) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::draw",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::draw",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::draw",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::draw",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_draw",1,SWIGTYPE_p_ofVbo); } 
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->draw(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_drawElements(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofVbo::drawElements",3,3) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::drawElements",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::drawElements",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::drawElements",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_drawElements",1,SWIGTYPE_p_ofVbo); }
   arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); (arg1)->drawElements(arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_drawInstanced(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; int arg5 ; SWIG_check_num_args("ofVbo::drawInstanced",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::drawInstanced",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::drawInstanced",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::drawInstanced",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::drawInstanced",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofVbo::drawInstanced",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_drawInstanced",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->drawInstanced(arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_drawElementsInstanced(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int arg2 ; int arg3 ;
  int arg4 ; SWIG_check_num_args("ofVbo::drawElementsInstanced",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::drawElementsInstanced",1,"ofVbo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVbo::drawElementsInstanced",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVbo::drawElementsInstanced",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofVbo::drawElementsInstanced",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_drawElementsInstanced",1,SWIGTYPE_p_ofVbo); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); (arg1)->drawElementsInstanced(arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_bind(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; SWIG_check_num_args("ofVbo::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::bind",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_bind",1,SWIGTYPE_p_ofVbo); } 
  (arg1)->bind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_unbind(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::unbind",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::unbind",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_unbind",1,SWIGTYPE_p_ofVbo); } 
  (arg1)->unbind(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_clear(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; SWIG_check_num_args("ofVbo::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clear",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_clear",1,SWIGTYPE_p_ofVbo); } 
  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_clearVertices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearVertices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearVertices",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_clearVertices",1,SWIGTYPE_p_ofVbo); }  (arg1)->clearVertices(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_clearNormals(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearNormals",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearNormals",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_clearNormals",1,SWIGTYPE_p_ofVbo); }
   (arg1)->clearNormals(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_clearColors(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearColors",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearColors",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_clearColors",1,SWIGTYPE_p_ofVbo); }
   (arg1)->clearColors(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_clearTexCoords(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearTexCoords",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearTexCoords",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_clearTexCoords",1,SWIGTYPE_p_ofVbo); }  (arg1)->clearTexCoords(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_clearIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ;
  SWIG_check_num_args("ofVbo::clearIndices",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::clearIndices",1,"ofVbo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){ SWIG_fail_ptr("Vbo_clearIndices",1,SWIGTYPE_p_ofVbo); }
   (arg1)->clearIndices(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getNumVertices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int result;
  SWIG_check_num_args("ofVbo::getNumVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getNumVertices",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_getNumVertices",1,SWIGTYPE_p_ofVbo); }  result = (int)((ofVbo const *)arg1)->getNumVertices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_getNumIndices(lua_State* L) { int SWIG_arg = 0; ofVbo *arg1 = (ofVbo *) 0 ; int result;
  SWIG_check_num_args("ofVbo::getNumIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVbo::getNumIndices",1,"ofVbo const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVbo,0))){
    SWIG_fail_ptr("Vbo_getNumIndices",1,SWIGTYPE_p_ofVbo); }  result = (int)((ofVbo const *)arg1)->getNumIndices();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_disableVAOs(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofVbo::disableVAOs",0,0)
  ofVbo::disableVAOs(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Vbo_enableVAOs(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofVbo::enableVAOs",0,0)
  ofVbo::enableVAOs(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Vbo(void *obj) {
ofVbo *arg1 = (ofVbo *) obj;
delete arg1;
}
static swig_lua_method swig_ofVbo_methods[] = {
    {"setMesh", _wrap_Vbo_setMesh}, 
    {"setIndexData", _wrap_Vbo_setIndexData}, 
    {"setVertexData", _wrap_Vbo_setVertexData}, 
    {"setColorData", _wrap_Vbo_setColorData}, 
    {"setNormalData", _wrap_Vbo_setNormalData}, 
    {"setTexCoordData", _wrap_Vbo_setTexCoordData}, 
    {"setAttributeData", _wrap_Vbo_setAttributeData}, 
    {"updateMesh", _wrap_Vbo_updateMesh}, 
    {"updateIndexData", _wrap_Vbo_updateIndexData}, 
    {"updateVertexData", _wrap_Vbo_updateVertexData}, 
    {"updateColorData", _wrap_Vbo_updateColorData}, 
    {"updateNormalData", _wrap_Vbo_updateNormalData}, 
    {"updateTexCoordData", _wrap_Vbo_updateTexCoordData}, 
    {"updateAttributeData", _wrap_Vbo_updateAttributeData}, 
    {"enableColors", _wrap_Vbo_enableColors}, 
    {"enableNormals", _wrap_Vbo_enableNormals}, 
    {"enableTexCoords", _wrap_Vbo_enableTexCoords}, 
    {"enableIndices", _wrap_Vbo_enableIndices}, 
    {"disableColors", _wrap_Vbo_disableColors}, 
    {"disableNormals", _wrap_Vbo_disableNormals}, 
    {"disableTexCoords", _wrap_Vbo_disableTexCoords}, 
    {"disableIndices", _wrap_Vbo_disableIndices}, 
    {"getVertId", _wrap_Vbo_getVertId}, 
    {"getColorId", _wrap_Vbo_getColorId}, 
    {"getNormalId", _wrap_Vbo_getNormalId}, 
    {"getTexCoordId", _wrap_Vbo_getTexCoordId}, 
    {"getIndexId", _wrap_Vbo_getIndexId}, 
    {"getIsAllocated", _wrap_Vbo_getIsAllocated}, 
    {"getUsingVerts", _wrap_Vbo_getUsingVerts}, 
    {"getUsingColors", _wrap_Vbo_getUsingColors}, 
    {"getUsingNormals", _wrap_Vbo_getUsingNormals}, 
    {"getUsingTexCoords", _wrap_Vbo_getUsingTexCoords}, 
    {"getUsingIndices", _wrap_Vbo_getUsingIndices}, 
    {"draw", _wrap_Vbo_draw}, 
    {"drawElements", _wrap_Vbo_drawElements}, 
    {"drawInstanced", _wrap_Vbo_drawInstanced}, 
    {"drawElementsInstanced", _wrap_Vbo_drawElementsInstanced}, 
    {"bind", _wrap_Vbo_bind}, 
    {"unbind", _wrap_Vbo_unbind}, 
    {"clear", _wrap_Vbo_clear}, 
    {"clearVertices", _wrap_Vbo_clearVertices}, 
    {"clearNormals", _wrap_Vbo_clearNormals}, 
    {"clearColors", _wrap_Vbo_clearColors}, 
    {"clearTexCoords", _wrap_Vbo_clearTexCoords}, 
    {"clearIndices", _wrap_Vbo_clearIndices}, 
    {"getNumVertices", _wrap_Vbo_getNumVertices}, 
    {"getNumIndices", _wrap_Vbo_getNumIndices}, 
    {0,0}
};
static swig_lua_attribute swig_ofVbo_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofVbo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofVbo_cls_methods[] = {
    {"disableVAOs", _wrap_Vbo_disableVAOs}, 
    {"enableVAOs", _wrap_Vbo_enableVAOs}, 
    {0,0}
};
static swig_lua_const_info swig_ofVbo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofVbo_bases[] = {0};
static const char *swig_ofVbo_base_names[] = {0};
static swig_lua_class _wrap_class_ofVbo = { "Vbo", &SWIGTYPE_p_ofVbo,_wrap_new_Vbo, swig_delete_Vbo, swig_ofVbo_methods, swig_ofVbo_attributes, { "Vbo", swig_ofVbo_cls_methods, swig_ofVbo_cls_attributes, swig_ofVbo_cls_constants }, swig_ofVbo_bases, swig_ofVbo_base_names };

static int _wrap_VboMesh_draw__SWIG_0_0(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  SWIG_check_num_args("draw",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofVboMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("VboMesh_draw",1,SWIGTYPE_p_ofVboMesh); }  (arg1)->draw(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_new_VboMesh__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofVboMesh *result = 0 ;
  SWIG_check_num_args("ofVboMesh::ofVboMesh",0,0) result = (ofVboMesh *)new ofVboMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVboMesh,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_VboMesh__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofMesh *arg1 = 0 ; ofVboMesh *result = 0 ;
  SWIG_check_num_args("ofVboMesh::ofVboMesh",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofVboMesh::ofVboMesh",1,"ofMesh const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofMesh,0))){ SWIG_fail_ptr("new_VboMesh",1,SWIGTYPE_p_ofMesh); } 
  result = (ofVboMesh *)new ofVboMesh((ofMesh const &)*arg1); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVboMesh,1); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_VboMesh(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_new_VboMesh__SWIG_0(L);}  if (argc == 1) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofMesh, 0)) { _v = 0; }  else {
        _v = 1; }  }  if (_v) { return _wrap_new_VboMesh__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_VboMesh'\n" "  Possible C/C++ prototypes are:\n"
  "    ofVboMesh::ofVboMesh()\n" "    ofVboMesh::ofVboMesh(ofMesh const &)\n"); lua_error(L);return 0; }
static int _wrap_VboMesh_setUsage(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ; int arg2 ;
  SWIG_check_num_args("ofVboMesh::setUsage",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVboMesh::setUsage",1,"ofVboMesh *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofVboMesh::setUsage",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("VboMesh_setUsage",1,SWIGTYPE_p_ofVboMesh); }  arg2 = (int)lua_tonumber(L, 2); (arg1)->setUsage(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VboMesh_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  ofPolyRenderMode arg2 ; ofPolyRenderMode *argp2 ; SWIG_check_num_args("ofVboMesh::draw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVboMesh::draw",1,"ofVboMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVboMesh::draw",2,"ofPolyRenderMode");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("VboMesh_draw",1,SWIGTYPE_p_ofVboMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPolyRenderMode,0))){
    SWIG_fail_ptr("VboMesh_draw",2,SWIGTYPE_p_ofPolyRenderMode); }  arg2 = *argp2; (arg1)->draw(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VboMesh_draw(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVboMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_VboMesh_draw__SWIG_0_0(L);}  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofVboMesh, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPolyRenderMode, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_VboMesh_draw__SWIG_1(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'VboMesh_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    draw()\n" "    ofVboMesh::draw(ofPolyRenderMode)\n"); lua_error(L);return 0; }
static int _wrap_VboMesh_drawInstanced(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ;
  ofPolyRenderMode arg2 ; int arg3 ; ofPolyRenderMode *argp2 ; SWIG_check_num_args("ofVboMesh::drawInstanced",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVboMesh::drawInstanced",1,"ofVboMesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofVboMesh::drawInstanced",2,"ofPolyRenderMode");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofVboMesh::drawInstanced",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("VboMesh_drawInstanced",1,SWIGTYPE_p_ofVboMesh); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPolyRenderMode,0))){
    SWIG_fail_ptr("VboMesh_drawInstanced",2,SWIGTYPE_p_ofPolyRenderMode); }  arg2 = *argp2; arg3 = (int)lua_tonumber(L, 3);
  (arg1)->drawInstanced(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_VboMesh_getVbo(lua_State* L) { int SWIG_arg = 0; ofVboMesh *arg1 = (ofVboMesh *) 0 ; ofVbo *result = 0 ;
  SWIG_check_num_args("ofVboMesh::getVbo",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofVboMesh::getVbo",1,"ofVboMesh *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofVboMesh,0))){
    SWIG_fail_ptr("VboMesh_getVbo",1,SWIGTYPE_p_ofVboMesh); }  result = (ofVbo *) &(arg1)->getVbo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVbo,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_VboMesh(void *obj) {
ofVboMesh *arg1 = (ofVboMesh *) obj;
delete arg1;
}
static swig_lua_method swig_ofVboMesh_methods[] = {
    {"setUsage", _wrap_VboMesh_setUsage}, 
    {"draw", _wrap_VboMesh_draw}, 
    {"drawInstanced", _wrap_VboMesh_drawInstanced}, 
    {"getVbo", _wrap_VboMesh_getVbo}, 
    {0,0}
};
static swig_lua_attribute swig_ofVboMesh_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofVboMesh_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofVboMesh_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofVboMesh_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofVboMesh_bases[] = {0,0};
static const char *swig_ofVboMesh_base_names[] = {"ofMesh *",0};
static swig_lua_class _wrap_class_ofVboMesh = { "VboMesh", &SWIGTYPE_p_ofVboMesh,_wrap_new_VboMesh, swig_delete_VboMesh, swig_ofVboMesh_methods, swig_ofVboMesh_attributes, { "VboMesh", swig_ofVboMesh_cls_methods, swig_ofVboMesh_cls_attributes, swig_ofVboMesh_cls_constants }, swig_ofVboMesh_bases, swig_ofVboMesh_base_names };

static int _wrap_getUsingArbTex(lua_State* L) { int SWIG_arg = 0; bool result; SWIG_check_num_args("ofGetUsingArbTex",0,0)
  result = (bool)ofGetUsingArbTex(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_enableArbTex(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableArbTex",0,0) ofEnableArbTex();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_disableArbTex(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableArbTex",0,0) ofDisableArbTex();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getUsingNormalizedTexCoords(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofGetUsingNormalizedTexCoords",0,0) result = (bool)ofGetUsingNormalizedTexCoords();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_enableNormalizedTexCoords(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofEnableNormalizedTexCoords",0,0) ofEnableNormalizedTexCoords(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_disableNormalizedTexCoords(lua_State* L) { int SWIG_arg = 0;
  SWIG_check_num_args("ofDisableNormalizedTexCoords",0,0) ofDisableNormalizedTexCoords(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_TextureData(lua_State* L) { int SWIG_arg = 0; ofTextureData *result = 0 ;
  SWIG_check_num_args("ofTextureData::ofTextureData",0,0) result = (ofTextureData *)new ofTextureData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTextureData,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_TextureData_textureID_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  unsigned int arg2 ; SWIG_check_num_args("ofTextureData::textureID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureID",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::textureID",2,"unsigned int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_textureID_set",1,SWIGTYPE_p_ofTextureData); } 
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative") arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->textureID = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_textureID_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  unsigned int result; SWIG_check_num_args("ofTextureData::textureID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureID",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_textureID_get",1,SWIGTYPE_p_ofTextureData); }  result = (unsigned int) ((arg1)->textureID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_textureTarget_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  int arg2 ; SWIG_check_num_args("ofTextureData::textureTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureTarget",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::textureTarget",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_textureTarget_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->textureTarget = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_textureTarget_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  int result; SWIG_check_num_args("ofTextureData::textureTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureTarget",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_textureTarget_get",1,SWIGTYPE_p_ofTextureData); }  result = (int) ((arg1)->textureTarget);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_glTypeInternal_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  int arg2 ; SWIG_check_num_args("ofTextureData::glTypeInternal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::glTypeInternal",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::glTypeInternal",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_glTypeInternal_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->glTypeInternal = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_glTypeInternal_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  int result; SWIG_check_num_args("ofTextureData::glTypeInternal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::glTypeInternal",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_glTypeInternal_get",1,SWIGTYPE_p_ofTextureData); }  result = (int) ((arg1)->glTypeInternal);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_tex_t_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::tex_t",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_t",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::tex_t",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_tex_t_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tex_t = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_tex_t_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::tex_t",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_t",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_tex_t_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->tex_t);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_tex_u_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::tex_u",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_u",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::tex_u",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_tex_u_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tex_u = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_tex_u_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::tex_u",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_u",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_tex_u_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->tex_u);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_tex_w_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::tex_w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_w",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::tex_w",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_tex_w_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tex_w = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_tex_w_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::tex_w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_w",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_tex_w_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->tex_w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_tex_h_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::tex_h",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_h",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::tex_h",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_tex_h_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tex_h = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_tex_h_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::tex_h",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::tex_h",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_tex_h_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->tex_h);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_width_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::width",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::width",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_width_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_width_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::width",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_width_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_height_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float arg2 ; SWIG_check_num_args("ofTextureData::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::height",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::height",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_height_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_height_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  float result; SWIG_check_num_args("ofTextureData::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::height",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_height_get",1,SWIGTYPE_p_ofTextureData); }  result = (float) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_bFlipTexture_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofTextureData::bFlipTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bFlipTexture",1,"ofTextureData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofTextureData::bFlipTexture",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_bFlipTexture_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bFlipTexture = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_bFlipTexture_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool result; SWIG_check_num_args("ofTextureData::bFlipTexture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bFlipTexture",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_bFlipTexture_get",1,SWIGTYPE_p_ofTextureData); }  result = (bool) ((arg1)->bFlipTexture);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_compressionType_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  ofTexCompression arg2 ; SWIG_check_num_args("ofTextureData::compressionType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::compressionType",1,"ofTextureData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTextureData::compressionType",2,"ofTexCompression");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_compressionType_set",1,SWIGTYPE_p_ofTextureData); } 
  arg2 = (ofTexCompression)(int)lua_tonumber(L, 2); if (arg1) (arg1)->compressionType = arg2; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_compressionType_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  ofTexCompression result; SWIG_check_num_args("ofTextureData::compressionType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::compressionType",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_compressionType_get",1,SWIGTYPE_p_ofTextureData); } 
  result = (ofTexCompression) ((arg1)->compressionType); lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_bAllocated_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofTextureData::bAllocated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bAllocated",1,"ofTextureData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofTextureData::bAllocated",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_bAllocated_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bAllocated = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_bAllocated_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool result; SWIG_check_num_args("ofTextureData::bAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bAllocated",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_bAllocated_get",1,SWIGTYPE_p_ofTextureData); }  result = (bool) ((arg1)->bAllocated);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_bUseExternalTextureID_set(lua_State* L) { int SWIG_arg = 0;
  ofTextureData *arg1 = (ofTextureData *) 0 ; bool arg2 ; SWIG_check_num_args("ofTextureData::bUseExternalTextureID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bUseExternalTextureID",1,"ofTextureData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofTextureData::bUseExternalTextureID",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_bUseExternalTextureID_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bUseExternalTextureID = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_bUseExternalTextureID_get(lua_State* L) { int SWIG_arg = 0;
  ofTextureData *arg1 = (ofTextureData *) 0 ; bool result; SWIG_check_num_args("ofTextureData::bUseExternalTextureID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::bUseExternalTextureID",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_bUseExternalTextureID_get",1,SWIGTYPE_p_ofTextureData); } 
  result = (bool) ((arg1)->bUseExternalTextureID); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_textureMatrix_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  ofMatrix4x4 *arg2 = (ofMatrix4x4 *) 0 ; SWIG_check_num_args("ofTextureData::textureMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureMatrix",1,"ofTextureData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofTextureData::textureMatrix",2,"ofMatrix4x4 *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_textureMatrix_set",1,SWIGTYPE_p_ofTextureData); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofMatrix4x4,0))){
    SWIG_fail_ptr("TextureData_textureMatrix_set",2,SWIGTYPE_p_ofMatrix4x4); }  if (arg1) (arg1)->textureMatrix = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_textureMatrix_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  ofMatrix4x4 *result = 0 ; SWIG_check_num_args("ofTextureData::textureMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::textureMatrix",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_textureMatrix_get",1,SWIGTYPE_p_ofTextureData); } 
  result = (ofMatrix4x4 *)& ((arg1)->textureMatrix); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofMatrix4x4,0); SWIG_arg++; 
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_useTextureMatrix_set(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofTextureData::useTextureMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::useTextureMatrix",1,"ofTextureData *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofTextureData::useTextureMatrix",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_useTextureMatrix_set",1,SWIGTYPE_p_ofTextureData); }  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->useTextureMatrix = arg2; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_TextureData_useTextureMatrix_get(lua_State* L) { int SWIG_arg = 0; ofTextureData *arg1 = (ofTextureData *) 0 ;
  bool result; SWIG_check_num_args("ofTextureData::useTextureMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTextureData::useTextureMatrix",1,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("TextureData_useTextureMatrix_get",1,SWIGTYPE_p_ofTextureData); }  result = (bool) ((arg1)->useTextureMatrix);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_TextureData(void *obj) {
ofTextureData *arg1 = (ofTextureData *) obj;
delete arg1;
}
static swig_lua_method swig_ofTextureData_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ofTextureData_attributes[] = {
    { "textureID", _wrap_TextureData_textureID_get, _wrap_TextureData_textureID_set},
    { "textureTarget", _wrap_TextureData_textureTarget_get, _wrap_TextureData_textureTarget_set},
    { "glTypeInternal", _wrap_TextureData_glTypeInternal_get, _wrap_TextureData_glTypeInternal_set},
    { "tex_t", _wrap_TextureData_tex_t_get, _wrap_TextureData_tex_t_set},
    { "tex_u", _wrap_TextureData_tex_u_get, _wrap_TextureData_tex_u_set},
    { "tex_w", _wrap_TextureData_tex_w_get, _wrap_TextureData_tex_w_set},
    { "tex_h", _wrap_TextureData_tex_h_get, _wrap_TextureData_tex_h_set},
    { "width", _wrap_TextureData_width_get, _wrap_TextureData_width_set},
    { "height", _wrap_TextureData_height_get, _wrap_TextureData_height_set},
    { "bFlipTexture", _wrap_TextureData_bFlipTexture_get, _wrap_TextureData_bFlipTexture_set},
    { "compressionType", _wrap_TextureData_compressionType_get, _wrap_TextureData_compressionType_set},
    { "bAllocated", _wrap_TextureData_bAllocated_get, _wrap_TextureData_bAllocated_set},
    { "bUseExternalTextureID", _wrap_TextureData_bUseExternalTextureID_get, _wrap_TextureData_bUseExternalTextureID_set},
    { "textureMatrix", _wrap_TextureData_textureMatrix_get, _wrap_TextureData_textureMatrix_set},
    { "useTextureMatrix", _wrap_TextureData_useTextureMatrix_get, _wrap_TextureData_useTextureMatrix_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofTextureData_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofTextureData_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofTextureData_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofTextureData_bases[] = {0};
static const char *swig_ofTextureData_base_names[] = {0};
static swig_lua_class _wrap_class_ofTextureData = { "TextureData", &SWIGTYPE_p_ofTextureData,_wrap_new_TextureData, swig_delete_TextureData, swig_ofTextureData_methods, swig_ofTextureData_attributes, { "TextureData", swig_ofTextureData_cls_methods, swig_ofTextureData_cls_attributes, swig_ofTextureData_cls_constants }, swig_ofTextureData_bases, swig_ofTextureData_base_names };

static int _wrap_Texture_allocate__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *arg2 = 0 ; SWIG_check_num_args("ofTexture::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofTextureData const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("Texture_allocate",2,SWIGTYPE_p_ofTextureData); }  (arg1)->allocate((ofTextureData const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *arg2 = 0 ; int arg3 ; int arg4 ; SWIG_check_num_args("ofTexture::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofTextureData const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("Texture_allocate",2,SWIGTYPE_p_ofTextureData); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->allocate((ofTextureData const &)*arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; SWIG_check_num_args("ofTexture::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); (arg1)->allocate(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofTexture::allocate",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::allocate",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::allocate",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  (arg1)->allocate(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; bool arg5 ; SWIG_check_num_args("ofTexture::allocate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTexture::allocate",5,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (lua_toboolean(L, 5)!=0); (arg1)->allocate(arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; bool arg5 ; int arg6 ; int arg7 ; SWIG_check_num_args("ofTexture::allocate",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::allocate",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ofTexture::allocate",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::allocate",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::allocate",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (lua_toboolean(L, 5)!=0); arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7); (arg1)->allocate(arg2,arg3,arg4,arg5,arg6,arg7); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Texture_allocate",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->allocate((ofPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_7(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; bool arg3 ; SWIG_check_num_args("ofTexture::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofPixels const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Texture_allocate",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->allocate((ofPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_8(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofShortPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("Texture_allocate",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  (arg1)->allocate((ofShortPixels const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_9(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; bool arg3 ; SWIG_check_num_args("ofTexture::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofShortPixels const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("Texture_allocate",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->allocate((ofShortPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_10(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::allocate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofFloatPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("Texture_allocate",2,SWIGTYPE_p_ofPixels_T_float_t); }  (arg1)->allocate((ofFloatPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate__SWIG_11(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; bool arg3 ; SWIG_check_num_args("ofTexture::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::allocate",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::allocate",2,"ofFloatPixels const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofTexture::allocate",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_allocate",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("Texture_allocate",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->allocate((ofFloatPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_allocate(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofTextureData, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Texture_allocate__SWIG_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Texture_allocate__SWIG_6(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Texture_allocate__SWIG_8(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Texture_allocate__SWIG_10(L);}  }  }  if (argc == 3) { int _v;
    { void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_Texture_allocate__SWIG_9(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_Texture_allocate__SWIG_7(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_Texture_allocate__SWIG_11(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofTextureData, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Texture_allocate__SWIG_1(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Texture_allocate__SWIG_2(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) {
              return _wrap_Texture_allocate__SWIG_4(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_Texture_allocate__SWIG_3(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isboolean(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Texture_allocate__SWIG_5(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_allocate'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTexture::allocate(ofTextureData const &)\n" "    ofTexture::allocate(ofTextureData const &,int,int)\n"
  "    ofTexture::allocate(int,int,int)\n" "    ofTexture::allocate(int,int,int,int,int)\n"
  "    ofTexture::allocate(int,int,int,bool)\n" "    ofTexture::allocate(int,int,int,bool,int,int)\n"
  "    ofTexture::allocate(ofPixels const &)\n" "    ofTexture::allocate(ofPixels const &,bool)\n"
  "    ofTexture::allocate(ofShortPixels const &)\n" "    ofTexture::allocate(ofShortPixels const &,bool)\n"
  "    ofTexture::allocate(ofFloatPixels const &)\n" "    ofTexture::allocate(ofFloatPixels const &,bool)\n");
  lua_error(L);return 0; }
static int _wrap_Texture_clear(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::clear",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::clear",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_clear",1,SWIGTYPE_p_ofTexture); }  (arg1)->clear(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Texture_setUseExternalTextureID(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  GLuint arg2 ; GLuint *argp2 ; SWIG_check_num_args("ofTexture::setUseExternalTextureID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setUseExternalTextureID",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::setUseExternalTextureID",2,"GLuint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_setUseExternalTextureID",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("Texture_setUseExternalTextureID",2,SWIGTYPE_p_GLuint); }  arg2 = *argp2;
  (arg1)->setUseExternalTextureID(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  unsigned char *arg2 = (unsigned char *) (unsigned char *)0 ; int arg3 ; int arg4 ; int arg5 ;
  SWIG_check_num_args("ofTexture::loadData",5,5) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"unsigned char const *const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::loadData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::loadData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Texture_loadData",2,SWIGTYPE_p_unsigned_char); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->loadData((unsigned char const *)arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofTexture::loadData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"unsigned short const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::loadData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::loadData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_unsigned_short,0))){
    SWIG_fail_ptr("Texture_loadData",2,SWIGTYPE_p_unsigned_short); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); (arg1)->loadData((unsigned short const *)arg2,arg3,arg4,arg5);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float *arg2 = (float *) 0 ; int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofTexture::loadData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"float const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::loadData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::loadData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){ SWIG_fail_ptr("Texture_loadData",2,SWIGTYPE_p_float); }
   arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->loadData((float const *)arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::loadData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Texture_loadData",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->loadData((ofPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::loadData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofShortPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("Texture_loadData",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); } 
  (arg1)->loadData((ofShortPixels const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::loadData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofFloatPixels const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("Texture_loadData",2,SWIGTYPE_p_ofPixels_T_float_t); }  (arg1)->loadData((ofFloatPixels const &)*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData__SWIG_6(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofTexture::loadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofPixels const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Texture_loadData",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->loadData((ofPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData__SWIG_7(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofTexture::loadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofShortPixels const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("Texture_loadData",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->loadData((ofShortPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData__SWIG_8(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; int arg3 ; SWIG_check_num_args("ofTexture::loadData",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadData",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::loadData",2,"ofFloatPixels const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadData",3,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadData",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("Texture_loadData",2,SWIGTYPE_p_ofPixels_T_float_t); }  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->loadData((ofFloatPixels const &)*arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadData(lua_State* L) { int argc; int argv[6]={ 1,2,3,4,5,6} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Texture_loadData__SWIG_3(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Texture_loadData__SWIG_4(L);}  }  }  if (argc == 2) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Texture_loadData__SWIG_5(L);}  }  }  if (argc == 3) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Texture_loadData__SWIG_6(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Texture_loadData__SWIG_7(L);}  }  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Texture_loadData__SWIG_8(L);}  }  }  }  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Texture_loadData__SWIG_0(L);}  }  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_unsigned_short, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Texture_loadData__SWIG_1(L);}  }  }  }  }  } 
  if (argc == 5) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) { _v = 0; }  else {
          _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { {
              _v = lua_isnumber(L,argv[4]); }  if (_v) { return _wrap_Texture_loadData__SWIG_2(L);}  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_loadData'\n" "  Possible C/C++ prototypes are:\n"
  "    ofTexture::loadData(unsigned char const *const,int,int,int)\n"
  "    ofTexture::loadData(unsigned short const *,int,int,int)\n" "    ofTexture::loadData(float const *,int,int,int)\n"
  "    ofTexture::loadData(ofPixels const &)\n" "    ofTexture::loadData(ofShortPixels const &)\n"
  "    ofTexture::loadData(ofFloatPixels const &)\n" "    ofTexture::loadData(ofPixels const &,int)\n"
  "    ofTexture::loadData(ofShortPixels const &,int)\n" "    ofTexture::loadData(ofFloatPixels const &,int)\n");
  lua_error(L);return 0; }
static int _wrap_Texture_setRGToRGBASwizzles(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofTexture::setRGToRGBASwizzles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setRGToRGBASwizzles",1,"ofTexture *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofTexture::setRGToRGBASwizzles",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_setRGToRGBASwizzles",1,SWIGTYPE_p_ofTexture); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setRGToRGBASwizzles(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_loadScreenData(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; int arg2 ;
  int arg3 ; int arg4 ; int arg5 ; SWIG_check_num_args("ofTexture::loadScreenData",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::loadScreenData",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::loadScreenData",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::loadScreenData",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::loadScreenData",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::loadScreenData",5,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_loadScreenData",1,SWIGTYPE_p_ofTexture); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  (arg1)->loadScreenData(arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_setAnchorPercent(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofTexture::setAnchorPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setAnchorPercent",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::setAnchorPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::setAnchorPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_setAnchorPercent",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPercent(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Texture_setAnchorPoint(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofTexture::setAnchorPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setAnchorPoint",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::setAnchorPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::setAnchorPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_setAnchorPoint",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); (arg1)->setAnchorPoint(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Texture_resetAnchor(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::resetAnchor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::resetAnchor",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_resetAnchor",1,SWIGTYPE_p_ofTexture); }  (arg1)->resetAnchor(); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_draw__SWIG_0_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPoint *arg2 = 0 ; SWIG_check_num_args("draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_draw",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Texture_draw",2,SWIGTYPE_p_ofVec3f); }
   (arg1)->draw((ofPoint const &)*arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_draw__SWIG_0_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofRectangle *arg2 = 0 ; SWIG_check_num_args("draw",2,2) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofRectangle const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_draw",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofRectangle,0))){
    SWIG_fail_ptr("Texture_draw",2,SWIGTYPE_p_ofRectangle); }  (arg1)->draw((ofRectangle const &)*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_draw__SWIG_0_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPoint *arg2 = 0 ; float arg3 ; float arg4 ; SWIG_check_num_args("draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("draw",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("draw",2,"ofPoint const &"); if(!lua_isnumber(L,3)) SWIG_fail_arg("draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_draw",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Texture_draw",2,SWIGTYPE_p_ofVec3f); }
   arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); (arg1)->draw((ofPoint const &)*arg2,arg3,arg4);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_draw__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; ofPoint *arg2 = 0 ;
  ofPoint *arg3 = 0 ; ofPoint *arg4 = 0 ; ofPoint *arg5 = 0 ; SWIG_check_num_args("ofTexture::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::draw",2,"ofPoint const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofTexture::draw",3,"ofPoint const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ofTexture::draw",4,"ofPoint const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ofTexture::draw",5,"ofPoint const &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_draw",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Texture_draw",2,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Texture_draw",3,SWIGTYPE_p_ofVec3f); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_ofVec3f,0))){ SWIG_fail_ptr("Texture_draw",4,SWIGTYPE_p_ofVec3f); }
   if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("Texture_draw",5,SWIGTYPE_p_ofVec3f); } 
  (arg1)->draw((ofPoint const &)*arg2,(ofPoint const &)*arg3,(ofPoint const &)*arg4,(ofPoint const &)*arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_draw__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; SWIG_check_num_args("ofTexture::draw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::draw",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_draw",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  (arg1)->draw(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_draw__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; SWIG_check_num_args("ofTexture::draw",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::draw",4,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_draw",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); (arg1)->draw(arg2,arg3,arg4); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Texture_draw__SWIG_4(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; SWIG_check_num_args("ofTexture::draw",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::draw",5,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_draw",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); (arg1)->draw(arg2,arg3,arg4,arg5); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_draw__SWIG_5(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; float arg4 ; float arg5 ; float arg6 ; SWIG_check_num_args("ofTexture::draw",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::draw",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::draw",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::draw",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::draw",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::draw",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::draw",6,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_draw",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2); arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5); arg6 = (float)lua_tonumber(L, 6);
  (arg1)->draw(arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_draw(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Texture_draw__SWIG_0_0(L);}  }  }  if (argc == 2) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofRectangle, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { return _wrap_Texture_draw__SWIG_0_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          return _wrap_Texture_draw__SWIG_2(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { return _wrap_Texture_draw__SWIG_0_2(L);}  }  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_Texture_draw__SWIG_3(L);}  }  }  }  }  if (argc == 5) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
             else { _v = 1; }  }  if (_v) { { void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_ofVec3f, 0)) { _v = 0; }
               else { _v = 1; }  }  if (_v) { return _wrap_Texture_draw__SWIG_1(L);}  }  }  }  }  }  if (argc == 5) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_Texture_draw__SWIG_4(L);}  }  }  }  }  }  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_Texture_draw__SWIG_5(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_draw'\n" "  Possible C/C++ prototypes are:\n"
  "    draw(ofPoint const &)\n" "    draw(ofRectangle const &)\n" "    draw(ofPoint const &,float,float)\n"
  "    ofTexture::draw(ofPoint const &,ofPoint const &,ofPoint const &,ofPoint const &)\n" "    ofTexture::draw(float,float)\n"
  "    ofTexture::draw(float,float,float)\n" "    ofTexture::draw(float,float,float,float)\n"
  "    ofTexture::draw(float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Texture_drawSubsection__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ;
  SWIG_check_num_args("ofTexture::drawSubsection",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::drawSubsection",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::drawSubsection",7,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_drawSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_drawSubsection__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ;
  SWIG_check_num_args("ofTexture::drawSubsection",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::drawSubsection",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTexture::drawSubsection",8,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_drawSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Texture_drawSubsection__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ;
  SWIG_check_num_args("ofTexture::drawSubsection",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::drawSubsection",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTexture::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofTexture::drawSubsection",9,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_drawSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_drawSubsection__SWIG_3(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  float arg2 ; float arg3 ; float arg4 ; float arg5 ; float arg6 ; float arg7 ; float arg8 ; float arg9 ; float arg10 ;
  SWIG_check_num_args("ofTexture::drawSubsection",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::drawSubsection",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::drawSubsection",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::drawSubsection",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofTexture::drawSubsection",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofTexture::drawSubsection",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofTexture::drawSubsection",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofTexture::drawSubsection",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("ofTexture::drawSubsection",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("ofTexture::drawSubsection",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("ofTexture::drawSubsection",10,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_drawSubsection",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); arg4 = (float)lua_tonumber(L, 4); arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6); arg7 = (float)lua_tonumber(L, 7); arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9); arg10 = (float)lua_tonumber(L, 10);
  (arg1)->drawSubsection(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Texture_drawSubsection(lua_State* L) { int argc; int argv[11]={ 1,2,3,4,5,6,7,8,9,10,11} ;
  argc = lua_gettop(L); if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) {
                  return _wrap_Texture_drawSubsection__SWIG_0(L);}  }  }  }  }  }  }  }  if (argc == 8) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { return _wrap_Texture_drawSubsection__SWIG_1(L);}  }  }  }  }  }  }
       }  }  if (argc == 9) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) {
                      return _wrap_Texture_drawSubsection__SWIG_2(L);}  }  }  }  }  }  }  }  }  }  if (argc == 10) { int _v; {
      void *ptr; if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { { _v = lua_isnumber(L,argv[6]); }  if (_v) { {
                    _v = lua_isnumber(L,argv[7]); }  if (_v) { { _v = lua_isnumber(L,argv[8]); }  if (_v) { {
                        _v = lua_isnumber(L,argv[9]); }  if (_v) { return _wrap_Texture_drawSubsection__SWIG_3(L);}  }  }  }  }
               }  }  }  }  }  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_drawSubsection'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTexture::drawSubsection(float,float,float,float,float,float)\n"
  "    ofTexture::drawSubsection(float,float,float,float,float,float,float)\n"
  "    ofTexture::drawSubsection(float,float,float,float,float,float,float,float)\n"
  "    ofTexture::drawSubsection(float,float,float,float,float,float,float,float,float)\n"); lua_error(L);return 0; }
static int _wrap_Texture_readToPixels__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::readToPixels",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::readToPixels",2,"ofPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_readToPixels",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_char_t,0))){
    SWIG_fail_ptr("Texture_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_char_t); }  (arg1)->readToPixels(*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_readToPixels__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofShortPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::readToPixels",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::readToPixels",2,"ofShortPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_readToPixels",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_unsigned_short_t,0))){
    SWIG_fail_ptr("Texture_readToPixels",2,SWIGTYPE_p_ofPixels_T_unsigned_short_t); }  (arg1)->readToPixels(*arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_readToPixels__SWIG_2(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofFloatPixels *arg2 = 0 ; SWIG_check_num_args("ofTexture::readToPixels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::readToPixels",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::readToPixels",2,"ofFloatPixels &");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_readToPixels",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofPixels_T_float_t,0))){
    SWIG_fail_ptr("Texture_readToPixels",2,SWIGTYPE_p_ofPixels_T_float_t); }  (arg1)->readToPixels(*arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_readToPixels(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_char_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Texture_readToPixels__SWIG_0(L);}  }  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_unsigned_short_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Texture_readToPixels__SWIG_1(L);}  }  }  if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofPixels_T_float_t, 0)) {
          _v = 0; }  else { _v = 1; }  }  if (_v) { return _wrap_Texture_readToPixels__SWIG_2(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_readToPixels'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTexture::readToPixels(ofPixels &)\n"
  "    ofTexture::readToPixels(ofShortPixels &)\n" "    ofTexture::readToPixels(ofFloatPixels &)\n"); lua_error(L);return 0; }
static int _wrap_Texture_bind(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::bind",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::bind",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_bind",1,SWIGTYPE_p_ofTexture); }  (arg1)->bind(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Texture_unbind(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  SWIG_check_num_args("ofTexture::unbind",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::unbind",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_unbind",1,SWIGTYPE_p_ofTexture); }  (arg1)->unbind(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Texture_getCoordFromPoint(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; ofPoint result; SWIG_check_num_args("ofTexture::getCoordFromPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getCoordFromPoint",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::getCoordFromPoint",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::getCoordFromPoint",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_getCoordFromPoint",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (arg1)->getCoordFromPoint(arg2,arg3); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Texture_getCoordFromPercent(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float arg2 ;
  float arg3 ; ofPoint result; SWIG_check_num_args("ofTexture::getCoordFromPercent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getCoordFromPercent",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::getCoordFromPercent",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofTexture::getCoordFromPercent",3,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_getCoordFromPercent",1,SWIGTYPE_p_ofTexture); }  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3); result = (arg1)->getCoordFromPercent(arg2,arg3); {
    ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_Texture_setTextureWrap(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; GLint arg2 ;
  GLint arg3 ; GLint *argp2 ; GLint *argp3 ; SWIG_check_num_args("ofTexture::setTextureWrap",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setTextureWrap",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::setTextureWrap",2,"GLint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofTexture::setTextureWrap",3,"GLint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_setTextureWrap",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Texture_setTextureWrap",2,SWIGTYPE_p_GLint); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Texture_setTextureWrap",3,SWIGTYPE_p_GLint); }  arg3 = *argp3; (arg1)->setTextureWrap(arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_setTextureMinMagFilter(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  GLint arg2 ; GLint arg3 ; GLint *argp2 ; GLint *argp3 ; SWIG_check_num_args("ofTexture::setTextureMinMagFilter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setTextureMinMagFilter",1,"ofTexture *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofTexture::setTextureMinMagFilter",2,"GLint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ofTexture::setTextureMinMagFilter",3,"GLint");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_setTextureMinMagFilter",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Texture_setTextureMinMagFilter",2,SWIGTYPE_p_GLint); }  arg2 = *argp2;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("Texture_setTextureMinMagFilter",3,SWIGTYPE_p_GLint); }  arg3 = *argp3;
  (arg1)->setTextureMinMagFilter(arg2,arg3); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_setCompression(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTexCompression arg2 ; SWIG_check_num_args("ofTexture::setCompression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::setCompression",1,"ofTexture *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofTexture::setCompression",2,"ofTexCompression");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_setCompression",1,SWIGTYPE_p_ofTexture); }  arg2 = (ofTexCompression)(int)lua_tonumber(L, 2);
  (arg1)->setCompression(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_bAllocated(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; bool result;
  SWIG_check_num_args("ofTexture::bAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::bAllocated",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_bAllocated",1,SWIGTYPE_p_ofTexture); }  result = (bool)(arg1)->bAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_isAllocated(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; bool result;
  SWIG_check_num_args("ofTexture::isAllocated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::isAllocated",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_isAllocated",1,SWIGTYPE_p_ofTexture); }  result = (bool)(arg1)->isAllocated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_getTextureData__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *result = 0 ; SWIG_check_num_args("ofTexture::getTextureData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getTextureData",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_getTextureData",1,SWIGTYPE_p_ofTexture); }  result = (ofTextureData *) &(arg1)->getTextureData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTextureData,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Texture_getTextureData__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *result = 0 ; SWIG_check_num_args("ofTexture::getTextureData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getTextureData",1,"ofTexture const *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_getTextureData",1,SWIGTYPE_p_ofTexture); } 
  result = (ofTextureData *) &((ofTexture const *)arg1)->getTextureData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTextureData,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Texture_getTextureData(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 1) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Texture_getTextureData__SWIG_0(L);}  }  if (argc == 1) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofTexture, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { return _wrap_Texture_getTextureData__SWIG_1(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Texture_getTextureData'\n"
  "  Possible C/C++ prototypes are:\n" "    ofTexture::getTextureData()\n" "    ofTexture::getTextureData() const\n");
  lua_error(L);return 0; }
static int _wrap_Texture_texData_set(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *arg2 = (ofTextureData *) 0 ; SWIG_check_num_args("ofTexture::texData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::texData",1,"ofTexture *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofTexture::texData",2,"ofTextureData *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_texData_set",1,SWIGTYPE_p_ofTexture); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofTextureData,0))){
    SWIG_fail_ptr("Texture_texData_set",2,SWIGTYPE_p_ofTextureData); }  if (arg1) (arg1)->texData = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_texData_get(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ;
  ofTextureData *result = 0 ; SWIG_check_num_args("ofTexture::texData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::texData",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_texData_get",1,SWIGTYPE_p_ofTexture); }  result = (ofTextureData *)& ((arg1)->texData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofTextureData,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_Texture_getHeight(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float result;
  SWIG_check_num_args("ofTexture::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getHeight",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_getHeight",1,SWIGTYPE_p_ofTexture); }  result = (float)(arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_Texture_getWidth(lua_State* L) { int SWIG_arg = 0; ofTexture *arg1 = (ofTexture *) 0 ; float result;
  SWIG_check_num_args("ofTexture::getWidth",1,1) if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofTexture::getWidth",1,"ofTexture *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofTexture,0))){
    SWIG_fail_ptr("Texture_getWidth",1,SWIGTYPE_p_ofTexture); }  result = (float)(arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_Texture(void *obj) {
ofTexture *arg1 = (ofTexture *) obj;
delete arg1;
}
static swig_lua_method swig_ofTexture_methods[] = {
    {"allocate", _wrap_Texture_allocate}, 
    {"clear", _wrap_Texture_clear}, 
    {"setUseExternalTextureID", _wrap_Texture_setUseExternalTextureID}, 
    {"loadData", _wrap_Texture_loadData}, 
    {"setRGToRGBASwizzles", _wrap_Texture_setRGToRGBASwizzles}, 
    {"loadScreenData", _wrap_Texture_loadScreenData}, 
    {"setAnchorPercent", _wrap_Texture_setAnchorPercent}, 
    {"setAnchorPoint", _wrap_Texture_setAnchorPoint}, 
    {"resetAnchor", _wrap_Texture_resetAnchor}, 
    {"draw", _wrap_Texture_draw}, 
    {"drawSubsection", _wrap_Texture_drawSubsection}, 
    {"readToPixels", _wrap_Texture_readToPixels}, 
    {"bind", _wrap_Texture_bind}, 
    {"unbind", _wrap_Texture_unbind}, 
    {"getCoordFromPoint", _wrap_Texture_getCoordFromPoint}, 
    {"getCoordFromPercent", _wrap_Texture_getCoordFromPercent}, 
    {"setTextureWrap", _wrap_Texture_setTextureWrap}, 
    {"setTextureMinMagFilter", _wrap_Texture_setTextureMinMagFilter}, 
    {"setCompression", _wrap_Texture_setCompression}, 
    {"bAllocated", _wrap_Texture_bAllocated}, 
    {"isAllocated", _wrap_Texture_isAllocated}, 
    {"getTextureData", _wrap_Texture_getTextureData}, 
    {"getHeight", _wrap_Texture_getHeight}, 
    {"getWidth", _wrap_Texture_getWidth}, 
    {0,0}
};
static swig_lua_attribute swig_ofTexture_attributes[] = {
    { "texData", _wrap_Texture_texData_get, _wrap_Texture_texData_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofTexture_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofTexture_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofTexture_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofTexture_bases[] = {0};
static const char *swig_ofTexture_base_names[] = {0};
static swig_lua_class _wrap_class_ofTexture = { "Texture", &SWIGTYPE_p_ofTexture,0, swig_delete_Texture, swig_ofTexture_methods, swig_ofTexture_attributes, { "Texture", swig_ofTexture_cls_methods, swig_ofTexture_cls_attributes, swig_ofTexture_cls_constants }, swig_ofTexture_bases, swig_ofTexture_base_names };

static int _wrap_setupOpenGL__SWIG_0(lua_State* L) { int SWIG_arg = 0; SwigValueWrapper< ofPtr< ofAppBaseWindow > > arg1 ;
  int arg2 ; int arg3 ; int arg4 ; ofPtr< ofAppBaseWindow > *argp1 ; SWIG_check_num_args("ofSetupOpenGL",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofSetupOpenGL",1,"ofPtr< ofAppBaseWindow >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupOpenGL",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupOpenGL",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSetupOpenGL",4,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofPtrT_ofAppBaseWindow_t,0))){
    SWIG_fail_ptr("setupOpenGL",1,SWIGTYPE_p_ofPtrT_ofAppBaseWindow_t); }  arg1 = *argp1; arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); ofSetupOpenGL(arg1,arg2,arg3,arg4); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupOpenGL__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ;
  SWIG_check_num_args("ofSetupOpenGL",3,3) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetupOpenGL",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetupOpenGL",2,"int"); if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSetupOpenGL",3,"int");
  arg1 = (int)lua_tonumber(L, 1); arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); ofSetupOpenGL(arg1,arg2,arg3);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setupOpenGL(lua_State* L) { int argc; int argv[5]={ 1,2,3,4,5} ; argc = lua_gettop(L); if (argc == 3) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { return _wrap_setupOpenGL__SWIG_1(L);}  }  }  }  if (argc == 4) { int _v; { void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofPtrT_ofAppBaseWindow_t, 0)) {
        _v = 0; }  else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }
         if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { return _wrap_setupOpenGL__SWIG_0(L);}  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setupOpenGL'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetupOpenGL(ofPtr< ofAppBaseWindow >,int,int,int)\n" "    ofSetupOpenGL(int,int,int)\n"); lua_error(L);return 0; }
static int _wrap_runApp(lua_State* L) { int SWIG_arg = 0; SwigValueWrapper< ofPtr< ofBaseApp > > arg1 ;
  ofPtr< ofBaseApp > *argp1 ; SWIG_check_num_args("ofRunApp",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ofRunApp",1,"ofPtr< ofBaseApp >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_ofPtrT_ofBaseApp_t,0))){
    SWIG_fail_ptr("runApp",1,SWIGTYPE_p_ofPtrT_ofBaseApp_t); }  arg1 = *argp1; ofRunApp(arg1); return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_ofRunApp(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofRunApp",0,0) ofRunApp(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getAppPtr(lua_State* L) { int SWIG_arg = 0; ofBaseApp *result = 0 ; SWIG_check_num_args("ofGetAppPtr",0,0)
  result = (ofBaseApp *)ofGetAppPtr(); SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofBaseApp,0); SWIG_arg++;  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_exit__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofExit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofExit",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofExit(arg1); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_exit__SWIG_1(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofExit",0,0) ofExit(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_exit(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_exit__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_exit__SWIG_0(L);}  }  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'exit'\n"
  "  Possible C/C++ prototypes are:\n" "    ofExit(int)\n" "    ofExit()\n"); lua_error(L);return 0; }
static int _wrap_getFrameRate(lua_State* L) { int SWIG_arg = 0; float result; SWIG_check_num_args("ofGetFrameRate",0,0)
  result = (float)ofGetFrameRate(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getTargetFrameRate(lua_State* L) { int SWIG_arg = 0; float result;
  SWIG_check_num_args("ofGetTargetFrameRate",0,0) result = (float)ofGetTargetFrameRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getFrameNum(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetFrameNum",0,0)
  result = (int)ofGetFrameNum(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_setFrameRate(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSetFrameRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetFrameRate",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSetFrameRate(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_sleepMillis(lua_State* L) { int SWIG_arg = 0; int arg1 ; SWIG_check_num_args("ofSleepMillis",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSleepMillis",1,"int"); arg1 = (int)lua_tonumber(L, 1); ofSleepMillis(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getLastFrameTime(lua_State* L) { int SWIG_arg = 0; double result; SWIG_check_num_args("ofGetLastFrameTime",0,0)
  result = (double)ofGetLastFrameTime(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_setOrientation__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofOrientation arg1 ; bool arg2 ;
  SWIG_check_num_args("ofSetOrientation",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetOrientation",1,"ofOrientation");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSetOrientation",2,"bool"); arg1 = (ofOrientation)(int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0); ofSetOrientation(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setOrientation__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofOrientation arg1 ;
  SWIG_check_num_args("ofSetOrientation",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetOrientation",1,"ofOrientation");
  arg1 = (ofOrientation)(int)lua_tonumber(L, 1); ofSetOrientation(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setOrientation(lua_State* L) { int argc; int argv[3]={ 1,2,3} ; argc = lua_gettop(L); if (argc == 1) { int _v;
    { _v = lua_isnumber(L,argv[0]); }  if (_v) { return _wrap_setOrientation__SWIG_1(L);}  }  if (argc == 2) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isboolean(L,argv[1]); }  if (_v) {
        return _wrap_setOrientation__SWIG_0(L);}  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'setOrientation'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSetOrientation(ofOrientation,bool)\n" "    ofSetOrientation(ofOrientation)\n"); lua_error(L);return 0; }
static int _wrap_getOrientation(lua_State* L) { int SWIG_arg = 0; ofOrientation result;
  SWIG_check_num_args("ofGetOrientation",0,0) result = (ofOrientation)ofGetOrientation();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_hideCursor(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofHideCursor",0,0) ofHideCursor();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_showCursor(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofShowCursor",0,0) ofShowCursor();
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getWindowPositionX(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetWindowPositionX",0,0) result = (int)ofGetWindowPositionX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getWindowPositionY(lua_State* L) { int SWIG_arg = 0; int result;
  SWIG_check_num_args("ofGetWindowPositionY",0,0) result = (int)ofGetWindowPositionY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getScreenWidth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetScreenWidth",0,0)
  result = (int)ofGetScreenWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getScreenHeight(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetScreenHeight",0,0)
  result = (int)ofGetScreenHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getWindowMode(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWindowMode",0,0)
  result = (int)ofGetWindowMode(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getWidth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWidth",0,0)
  result = (int)ofGetWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getHeight(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetHeight",0,0)
  result = (int)ofGetHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getWindowWidth(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWindowWidth",0,0)
  result = (int)ofGetWindowWidth(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getWindowHeight(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetWindowHeight",0,0)
  result = (int)ofGetWindowHeight(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_doesHWOrientation(lua_State* L) { int SWIG_arg = 0; bool result; SWIG_check_num_args("ofDoesHWOrientation",0,0)
  result = (bool)ofDoesHWOrientation(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getWindowSize(lua_State* L) { int SWIG_arg = 0; ofPoint result; SWIG_check_num_args("ofGetWindowSize",0,0)
  result = ofGetWindowSize(); { ofPoint * resultptr = new ofPoint((const ofPoint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofVec3f,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getWindowRect(lua_State* L) { int SWIG_arg = 0; ofRectangle result; SWIG_check_num_args("ofGetWindowRect",0,0)
  result = ofGetWindowRect(); { ofRectangle * resultptr = new ofRectangle((const ofRectangle &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofRectangle,1); SWIG_arg++; }  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getWindowPtr(lua_State* L) { int SWIG_arg = 0; ofAppBaseWindow *result = 0 ;
  SWIG_check_num_args("ofGetWindowPtr",0,0) result = (ofAppBaseWindow *)ofGetWindowPtr();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofAppBaseWindow,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setWindowPosition(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetWindowPosition",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetWindowPosition",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetWindowPosition",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetWindowPosition(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setWindowShape(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSetWindowShape",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSetWindowShape",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSetWindowShape",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSetWindowShape(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_setWindowTitle(lua_State* L) { int SWIG_arg = 0; std::string arg1 ; SWIG_check_num_args("ofSetWindowTitle",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("ofSetWindowTitle",1,"std::string"); (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  ofSetWindowTitle(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_enableSetupScreen(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofEnableSetupScreen",0,0)
  ofEnableSetupScreen(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_disableSetupScreen(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofDisableSetupScreen",0,0)
  ofDisableSetupScreen(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setFullscreen(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSetFullscreen",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetFullscreen",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofSetFullscreen(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_toggleFullscreen(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofToggleFullscreen",0,0)
  ofToggleFullscreen(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_setVerticalSync(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSetVerticalSync",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetVerticalSync",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0); ofSetVerticalSync(arg1);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getMousePressed__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; bool result;
  SWIG_check_num_args("ofGetMousePressed",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofGetMousePressed",1,"int");
  arg1 = (int)lua_tonumber(L, 1); result = (bool)ofGetMousePressed(arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getMousePressed__SWIG_1(lua_State* L) { int SWIG_arg = 0; bool result;
  SWIG_check_num_args("ofGetMousePressed",0,0) result = (bool)ofGetMousePressed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getMousePressed(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_getMousePressed__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_getMousePressed__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'getMousePressed'\n" "  Possible C/C++ prototypes are:\n"
  "    ofGetMousePressed(int)\n" "    ofGetMousePressed()\n"); lua_error(L);return 0; }
static int _wrap_getKeyPressed__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; bool result;
  SWIG_check_num_args("ofGetKeyPressed",1,1) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofGetKeyPressed",1,"int");
  arg1 = (int)lua_tonumber(L, 1); result = (bool)ofGetKeyPressed(arg1); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_getKeyPressed__SWIG_1(lua_State* L) { int SWIG_arg = 0; bool result; SWIG_check_num_args("ofGetKeyPressed",0,0)
  result = (bool)ofGetKeyPressed(); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getKeyPressed(lua_State* L) { int argc; int argv[2]={ 1,2} ; argc = lua_gettop(L); if (argc == 0) {
    return _wrap_getKeyPressed__SWIG_1(L);}  if (argc == 1) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      return _wrap_getKeyPressed__SWIG_0(L);}  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'getKeyPressed'\n" "  Possible C/C++ prototypes are:\n"
  "    ofGetKeyPressed(int)\n" "    ofGetKeyPressed()\n"); lua_error(L);return 0; }
static int _wrap_getMouseX(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetMouseX",0,0)
  result = (int)ofGetMouseX(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getMouseY(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetMouseY",0,0)
  result = (int)ofGetMouseY(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_getPreviousMouseX(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetPreviousMouseX",0,0)
  result = (int)ofGetPreviousMouseX(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_getPreviousMouseY(lua_State* L) { int SWIG_arg = 0; int result; SWIG_check_num_args("ofGetPreviousMouseY",0,0)
  result = (int)ofGetPreviousMouseY(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_setEscapeQuitsApp(lua_State* L) { int SWIG_arg = 0; bool arg1 ; SWIG_check_num_args("ofSetEscapeQuitsApp",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("ofSetEscapeQuitsApp",1,"bool"); arg1 = (lua_toboolean(L, 1)!=0);
  ofSetEscapeQuitsApp(arg1); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_exitApp(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("exitApp",0,0) exitApp(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_DragInfo_files_set(lua_State* L) { int SWIG_arg = 0; ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ; SWIG_check_num_args("ofDragInfo::files",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDragInfo::files",1,"ofDragInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofDragInfo::files",2,"std::vector< std::string > *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDragInfo,0))){
    SWIG_fail_ptr("DragInfo_files_set",1,SWIGTYPE_p_ofDragInfo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("DragInfo_files_set",2,SWIGTYPE_p_std__vectorT_std__string_t); }  if (arg1) (arg1)->files = *arg2;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_DragInfo_files_get(lua_State* L) { int SWIG_arg = 0; ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  std::vector< std::string > *result = 0 ; SWIG_check_num_args("ofDragInfo::files",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDragInfo::files",1,"ofDragInfo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDragInfo,0))){
    SWIG_fail_ptr("DragInfo_files_get",1,SWIGTYPE_p_ofDragInfo); }  result = (std::vector< std::string > *)& ((arg1)->files);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_DragInfo_position_set(lua_State* L) { int SWIG_arg = 0; ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  ofPoint *arg2 = (ofPoint *) 0 ; SWIG_check_num_args("ofDragInfo::position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDragInfo::position",1,"ofDragInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofDragInfo::position",2,"ofPoint *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDragInfo,0))){
    SWIG_fail_ptr("DragInfo_position_set",1,SWIGTYPE_p_ofDragInfo); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofVec3f,0))){
    SWIG_fail_ptr("DragInfo_position_set",2,SWIGTYPE_p_ofVec3f); }  if (arg1) (arg1)->position = *arg2; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_DragInfo_position_get(lua_State* L) { int SWIG_arg = 0; ofDragInfo *arg1 = (ofDragInfo *) 0 ;
  ofPoint *result = 0 ; SWIG_check_num_args("ofDragInfo::position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofDragInfo::position",1,"ofDragInfo *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofDragInfo,0))){
    SWIG_fail_ptr("DragInfo_position_get",1,SWIGTYPE_p_ofDragInfo); }  result = (ofPoint *)& ((arg1)->position);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofVec3f,0); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_new_DragInfo(lua_State* L) { int SWIG_arg = 0; ofDragInfo *result = 0 ;
  SWIG_check_num_args("ofDragInfo::ofDragInfo",0,0) result = (ofDragInfo *)new ofDragInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofDragInfo,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static void swig_delete_DragInfo(void *obj) {
ofDragInfo *arg1 = (ofDragInfo *) obj;
delete arg1;
}
static swig_lua_method swig_ofDragInfo_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_ofDragInfo_attributes[] = {
    { "files", _wrap_DragInfo_files_get, _wrap_DragInfo_files_set},
    { "position", _wrap_DragInfo_position_get, _wrap_DragInfo_position_set},
    {0,0,0}
};
static swig_lua_attribute swig_ofDragInfo_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofDragInfo_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofDragInfo_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofDragInfo_bases[] = {0};
static const char *swig_ofDragInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ofDragInfo = { "DragInfo", &SWIGTYPE_p_ofDragInfo,_wrap_new_DragInfo, swig_delete_DragInfo, swig_ofDragInfo_methods, swig_ofDragInfo_attributes, { "DragInfo", swig_ofDragInfo_cls_methods, swig_ofDragInfo_cls_attributes, swig_ofDragInfo_cls_constants }, swig_ofDragInfo_bases, swig_ofDragInfo_base_names };

static int _wrap_soundStreamSetup__SWIG_0(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  ofBaseApp *arg3 = (ofBaseApp *) 0 ; SWIG_check_num_args("ofSoundStreamSetup",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSoundStreamSetup",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStreamSetup",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofSoundStreamSetup",3,"ofBaseApp *"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofBaseApp,0))){
    SWIG_fail_ptr("soundStreamSetup",3,SWIGTYPE_p_ofBaseApp); }  ofSoundStreamSetup(arg1,arg2,arg3); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_soundStreamSetup__SWIG_1(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  SWIG_check_num_args("ofSoundStreamSetup",2,2) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSoundStreamSetup",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStreamSetup",2,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); ofSoundStreamSetup(arg1,arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_soundStreamSetup__SWIG_2(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ; int arg3 ; int arg4 ;
  int arg5 ; SWIG_check_num_args("ofSoundStreamSetup",5,5) if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSoundStreamSetup",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStreamSetup",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSoundStreamSetup",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSoundStreamSetup",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSoundStreamSetup",5,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5); ofSoundStreamSetup(arg1,arg2,arg3,arg4,arg5); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_soundStreamSetup__SWIG_3(lua_State* L) { int SWIG_arg = 0; int arg1 ; int arg2 ;
  ofBaseApp *arg3 = (ofBaseApp *) 0 ; int arg4 ; int arg5 ; int arg6 ; SWIG_check_num_args("ofSoundStreamSetup",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ofSoundStreamSetup",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStreamSetup",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("ofSoundStreamSetup",3,"ofBaseApp *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSoundStreamSetup",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSoundStreamSetup",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofSoundStreamSetup",6,"int"); arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2); if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ofBaseApp,0))){
    SWIG_fail_ptr("soundStreamSetup",3,SWIGTYPE_p_ofBaseApp); }  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); ofSoundStreamSetup(arg1,arg2,arg3,arg4,arg5,arg6); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_soundStreamSetup(lua_State* L) { int argc; int argv[7]={ 1,2,3,4,5,6,7} ; argc = lua_gettop(L);
  if (argc == 2) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) {
        return _wrap_soundStreamSetup__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { _v = lua_isnumber(L,argv[0]); }  if (_v) {
      { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofBaseApp, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { return _wrap_soundStreamSetup__SWIG_0(L);}  }  }  }  if (argc == 5) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); } 
        if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) {
              return _wrap_soundStreamSetup__SWIG_2(L);}  }  }  }  }  }  if (argc == 6) { int _v; {
      _v = lua_isnumber(L,argv[0]); }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ofBaseApp, 0)) { _v = 0; }
           else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); } 
            if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_soundStreamSetup__SWIG_3(L);}  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'soundStreamSetup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSoundStreamSetup(int,int,ofBaseApp *)\n" "    ofSoundStreamSetup(int,int)\n"
  "    ofSoundStreamSetup(int,int,int,int,int)\n" "    ofSoundStreamSetup(int,int,ofBaseApp *,int,int,int)\n");
  lua_error(L);return 0; }
static int _wrap_soundStreamStop(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSoundStreamStop",0,0)
  ofSoundStreamStop(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_soundStreamStart(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSoundStreamStart",0,0)
  ofSoundStreamStart(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_soundStreamClose(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSoundStreamClose",0,0)
  ofSoundStreamClose(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_soundStreamListDevices(lua_State* L) { int SWIG_arg = 0; SWIG_check_num_args("ofSoundStreamListDevices",0,0)
  ofSoundStreamListDevices(); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_new_SoundStream(lua_State* L) { int SWIG_arg = 0; ofSoundStream *result = 0 ;
  SWIG_check_num_args("ofSoundStream::ofSoundStream",0,0) result = (ofSoundStream *)new ofSoundStream();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofSoundStream,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_SoundStream_setSoundStream(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SwigValueWrapper< ofPtr< ofBaseSoundStream > > arg2 ; ofPtr< ofBaseSoundStream > *argp2 ;
  SWIG_check_num_args("ofSoundStream::setSoundStream",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setSoundStream",1,"ofSoundStream *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofSoundStream::setSoundStream",2,"ofPtr< ofBaseSoundStream >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_setSoundStream",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPtrT_ofBaseSoundStream_t,0))){
    SWIG_fail_ptr("SoundStream_setSoundStream",2,SWIGTYPE_p_ofPtrT_ofBaseSoundStream_t); }  arg2 = *argp2;
  (arg1)->setSoundStream(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_getSoundStream(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SwigValueWrapper< ofPtr< ofBaseSoundStream > > result; SWIG_check_num_args("ofSoundStream::getSoundStream",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getSoundStream",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_getSoundStream",1,SWIGTYPE_p_ofSoundStream); }  result = (arg1)->getSoundStream(); {
    ofPtr< ofBaseSoundStream > * resultptr = new ofPtr< ofBaseSoundStream >((const ofPtr< ofBaseSoundStream > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPtrT_ofBaseSoundStream_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_listDevices(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SWIG_check_num_args("ofSoundStream::listDevices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::listDevices",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_listDevices",1,SWIGTYPE_p_ofSoundStream); }  (arg1)->listDevices(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_setDeviceID(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int arg2 ; SWIG_check_num_args("ofSoundStream::setDeviceID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setDeviceID",1,"ofSoundStream *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStream::setDeviceID",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_setDeviceID",1,SWIGTYPE_p_ofSoundStream); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDeviceID(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_setup__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  ofBaseApp *arg2 = (ofBaseApp *) 0 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ; int arg7 ; bool result;
  SWIG_check_num_args("ofSoundStream::setup",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setup",1,"ofSoundStream *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofSoundStream::setup",2,"ofBaseApp *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSoundStream::setup",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSoundStream::setup",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSoundStream::setup",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofSoundStream::setup",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("ofSoundStream::setup",7,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_setup",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseApp,0))){
    SWIG_fail_ptr("SoundStream_setup",2,SWIGTYPE_p_ofBaseApp); }  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5); arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7); result = (bool)(arg1)->setup(arg2,arg3,arg4,arg5,arg6,arg7);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_setInput(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  ofBaseSoundInput *arg2 = (ofBaseSoundInput *) 0 ; SWIG_check_num_args("ofSoundStream::setInput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setInput",1,"ofSoundStream *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofSoundStream::setInput",2,"ofBaseSoundInput *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_setInput",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseSoundInput,0))){
    SWIG_fail_ptr("SoundStream_setInput",2,SWIGTYPE_p_ofBaseSoundInput); }  (arg1)->setInput(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_setOutput(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  ofBaseSoundOutput *arg2 = (ofBaseSoundOutput *) 0 ; SWIG_check_num_args("ofSoundStream::setOutput",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setOutput",1,"ofSoundStream *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ofSoundStream::setOutput",2,"ofBaseSoundOutput *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_setOutput",1,SWIGTYPE_p_ofSoundStream); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ofBaseSoundOutput,0))){
    SWIG_fail_ptr("SoundStream_setOutput",2,SWIGTYPE_p_ofBaseSoundOutput); }  (arg1)->setOutput(arg2); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_setup__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int arg2 ; int arg3 ; int arg4 ; int arg5 ; int arg6 ; bool result; SWIG_check_num_args("ofSoundStream::setup",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::setup",1,"ofSoundStream *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundStream::setup",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ofSoundStream::setup",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ofSoundStream::setup",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ofSoundStream::setup",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ofSoundStream::setup",6,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_setup",1,SWIGTYPE_p_ofSoundStream); }  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3); arg4 = (int)lua_tonumber(L, 4); arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6); result = (bool)(arg1)->setup(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_setup(lua_State* L) { int argc; int argv[8]={ 1,2,3,4,5,6,7,8} ; argc = lua_gettop(L);
  if (argc == 6) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[1]); }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) {
          { _v = lua_isnumber(L,argv[3]); }  if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { {
                _v = lua_isnumber(L,argv[5]); }  if (_v) { return _wrap_SoundStream_setup__SWIG_1(L);}  }  }  }  }  }  } 
  if (argc == 7) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundStream, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ofBaseApp, 0)) { _v = 0; }
         else { _v = 1; }  }  if (_v) { { _v = lua_isnumber(L,argv[2]); }  if (_v) { { _v = lua_isnumber(L,argv[3]); } 
          if (_v) { { _v = lua_isnumber(L,argv[4]); }  if (_v) { { _v = lua_isnumber(L,argv[5]); }  if (_v) { {
                  _v = lua_isnumber(L,argv[6]); }  if (_v) { return _wrap_SoundStream_setup__SWIG_0(L);}  }  }  }  }  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundStream_setup'\n" "  Possible C/C++ prototypes are:\n"
  "    ofSoundStream::setup(ofBaseApp *,int,int,int,int,int)\n" "    ofSoundStream::setup(int,int,int,int,int)\n");
  lua_error(L);return 0; }
static int _wrap_SoundStream_start(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SWIG_check_num_args("ofSoundStream::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::start",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_start",1,SWIGTYPE_p_ofSoundStream); }  (arg1)->start(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_stop(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SWIG_check_num_args("ofSoundStream::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::stop",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_stop",1,SWIGTYPE_p_ofSoundStream); }  (arg1)->stop(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_close(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  SWIG_check_num_args("ofSoundStream::close",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::close",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_close",1,SWIGTYPE_p_ofSoundStream); }  (arg1)->close(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_getTickCount(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  unsigned long long result; SWIG_check_num_args("ofSoundStream::getTickCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getTickCount",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_getTickCount",1,SWIGTYPE_p_ofSoundStream); } 
  result = (unsigned long long)(arg1)->getTickCount(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_getNumInputChannels(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int result; SWIG_check_num_args("ofSoundStream::getNumInputChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getNumInputChannels",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_getNumInputChannels",1,SWIGTYPE_p_ofSoundStream); }  result = (int)(arg1)->getNumInputChannels();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_getNumOutputChannels(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int result; SWIG_check_num_args("ofSoundStream::getNumOutputChannels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getNumOutputChannels",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_getNumOutputChannels",1,SWIGTYPE_p_ofSoundStream); } 
  result = (int)(arg1)->getNumOutputChannels(); lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_getSampleRate(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int result; SWIG_check_num_args("ofSoundStream::getSampleRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getSampleRate",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_getSampleRate",1,SWIGTYPE_p_ofSoundStream); }  result = (int)(arg1)->getSampleRate();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundStream_getBufferSize(lua_State* L) { int SWIG_arg = 0; ofSoundStream *arg1 = (ofSoundStream *) 0 ;
  int result; SWIG_check_num_args("ofSoundStream::getBufferSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundStream::getBufferSize",1,"ofSoundStream *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundStream,0))){
    SWIG_fail_ptr("SoundStream_getBufferSize",1,SWIGTYPE_p_ofSoundStream); }  result = (int)(arg1)->getBufferSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_SoundStream(void *obj) {
ofSoundStream *arg1 = (ofSoundStream *) obj;
delete arg1;
}
static swig_lua_method swig_ofSoundStream_methods[] = {
    {"setSoundStream", _wrap_SoundStream_setSoundStream}, 
    {"getSoundStream", _wrap_SoundStream_getSoundStream}, 
    {"listDevices", _wrap_SoundStream_listDevices}, 
    {"setDeviceID", _wrap_SoundStream_setDeviceID}, 
    {"setInput", _wrap_SoundStream_setInput}, 
    {"setOutput", _wrap_SoundStream_setOutput}, 
    {"setup", _wrap_SoundStream_setup}, 
    {"start", _wrap_SoundStream_start}, 
    {"stop", _wrap_SoundStream_stop}, 
    {"close", _wrap_SoundStream_close}, 
    {"getTickCount", _wrap_SoundStream_getTickCount}, 
    {"getNumInputChannels", _wrap_SoundStream_getNumInputChannels}, 
    {"getNumOutputChannels", _wrap_SoundStream_getNumOutputChannels}, 
    {"getSampleRate", _wrap_SoundStream_getSampleRate}, 
    {"getBufferSize", _wrap_SoundStream_getBufferSize}, 
    {0,0}
};
static swig_lua_attribute swig_ofSoundStream_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofSoundStream_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofSoundStream_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofSoundStream_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofSoundStream_bases[] = {0};
static const char *swig_ofSoundStream_base_names[] = {0};
static swig_lua_class _wrap_class_ofSoundStream = { "SoundStream", &SWIGTYPE_p_ofSoundStream,_wrap_new_SoundStream, swig_delete_SoundStream, swig_ofSoundStream_methods, swig_ofSoundStream_attributes, { "SoundStream", swig_ofSoundStream_cls_methods, swig_ofSoundStream_cls_attributes, swig_ofSoundStream_cls_constants }, swig_ofSoundStream_bases, swig_ofSoundStream_base_names };

static int _wrap_new_SoundPlayer(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *result = 0 ;
  SWIG_check_num_args("ofSoundPlayer::ofSoundPlayer",0,0) result = (ofSoundPlayer *)new ofSoundPlayer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ofSoundPlayer,1); SWIG_arg++;  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L);
  return SWIG_arg; }
static int _wrap_SoundPlayer_setPlayer(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SwigValueWrapper< ofPtr< ofBaseSoundPlayer > > arg2 ; ofPtr< ofBaseSoundPlayer > *argp2 ;
  SWIG_check_num_args("ofSoundPlayer::setPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPlayer",1,"ofSoundPlayer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ofSoundPlayer::setPlayer",2,"ofPtr< ofBaseSoundPlayer >");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_setPlayer",1,SWIGTYPE_p_ofSoundPlayer); } 
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t,0))){
    SWIG_fail_ptr("SoundPlayer_setPlayer",2,SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t); }  arg2 = *argp2; (arg1)->setPlayer(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_getPlayer(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SwigValueWrapper< ofPtr< ofBaseSoundPlayer > > result; SWIG_check_num_args("ofSoundPlayer::getPlayer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getPlayer",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_getPlayer",1,SWIGTYPE_p_ofSoundPlayer); }  result = (arg1)->getPlayer(); {
    ofPtr< ofBaseSoundPlayer > * resultptr = new ofPtr< ofBaseSoundPlayer >((const ofPtr< ofBaseSoundPlayer > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ofPtrT_ofBaseSoundPlayer_t,1); SWIG_arg++; }  return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_loadSound__SWIG_0(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  std::string arg2 ; bool arg3 ; bool result; SWIG_check_num_args("ofSoundPlayer::loadSound",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::loadSound",1,"ofSoundPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSoundPlayer::loadSound",2,"std::string");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("ofSoundPlayer::loadSound",3,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_loadSound",1,SWIGTYPE_p_ofSoundPlayer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  arg3 = (lua_toboolean(L, 3)!=0); result = (bool)(arg1)->loadSound(arg2,arg3); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_loadSound__SWIG_1(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  std::string arg2 ; bool result; SWIG_check_num_args("ofSoundPlayer::loadSound",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::loadSound",1,"ofSoundPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("ofSoundPlayer::loadSound",2,"std::string");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_loadSound",1,SWIGTYPE_p_ofSoundPlayer); }  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (bool)(arg1)->loadSound(arg2); lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail;
  fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_loadSound(lua_State* L) { int argc; int argv[4]={ 1,2,3,4} ; argc = lua_gettop(L); if (argc == 2) {
    int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) {
        return _wrap_SoundPlayer_loadSound__SWIG_1(L);}  }  }  if (argc == 3) { int _v; { void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ofSoundPlayer, 0)) { _v = 0; }
       else { _v = 1; }  }  if (_v) { { _v = lua_isstring(L,argv[1]); }  if (_v) { { _v = lua_isboolean(L,argv[2]); }  if (_v) {
          return _wrap_SoundPlayer_loadSound__SWIG_0(L);}  }  }  } 
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SoundPlayer_loadSound'\n"
  "  Possible C/C++ prototypes are:\n" "    ofSoundPlayer::loadSound(std::string,bool)\n"
  "    ofSoundPlayer::loadSound(std::string)\n"); lua_error(L);return 0; }
static int _wrap_SoundPlayer_unloadSound(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SWIG_check_num_args("ofSoundPlayer::unloadSound",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::unloadSound",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_unloadSound",1,SWIGTYPE_p_ofSoundPlayer); }  (arg1)->unloadSound(); return SWIG_arg;
  if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_play(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SWIG_check_num_args("ofSoundPlayer::play",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::play",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_play",1,SWIGTYPE_p_ofSoundPlayer); }  (arg1)->play(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_stop(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  SWIG_check_num_args("ofSoundPlayer::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::stop",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_stop",1,SWIGTYPE_p_ofSoundPlayer); }  (arg1)->stop(); return SWIG_arg; if(0) SWIG_fail; fail:
  lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_setVolume(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float arg2 ; SWIG_check_num_args("ofSoundPlayer::setVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setVolume",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setVolume",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_setVolume",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setVolume(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_setPan(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ; float arg2 ;
  SWIG_check_num_args("ofSoundPlayer::setPan",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPan",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setPan",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_setPan",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (float)lua_tonumber(L, 2); (arg1)->setPan(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_setSpeed(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ; float arg2 ;
  SWIG_check_num_args("ofSoundPlayer::setSpeed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setSpeed",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setSpeed",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_setSpeed",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSpeed(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_setPaused(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofSoundPlayer::setPaused",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPaused",1,"ofSoundPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSoundPlayer::setPaused",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_setPaused",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setPaused(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_setLoop(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ; bool arg2 ;
  SWIG_check_num_args("ofSoundPlayer::setLoop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setLoop",1,"ofSoundPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSoundPlayer::setLoop",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_setLoop",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (lua_toboolean(L, 2)!=0); (arg1)->setLoop(arg2);
  return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_setMultiPlay(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool arg2 ; SWIG_check_num_args("ofSoundPlayer::setMultiPlay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setMultiPlay",1,"ofSoundPlayer *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ofSoundPlayer::setMultiPlay",2,"bool");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_setMultiPlay",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setMultiPlay(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_setPosition(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float arg2 ; SWIG_check_num_args("ofSoundPlayer::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPosition",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setPosition",2,"float");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_setPosition",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setPosition(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_setPositionMS(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  int arg2 ; SWIG_check_num_args("ofSoundPlayer::setPositionMS",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::setPositionMS",1,"ofSoundPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ofSoundPlayer::setPositionMS",2,"int");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_setPositionMS",1,SWIGTYPE_p_ofSoundPlayer); }  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setPositionMS(arg2); return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_getPositionMS(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  int result; SWIG_check_num_args("ofSoundPlayer::getPositionMS",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getPositionMS",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_getPositionMS",1,SWIGTYPE_p_ofSoundPlayer); }  result = (int)(arg1)->getPositionMS();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_getPosition(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float result; SWIG_check_num_args("ofSoundPlayer::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getPosition",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_getPosition",1,SWIGTYPE_p_ofSoundPlayer); }  result = (float)(arg1)->getPosition();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_getIsPlaying(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  bool result; SWIG_check_num_args("ofSoundPlayer::getIsPlaying",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getIsPlaying",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_getIsPlaying",1,SWIGTYPE_p_ofSoundPlayer); }  result = (bool)(arg1)->getIsPlaying();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_getSpeed(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float result; SWIG_check_num_args("ofSoundPlayer::getSpeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getSpeed",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_getSpeed",1,SWIGTYPE_p_ofSoundPlayer); }  result = (float)(arg1)->getSpeed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_getPan(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ; float result;
  SWIG_check_num_args("ofSoundPlayer::getPan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getPan",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_getPan",1,SWIGTYPE_p_ofSoundPlayer); }  result = (float)(arg1)->getPan();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_getVolume(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ;
  float result; SWIG_check_num_args("ofSoundPlayer::getVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::getVolume",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_getVolume",1,SWIGTYPE_p_ofSoundPlayer); }  result = (float)(arg1)->getVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static int _wrap_SoundPlayer_isLoaded(lua_State* L) { int SWIG_arg = 0; ofSoundPlayer *arg1 = (ofSoundPlayer *) 0 ; bool result;
  SWIG_check_num_args("ofSoundPlayer::isLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ofSoundPlayer::isLoaded",1,"ofSoundPlayer *");
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ofSoundPlayer,0))){
    SWIG_fail_ptr("SoundPlayer_isLoaded",1,SWIGTYPE_p_ofSoundPlayer); }  result = (bool)(arg1)->isLoaded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++; return SWIG_arg; if(0) SWIG_fail; fail: lua_error(L); return SWIG_arg; }
static void swig_delete_SoundPlayer(void *obj) {
ofSoundPlayer *arg1 = (ofSoundPlayer *) obj;
delete arg1;
}
static swig_lua_method swig_ofSoundPlayer_methods[] = {
    {"setPlayer", _wrap_SoundPlayer_setPlayer}, 
    {"getPlayer", _wrap_SoundPlayer_getPlayer}, 
    {"loadSound", _wrap_SoundPlayer_loadSound}, 
    {"unloadSound", _wrap_SoundPlayer_unloadSound}, 
    {"play", _wrap_SoundPlayer_play}, 
    {"stop", _wrap_SoundPlayer_stop}, 
    {"setVolume", _wrap_SoundPlayer_setVolume}, 
    {"setPan", _wrap_SoundPlayer_setPan}, 
    {"setSpeed", _wrap_SoundPlayer_setSpeed}, 
    {"setPaused", _wrap_SoundPlayer_setPaused}, 
    {"setLoop", _wrap_SoundPlayer_setLoop}, 
    {"setMultiPlay", _wrap_SoundPlayer_setMultiPlay}, 
    {"setPosition", _wrap_SoundPlayer_setPosition}, 
    {"setPositionMS", _wrap_SoundPlayer_setPositionMS}, 
    {"getPositionMS", _wrap_SoundPlayer_getPositionMS}, 
    {"getPosition", _wrap_SoundPlayer_getPosition}, 
    {"getIsPlaying", _wrap_SoundPlayer_getIsPlaying}, 
    {"getSpeed", _wrap_SoundPlayer_getSpeed}, 
    {"getPan", _wrap_SoundPlayer_getPan}, 
    {"getVolume", _wrap_SoundPlayer_getVolume}, 
    {"isLoaded", _wrap_SoundPlayer_isLoaded}, 
    {0,0}
};
static swig_lua_attribute swig_ofSoundPlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_attribute swig_ofSoundPlayer_cls_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ofSoundPlayer_cls_methods[] = {
    {0,0}
};
static swig_lua_const_info swig_ofSoundPlayer_cls_constants[] = {
    {0,0,0,0,0,0}
};
static swig_lua_class *swig_ofSoundPlayer_bases[] = {0};
static const char *swig_ofSoundPlayer_base_names[] = {0};
static swig_lua_class _wrap_class_ofSoundPlayer = { "SoundPlayer", &SWIGTYPE_p_ofSoundPlayer,_wrap_new_SoundPlayer, swig_delete_SoundPlayer, swig_ofSoundPlayer_methods, swig_ofSoundPlayer_attributes, { "SoundPlayer", swig_ofSoundPlayer_cls_methods, swig_ofSoundPlayer_cls_attributes, swig_ofSoundPlayer_cls_constants }, swig_ofSoundPlayer_bases, swig_ofSoundPlayer_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_Reg swig_commands[] = {
    { "ofIsVFlipped", _wrap_ofIsVFlipped},
    { "nextPow2", _wrap_nextPow2},
    { "resetElapsedTimeCounter", _wrap_resetElapsedTimeCounter},
    { "getElapsedTimef", _wrap_getElapsedTimef},
    { "getElapsedTimeMillis", _wrap_getElapsedTimeMillis},
    { "getElapsedTimeMicros", _wrap_getElapsedTimeMicros},
    { "getFraneNum", _wrap_getFraneNum},
    { "getSeconds", _wrap_getSeconds},
    { "getMinutes", _wrap_getMinutes},
    { "getHours", _wrap_getHours},
    { "getUnixTime", _wrap_getUnixTime},
    { "getSystemTime", _wrap_getSystemTime},
    { "getSystemTimeMicros", _wrap_getSystemTimeMicros},
    { "getTimestampString",_wrap_getTimestampString},
    { "getYear", _wrap_getYear},
    { "getMonth", _wrap_getMonth},
    { "getDay", _wrap_getDay},
    { "getWeekday", _wrap_getWeekday},
    { "launchBrowser",_wrap_launchBrowser},
    { "enableDataPath", _wrap_enableDataPath},
    { "disableDataPath", _wrap_disableDataPath},
    { "toDataPath",_wrap_toDataPath},
    { "setWorkingDirectoryToDefault", _wrap_setWorkingDirectoryToDefault},
    { "setDataPathRoot", _wrap_setDataPathRoot},
    { "getVersionInfo", _wrap_getVersionInfo},
    { "getVersionMajor", _wrap_getVersionMajor},
    { "getVersionMinor", _wrap_getVersionMinor},
    { "getVersionPath", _wrap_getVersionPath},
    { "saveScreen", _wrap_saveScreen},
    { "saveFrame",_wrap_saveFrame},
    { "saveViewport", _wrap_saveViewport},
    { "splitString",_wrap_splitString},
    { "joinString", _wrap_joinString},
    { "stringReplace", _wrap_stringReplace},
    { "isStringInString", _wrap_isStringInString},
    { "ofStringTimesInString", _wrap_ofStringTimesInString},
    { "toLower", _wrap_toLower},
    { "toUpper", _wrap_toUpper},
    { "system", _wrap_system},
    { "getTargetPlatform", _wrap_getTargetPlatform},
    { "Color_fromHsb",_wrap_Color_fromHsb},
    { "Color_fromHex",_wrap_Color_fromHex},
    { "Color_limit", _wrap_Color_limit},
    { "Matrix4x4_newIdentityMatrix", _wrap_Matrix4x4_newIdentityMatrix},
    { "Matrix4x4_newScaleMatrix",_wrap_Matrix4x4_newScaleMatrix},
    { "Matrix4x4_newTranslationMatrix",_wrap_Matrix4x4_newTranslationMatrix},
    { "Matrix4x4_newRotationMatrix",_wrap_Matrix4x4_newRotationMatrix},
    { "Matrix4x4_getInverseOf", _wrap_Matrix4x4_getInverseOf},
    { "Matrix4x4_getTransposedOf", _wrap_Matrix4x4_getTransposedOf},
    { "Matrix4x4_getOrthoNormalOf", _wrap_Matrix4x4_getOrthoNormalOf},
    { "Matrix4x4_newOrthoMatrix", _wrap_Matrix4x4_newOrthoMatrix},
    { "Matrix4x4_newOrtho2DMatrix", _wrap_Matrix4x4_newOrtho2DMatrix},
    { "Matrix4x4_newFrustumMatrix", _wrap_Matrix4x4_newFrustumMatrix},
    { "Matrix4x4_newPerspectiveMatrix", _wrap_Matrix4x4_newPerspectiveMatrix},
    { "Matrix4x4_newLookAtMatrix", _wrap_Matrix4x4_newLookAtMatrix},
    { "Matrix4x4_transform3x3",_wrap_Matrix4x4_transform3x3},
    { "Vec2f_zero", _wrap_Vec2f_zero},
    { "Vec2f_one", _wrap_Vec2f_one},
    { "Vec3f_zero", _wrap_Vec3f_zero},
    { "Vec3f_one", _wrap_Vec3f_one},
    { "Vec4f_zero", _wrap_Vec4f_zero},
    { "Vec4f_one", _wrap_Vec4f_one},
    { "seedRandom",_wrap_seedRandom},
    { "random",_wrap_random},
    { "randomf", _wrap_randomf},
    { "randomuf", _wrap_randomuf},
    { "normalize", _wrap_normalize},
    { "map",_wrap_map},
    { "clamp", _wrap_clamp},
    { "lerp", _wrap_lerp},
    { "dist", _wrap_dist},
    { "distSquared", _wrap_distSquared},
    { "sign", _wrap_sign},
    { "inRange", _wrap_inRange},
    { "radToDeg", _wrap_radToDeg},
    { "degToRad", _wrap_degToRad},
    { "lerpDegrees", _wrap_lerpDegrees},
    { "lerpRadians", _wrap_lerpRadians},
    { "angleDifferenceDegrees", _wrap_angleDifferenceDegrees},
    { "angleDifferenceRadians", _wrap_angleDifferenceRadians},
    { "wrap", _wrap_wrap},
    { "wrapRadians",_wrap_wrapRadians},
    { "wrapDegrees",_wrap_wrapDegrees},
    { "randomWidth", _wrap_randomWidth},
    { "randomHeight", _wrap_randomHeight},
    { "noise",_wrap_noise},
    { "signedNoise",_wrap_signedNoise},
    { "insidePoly",_wrap_insidePoly},
    { "lineSegmentIntersection", _wrap_lineSegmentIntersection},
    { "bezierPoint", _wrap_bezierPoint},
    { "curvePoint", _wrap_curvePoint},
    { "bezierTangent", _wrap_bezierTangent},
    { "curveTangent", _wrap_curveTangent},
    { "Polyline_fromRectangle", _wrap_Polyline_fromRectangle},
    { "beginSaveScreenAsPDF",_wrap_beginSaveScreenAsPDF},
    { "endSaveScreenAsPDF", _wrap_endSaveScreenAsPDF},
    { "pushView", _wrap_pushView},
    { "popView", _wrap_popView},
    { "viewport",_wrap_viewport},
    { "isVFlipped", _wrap_isVFlipped},
    { "setupScreenPerspective",_wrap_setupScreenPerspective},
    { "setupScreenOrtho",_wrap_setupScreenOrtho},
    { "getCurrentViewport", _wrap_getCurrentViewport},
    { "getNativeViewport", _wrap_getNativeViewport},
    { "getViewportWidth", _wrap_getViewportWidth},
    { "getViewportHeight", _wrap_getViewportHeight},
    { "orientationToDegrees", _wrap_orientationToDegrees},
    { "setCoordHandedness", _wrap_setCoordHandedness},
    { "getCoordHandedness", _wrap_getCoordHandedness},
    { "pushMatrix", _wrap_pushMatrix},
    { "popMatrix", _wrap_popMatrix},
    { "translate",_wrap_translate},
    { "scale",_wrap_scale},
    { "rotateX", _wrap_rotateX},
    { "rotateY", _wrap_rotateY},
    { "rotateZ", _wrap_rotateZ},
    { "rotate",_wrap_rotate},
    { "loadIdentity", _wrap_loadIdentity},
    { "loadMatrix",_wrap_loadMatrix},
    { "multMatrix",_wrap_multMatrix},
    { "setMatrixMode", _wrap_setMatrixMode},
    { "setupGraphicDefaults", _wrap_setupGraphicDefaults},
    { "setupScreen", _wrap_setupScreen},
    { "getRectmode", _wrap_getRectmode},
    { "setCircleResolution", _wrap_setCircleResolution},
    { "setCurveResolution", _wrap_setCurveResolution},
    { "noFill", _wrap_noFill},
    { "fill", _wrap_fill},
    { "getFill", _wrap_getFill},
    { "setLineWidth", _wrap_setLineWidth},
    { "setDepthTest", _wrap_setDepthTest},
    { "enableDepthTest", _wrap_enableDepthTest},
    { "disableDepthTest", _wrap_disableDepthTest},
    { "setColor",_wrap_setColor},
    { "setHexColor", _wrap_setHexColor},
    { "enableBlendMode", _wrap_enableBlendMode},
    { "disableBlendMode", _wrap_disableBlendMode},
    { "enablePointSprites", _wrap_enablePointSprites},
    { "disablePointSprites", _wrap_disablePointSprites},
    { "enableAlphaBlending", _wrap_enableAlphaBlending},
    { "disableAlphaBlending", _wrap_disableAlphaBlending},
    { "enableSmoothing", _wrap_enableSmoothing},
    { "disableSmoothing", _wrap_disableSmoothing},
    { "enableAntiAliasing", _wrap_enableAntiAliasing},
    { "disableAntiAliasing", _wrap_disableAntiAliasing},
    { "getStyle", _wrap_getStyle},
    { "setStyle", _wrap_setStyle},
    { "pushStyle", _wrap_pushStyle},
    { "popStyle", _wrap_popStyle},
    { "setPolyMode", _wrap_setPolyMode},
    { "setRectMode", _wrap_setRectMode},
    { "getBackground", _wrap_getBackground},
    { "background",_wrap_background},
    { "backgroundHex",_wrap_backgroundHex},
    { "backgroundGradient",_wrap_backgroundGradient},
    { "setBackgroundColor",_wrap_setBackgroundColor},
    { "setBackgroundColorHex",_wrap_setBackgroundColorHex},
    { "setBackgroundAuto", _wrap_setBackgroundAuto},
    { "clear",_wrap_clear},
    { "clearAlpha", _wrap_clearAlpha},
    { "triangle",_wrap_triangle},
    { "circle",_wrap_circle},
    { "ellipse",_wrap_ellipse},
    { "line",_wrap_line},
    { "rect",_wrap_rect},
    { "rectRounded",_wrap_rectRounded},
    { "curve",_wrap_curve},
    { "bezier",_wrap_bezier},
    { "beginShape", _wrap_beginShape},
    { "vertex",_wrap_vertex},
    { "vertices", _wrap_vertices},
    { "curveVertex",_wrap_curveVertex},
    { "ofCurveVertices", _wrap_ofCurveVertices},
    { "bezierVertex",_wrap_bezierVertex},
    { "endShape",_wrap_endShape},
    { "nextContour",_wrap_nextContour},
    { "setDrawBitmapMode", _wrap_setDrawBitmapMode},
    { "drawBitmapString",_wrap_drawBitmapString},
    { "drawBitmapStringHighlight",_wrap_drawBitmapStringHighlight},
    { "setPlaneResolution", _wrap_setPlaneResolution},
    { "getPlaneResolution", _wrap_getPlaneResolution},
    { "drawPlane",_wrap_drawPlane},
    { "setSphereResolution", _wrap_setSphereResolution},
    { "getSphereResolution", _wrap_getSphereResolution},
    { "drawSphere",_wrap_drawSphere},
    { "setIcoSphereResolution", _wrap_setIcoSphereResolution},
    { "getIcoSphereResolution", _wrap_getIcoSphereResolution},
    { "drawIcoSphere",_wrap_drawIcoSphere},
    { "setCylinderResolution",_wrap_setCylinderResolution},
    { "getCylinderResolution", _wrap_getCylinderResolution},
    { "drawCylinder",_wrap_drawCylinder},
    { "setConeResolution",_wrap_setConeResolution},
    { "getConeResolution", _wrap_getConeResolution},
    { "drawCone",_wrap_drawCone},
    { "ofCone",_wrap_ofCone},
    { "setBoxResolution",_wrap_setBoxResolution},
    { "getBoxResolution", _wrap_getBoxResolution},
    { "drawBox",_wrap_drawBox},
    { "drawAxis", _wrap_drawAxis},
    { "drawGrid",_wrap_drawGrid},
    { "drawGridPlane",_wrap_drawGridPlane},
    { "drawArrow",_wrap_drawArrow},
    { "drawRotationAxes",_wrap_drawRotationAxes},
    { "Mesh_plane",_wrap_Mesh_plane},
    { "Mesh_sphere",_wrap_Mesh_sphere},
    { "Mesh_icosahedron", _wrap_Mesh_icosahedron},
    { "Mesh_icosphere",_wrap_Mesh_icosphere},
    { "Mesh_cylinder",_wrap_Mesh_cylinder},
    { "Mesh_cone",_wrap_Mesh_cone},
    { "Mesh_box",_wrap_Mesh_box},
    { "Font_setGlobalDpi", _wrap_Font_setGlobalDpi},
    { "Fbo_checkGLSupport", _wrap_Fbo_checkGLSupport},
    { "Fbo_maxColorAttachments", _wrap_Fbo_maxColorAttachments},
    { "Fbo_maxDrawBuffers", _wrap_Fbo_maxDrawBuffers},
    { "Fbo_maxSamples", _wrap_Fbo_maxSamples},
    { "ofEnableLighting", _wrap_ofEnableLighting},
    { "ofDisableLighting", _wrap_ofDisableLighting},
    { "ofEnableSeparateSpecularLight", _wrap_ofEnableSeparateSpecularLight},
    { "ofDisableSeparateSpecularLight", _wrap_ofDisableSeparateSpecularLight},
    { "ofGetLightingEnabled", _wrap_ofGetLightingEnabled},
    { "ofSetSmoothLighting", _wrap_ofSetSmoothLighting},
    { "ofSetGlobalAmbientColor", _wrap_ofSetGlobalAmbientColor},
    { "Vbo_disableVAOs", _wrap_Vbo_disableVAOs},
    { "Vbo_enableVAOs", _wrap_Vbo_enableVAOs},
    { "getUsingArbTex", _wrap_getUsingArbTex},
    { "enableArbTex", _wrap_enableArbTex},
    { "disableArbTex", _wrap_disableArbTex},
    { "getUsingNormalizedTexCoords", _wrap_getUsingNormalizedTexCoords},
    { "enableNormalizedTexCoords", _wrap_enableNormalizedTexCoords},
    { "disableNormalizedTexCoords", _wrap_disableNormalizedTexCoords},
    { "setupOpenGL",_wrap_setupOpenGL},
    { "runApp", _wrap_runApp},
    { "ofRunApp", _wrap_ofRunApp},
    { "getAppPtr", _wrap_getAppPtr},
    { "exit",_wrap_exit},
    { "getFrameRate", _wrap_getFrameRate},
    { "getTargetFrameRate", _wrap_getTargetFrameRate},
    { "getFrameNum", _wrap_getFrameNum},
    { "setFrameRate", _wrap_setFrameRate},
    { "sleepMillis", _wrap_sleepMillis},
    { "getLastFrameTime", _wrap_getLastFrameTime},
    { "setOrientation",_wrap_setOrientation},
    { "getOrientation", _wrap_getOrientation},
    { "hideCursor", _wrap_hideCursor},
    { "showCursor", _wrap_showCursor},
    { "getWindowPositionX", _wrap_getWindowPositionX},
    { "getWindowPositionY", _wrap_getWindowPositionY},
    { "getScreenWidth", _wrap_getScreenWidth},
    { "getScreenHeight", _wrap_getScreenHeight},
    { "getWindowMode", _wrap_getWindowMode},
    { "getWidth", _wrap_getWidth},
    { "getHeight", _wrap_getHeight},
    { "getWindowWidth", _wrap_getWindowWidth},
    { "getWindowHeight", _wrap_getWindowHeight},
    { "doesHWOrientation", _wrap_doesHWOrientation},
    { "getWindowSize", _wrap_getWindowSize},
    { "getWindowRect", _wrap_getWindowRect},
    { "getWindowPtr", _wrap_getWindowPtr},
    { "setWindowPosition", _wrap_setWindowPosition},
    { "setWindowShape", _wrap_setWindowShape},
    { "setWindowTitle", _wrap_setWindowTitle},
    { "enableSetupScreen", _wrap_enableSetupScreen},
    { "disableSetupScreen", _wrap_disableSetupScreen},
    { "setFullscreen", _wrap_setFullscreen},
    { "toggleFullscreen", _wrap_toggleFullscreen},
    { "setVerticalSync", _wrap_setVerticalSync},
    { "getMousePressed",_wrap_getMousePressed},
    { "getKeyPressed",_wrap_getKeyPressed},
    { "getMouseX", _wrap_getMouseX},
    { "getMouseY", _wrap_getMouseY},
    { "getPreviousMouseX", _wrap_getPreviousMouseX},
    { "getPreviousMouseY", _wrap_getPreviousMouseY},
    { "setEscapeQuitsApp", _wrap_setEscapeQuitsApp},
    { "exitApp", _wrap_exitApp},
    { "soundStreamSetup",_wrap_soundStreamSetup},
    { "soundStreamStop", _wrap_soundStreamStop},
    { "soundStreamStart", _wrap_soundStreamStart},
    { "soundStreamClose", _wrap_soundStreamClose},
    { "soundStreamListDevices", _wrap_soundStreamListDevices},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "Color_white", _wrap_Color_white_get, SWIG_Lua_set_immutable },
    { "Color_gray", _wrap_Color_gray_get, SWIG_Lua_set_immutable },
    { "Color_black", _wrap_Color_black_get, SWIG_Lua_set_immutable },
    { "Color_red", _wrap_Color_red_get, SWIG_Lua_set_immutable },
    { "Color_green", _wrap_Color_green_get, SWIG_Lua_set_immutable },
    { "Color_blue", _wrap_Color_blue_get, SWIG_Lua_set_immutable },
    { "Color_cyan", _wrap_Color_cyan_get, SWIG_Lua_set_immutable },
    { "Color_magenta", _wrap_Color_magenta_get, SWIG_Lua_set_immutable },
    { "Color_yellow", _wrap_Color_yellow_get, SWIG_Lua_set_immutable },
    { "Color_aliceBlue", _wrap_Color_aliceBlue_get, SWIG_Lua_set_immutable },
    { "Color_antiqueWhite", _wrap_Color_antiqueWhite_get, SWIG_Lua_set_immutable },
    { "Color_aqua", _wrap_Color_aqua_get, SWIG_Lua_set_immutable },
    { "Color_aquamarine", _wrap_Color_aquamarine_get, SWIG_Lua_set_immutable },
    { "Color_azure", _wrap_Color_azure_get, SWIG_Lua_set_immutable },
    { "Color_beige", _wrap_Color_beige_get, SWIG_Lua_set_immutable },
    { "Color_bisque", _wrap_Color_bisque_get, SWIG_Lua_set_immutable },
    { "Color_blanchedAlmond", _wrap_Color_blanchedAlmond_get, SWIG_Lua_set_immutable },
    { "Color_blueViolet", _wrap_Color_blueViolet_get, SWIG_Lua_set_immutable },
    { "Color_brown", _wrap_Color_brown_get, SWIG_Lua_set_immutable },
    { "Color_burlyWood", _wrap_Color_burlyWood_get, SWIG_Lua_set_immutable },
    { "Color_cadetBlue", _wrap_Color_cadetBlue_get, SWIG_Lua_set_immutable },
    { "Color_chartreuse", _wrap_Color_chartreuse_get, SWIG_Lua_set_immutable },
    { "Color_chocolate", _wrap_Color_chocolate_get, SWIG_Lua_set_immutable },
    { "Color_coral", _wrap_Color_coral_get, SWIG_Lua_set_immutable },
    { "Color_cornflowerBlue", _wrap_Color_cornflowerBlue_get, SWIG_Lua_set_immutable },
    { "Color_cornsilk", _wrap_Color_cornsilk_get, SWIG_Lua_set_immutable },
    { "Color_crimson", _wrap_Color_crimson_get, SWIG_Lua_set_immutable },
    { "Color_darkBlue", _wrap_Color_darkBlue_get, SWIG_Lua_set_immutable },
    { "Color_darkCyan", _wrap_Color_darkCyan_get, SWIG_Lua_set_immutable },
    { "Color_darkGoldenRod", _wrap_Color_darkGoldenRod_get, SWIG_Lua_set_immutable },
    { "Color_darkGray", _wrap_Color_darkGray_get, SWIG_Lua_set_immutable },
    { "Color_darkGrey", _wrap_Color_darkGrey_get, SWIG_Lua_set_immutable },
    { "Color_darkGreen", _wrap_Color_darkGreen_get, SWIG_Lua_set_immutable },
    { "Color_darkKhaki", _wrap_Color_darkKhaki_get, SWIG_Lua_set_immutable },
    { "Color_darkMagenta", _wrap_Color_darkMagenta_get, SWIG_Lua_set_immutable },
    { "Color_darkOliveGreen", _wrap_Color_darkOliveGreen_get, SWIG_Lua_set_immutable },
    { "Color_darkorange", _wrap_Color_darkorange_get, SWIG_Lua_set_immutable },
    { "Color_darkOrchid", _wrap_Color_darkOrchid_get, SWIG_Lua_set_immutable },
    { "Color_darkRed", _wrap_Color_darkRed_get, SWIG_Lua_set_immutable },
    { "Color_darkSalmon", _wrap_Color_darkSalmon_get, SWIG_Lua_set_immutable },
    { "Color_darkSeaGreen", _wrap_Color_darkSeaGreen_get, SWIG_Lua_set_immutable },
    { "Color_darkSlateBlue", _wrap_Color_darkSlateBlue_get, SWIG_Lua_set_immutable },
    { "Color_darkSlateGray", _wrap_Color_darkSlateGray_get, SWIG_Lua_set_immutable },
    { "Color_darkSlateGrey", _wrap_Color_darkSlateGrey_get, SWIG_Lua_set_immutable },
    { "Color_darkTurquoise", _wrap_Color_darkTurquoise_get, SWIG_Lua_set_immutable },
    { "Color_darkViolet", _wrap_Color_darkViolet_get, SWIG_Lua_set_immutable },
    { "Color_deepPink", _wrap_Color_deepPink_get, SWIG_Lua_set_immutable },
    { "Color_deepSkyBlue", _wrap_Color_deepSkyBlue_get, SWIG_Lua_set_immutable },
    { "Color_dimGray", _wrap_Color_dimGray_get, SWIG_Lua_set_immutable },
    { "Color_dimGrey", _wrap_Color_dimGrey_get, SWIG_Lua_set_immutable },
    { "Color_dodgerBlue", _wrap_Color_dodgerBlue_get, SWIG_Lua_set_immutable },
    { "Color_fireBrick", _wrap_Color_fireBrick_get, SWIG_Lua_set_immutable },
    { "Color_floralWhite", _wrap_Color_floralWhite_get, SWIG_Lua_set_immutable },
    { "Color_forestGreen", _wrap_Color_forestGreen_get, SWIG_Lua_set_immutable },
    { "Color_fuchsia", _wrap_Color_fuchsia_get, SWIG_Lua_set_immutable },
    { "Color_gainsboro", _wrap_Color_gainsboro_get, SWIG_Lua_set_immutable },
    { "Color_ghostWhite", _wrap_Color_ghostWhite_get, SWIG_Lua_set_immutable },
    { "Color_gold", _wrap_Color_gold_get, SWIG_Lua_set_immutable },
    { "Color_goldenRod", _wrap_Color_goldenRod_get, SWIG_Lua_set_immutable },
    { "Color_grey", _wrap_Color_grey_get, SWIG_Lua_set_immutable },
    { "Color_greenYellow", _wrap_Color_greenYellow_get, SWIG_Lua_set_immutable },
    { "Color_honeyDew", _wrap_Color_honeyDew_get, SWIG_Lua_set_immutable },
    { "Color_hotPink", _wrap_Color_hotPink_get, SWIG_Lua_set_immutable },
    { "Color_indianRed", _wrap_Color_indianRed_get, SWIG_Lua_set_immutable },
    { "Color_indigo", _wrap_Color_indigo_get, SWIG_Lua_set_immutable },
    { "Color_ivory", _wrap_Color_ivory_get, SWIG_Lua_set_immutable },
    { "Color_khaki", _wrap_Color_khaki_get, SWIG_Lua_set_immutable },
    { "Color_lavender", _wrap_Color_lavender_get, SWIG_Lua_set_immutable },
    { "Color_lavenderBlush", _wrap_Color_lavenderBlush_get, SWIG_Lua_set_immutable },
    { "Color_lawnGreen", _wrap_Color_lawnGreen_get, SWIG_Lua_set_immutable },
    { "Color_lemonChiffon", _wrap_Color_lemonChiffon_get, SWIG_Lua_set_immutable },
    { "Color_lightBlue", _wrap_Color_lightBlue_get, SWIG_Lua_set_immutable },
    { "Color_lightCoral", _wrap_Color_lightCoral_get, SWIG_Lua_set_immutable },
    { "Color_lightCyan", _wrap_Color_lightCyan_get, SWIG_Lua_set_immutable },
    { "Color_lightGoldenRodYellow", _wrap_Color_lightGoldenRodYellow_get, SWIG_Lua_set_immutable },
    { "Color_lightGray", _wrap_Color_lightGray_get, SWIG_Lua_set_immutable },
    { "Color_lightGrey", _wrap_Color_lightGrey_get, SWIG_Lua_set_immutable },
    { "Color_lightGreen", _wrap_Color_lightGreen_get, SWIG_Lua_set_immutable },
    { "Color_lightPink", _wrap_Color_lightPink_get, SWIG_Lua_set_immutable },
    { "Color_lightSalmon", _wrap_Color_lightSalmon_get, SWIG_Lua_set_immutable },
    { "Color_lightSeaGreen", _wrap_Color_lightSeaGreen_get, SWIG_Lua_set_immutable },
    { "Color_lightSkyBlue", _wrap_Color_lightSkyBlue_get, SWIG_Lua_set_immutable },
    { "Color_lightSlateGray", _wrap_Color_lightSlateGray_get, SWIG_Lua_set_immutable },
    { "Color_lightSlateGrey", _wrap_Color_lightSlateGrey_get, SWIG_Lua_set_immutable },
    { "Color_lightSteelBlue", _wrap_Color_lightSteelBlue_get, SWIG_Lua_set_immutable },
    { "Color_lightYellow", _wrap_Color_lightYellow_get, SWIG_Lua_set_immutable },
    { "Color_lime", _wrap_Color_lime_get, SWIG_Lua_set_immutable },
    { "Color_limeGreen", _wrap_Color_limeGreen_get, SWIG_Lua_set_immutable },
    { "Color_linen", _wrap_Color_linen_get, SWIG_Lua_set_immutable },
    { "Color_maroon", _wrap_Color_maroon_get, SWIG_Lua_set_immutable },
    { "Color_mediumAquaMarine", _wrap_Color_mediumAquaMarine_get, SWIG_Lua_set_immutable },
    { "Color_mediumBlue", _wrap_Color_mediumBlue_get, SWIG_Lua_set_immutable },
    { "Color_mediumOrchid", _wrap_Color_mediumOrchid_get, SWIG_Lua_set_immutable },
    { "Color_mediumPurple", _wrap_Color_mediumPurple_get, SWIG_Lua_set_immutable },
    { "Color_mediumSeaGreen", _wrap_Color_mediumSeaGreen_get, SWIG_Lua_set_immutable },
    { "Color_mediumSlateBlue", _wrap_Color_mediumSlateBlue_get, SWIG_Lua_set_immutable },
    { "Color_mediumSpringGreen", _wrap_Color_mediumSpringGreen_get, SWIG_Lua_set_immutable },
    { "Color_mediumTurquoise", _wrap_Color_mediumTurquoise_get, SWIG_Lua_set_immutable },
    { "Color_mediumVioletRed", _wrap_Color_mediumVioletRed_get, SWIG_Lua_set_immutable },
    { "Color_midnightBlue", _wrap_Color_midnightBlue_get, SWIG_Lua_set_immutable },
    { "Color_mintCream", _wrap_Color_mintCream_get, SWIG_Lua_set_immutable },
    { "Color_mistyRose", _wrap_Color_mistyRose_get, SWIG_Lua_set_immutable },
    { "Color_moccasin", _wrap_Color_moccasin_get, SWIG_Lua_set_immutable },
    { "Color_navajoWhite", _wrap_Color_navajoWhite_get, SWIG_Lua_set_immutable },
    { "Color_navy", _wrap_Color_navy_get, SWIG_Lua_set_immutable },
    { "Color_oldLace", _wrap_Color_oldLace_get, SWIG_Lua_set_immutable },
    { "Color_olive", _wrap_Color_olive_get, SWIG_Lua_set_immutable },
    { "Color_oliveDrab", _wrap_Color_oliveDrab_get, SWIG_Lua_set_immutable },
    { "Color_orange", _wrap_Color_orange_get, SWIG_Lua_set_immutable },
    { "Color_orangeRed", _wrap_Color_orangeRed_get, SWIG_Lua_set_immutable },
    { "Color_orchid", _wrap_Color_orchid_get, SWIG_Lua_set_immutable },
    { "Color_paleGoldenRod", _wrap_Color_paleGoldenRod_get, SWIG_Lua_set_immutable },
    { "Color_paleGreen", _wrap_Color_paleGreen_get, SWIG_Lua_set_immutable },
    { "Color_paleTurquoise", _wrap_Color_paleTurquoise_get, SWIG_Lua_set_immutable },
    { "Color_paleVioletRed", _wrap_Color_paleVioletRed_get, SWIG_Lua_set_immutable },
    { "Color_papayaWhip", _wrap_Color_papayaWhip_get, SWIG_Lua_set_immutable },
    { "Color_peachPuff", _wrap_Color_peachPuff_get, SWIG_Lua_set_immutable },
    { "Color_peru", _wrap_Color_peru_get, SWIG_Lua_set_immutable },
    { "Color_pink", _wrap_Color_pink_get, SWIG_Lua_set_immutable },
    { "Color_plum", _wrap_Color_plum_get, SWIG_Lua_set_immutable },
    { "Color_powderBlue", _wrap_Color_powderBlue_get, SWIG_Lua_set_immutable },
    { "Color_purple", _wrap_Color_purple_get, SWIG_Lua_set_immutable },
    { "Color_rosyBrown", _wrap_Color_rosyBrown_get, SWIG_Lua_set_immutable },
    { "Color_royalBlue", _wrap_Color_royalBlue_get, SWIG_Lua_set_immutable },
    { "Color_saddleBrown", _wrap_Color_saddleBrown_get, SWIG_Lua_set_immutable },
    { "Color_salmon", _wrap_Color_salmon_get, SWIG_Lua_set_immutable },
    { "Color_sandyBrown", _wrap_Color_sandyBrown_get, SWIG_Lua_set_immutable },
    { "Color_seaGreen", _wrap_Color_seaGreen_get, SWIG_Lua_set_immutable },
    { "Color_seaShell", _wrap_Color_seaShell_get, SWIG_Lua_set_immutable },
    { "Color_sienna", _wrap_Color_sienna_get, SWIG_Lua_set_immutable },
    { "Color_silver", _wrap_Color_silver_get, SWIG_Lua_set_immutable },
    { "Color_skyBlue", _wrap_Color_skyBlue_get, SWIG_Lua_set_immutable },
    { "Color_slateBlue", _wrap_Color_slateBlue_get, SWIG_Lua_set_immutable },
    { "Color_slateGray", _wrap_Color_slateGray_get, SWIG_Lua_set_immutable },
    { "Color_slateGrey", _wrap_Color_slateGrey_get, SWIG_Lua_set_immutable },
    { "Color_snow", _wrap_Color_snow_get, SWIG_Lua_set_immutable },
    { "Color_springGreen", _wrap_Color_springGreen_get, SWIG_Lua_set_immutable },
    { "Color_steelBlue", _wrap_Color_steelBlue_get, SWIG_Lua_set_immutable },
    { "Color_blueSteel", _wrap_Color_blueSteel_get, SWIG_Lua_set_immutable },
    { "Color_tan", _wrap_Color_tan_get, SWIG_Lua_set_immutable },
    { "Color_teal", _wrap_Color_teal_get, SWIG_Lua_set_immutable },
    { "Color_thistle", _wrap_Color_thistle_get, SWIG_Lua_set_immutable },
    { "Color_tomato", _wrap_Color_tomato_get, SWIG_Lua_set_immutable },
    { "Color_turquoise", _wrap_Color_turquoise_get, SWIG_Lua_set_immutable },
    { "Color_violet", _wrap_Color_violet_get, SWIG_Lua_set_immutable },
    { "Color_wheat", _wrap_Color_wheat_get, SWIG_Lua_set_immutable },
    { "Color_whiteSmoke", _wrap_Color_whiteSmoke_get, SWIG_Lua_set_immutable },
    { "Color_yellowGreen", _wrap_Color_yellowGreen_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
    {SWIG_LUA_CONSTTAB_INT("OF_VERSION_MAJOR", 0)},
    {SWIG_LUA_CONSTTAB_INT("OF_VERSION_MINOR", 8)},
    {SWIG_LUA_CONSTTAB_INT("OF_VERSION_PATCH", 0)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOOP_NONE", OF_LOOP_NONE)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOOP_PALINDROME", OF_LOOP_PALINDROME)},
    {SWIG_LUA_CONSTTAB_INT("OF_LOOP_NORMAL", OF_LOOP_NORMAL)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_OSX", OF_TARGET_OSX)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_WINGCC", OF_TARGET_WINGCC)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_WINVS", OF_TARGET_WINVS)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_IOS", OF_TARGET_IOS)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_ANDROID", OF_TARGET_ANDROID)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_LINUX", OF_TARGET_LINUX)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_LINUX64", OF_TARGET_LINUX64)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_LINUXARMV6L", OF_TARGET_LINUXARMV6L)},
    {SWIG_LUA_CONSTTAB_INT("OF_TARGET_LINUXARMV7L", OF_TARGET_LINUXARMV7L)},
    {SWIG_LUA_CONSTTAB_INT("B14400", 14400)},
    {SWIG_LUA_CONSTTAB_INT("B28800", 28800)},
    {SWIG_LUA_CONSTTAB_INT("OF_SERIAL_NO_DATA", -2)},
    {SWIG_LUA_CONSTTAB_INT("OF_SERIAL_ERROR", -1)},
    {SWIG_LUA_CONSTTAB_FLOAT("PI", 3.14159265358979323846)},
    {SWIG_LUA_CONSTTAB_FLOAT("TWO_PI", 6.28318530717958647693)},
    {SWIG_LUA_CONSTTAB_FLOAT("M_TWO_PI", 6.28318530717958647693)},
    {SWIG_LUA_CONSTTAB_FLOAT("FOUR_PI", 12.56637061435917295385)},
    {SWIG_LUA_CONSTTAB_FLOAT("HALF_PI", 1.57079632679489661923)},
    {SWIG_LUA_CONSTTAB_FLOAT("DEG_TO_RAD", (3.14159265358979323846/180.0))},
    {SWIG_LUA_CONSTTAB_FLOAT("RAD_TO_DEG", (180.0/3.14159265358979323846))},
    {SWIG_LUA_CONSTTAB_INT("OF_OUTLINE", OF_OUTLINE)},
    {SWIG_LUA_CONSTTAB_INT("OF_FILLED", OF_FILLED)},
    {SWIG_LUA_CONSTTAB_INT("OF_WINDOW", OF_WINDOW)},
    {SWIG_LUA_CONSTTAB_INT("OF_FULLSCREEN", OF_FULLSCREEN)},
    {SWIG_LUA_CONSTTAB_INT("OF_GAME_MODE", OF_GAME_MODE)},
    {SWIG_LUA_CONSTTAB_INT("OF_ASPECT_RATIO_IGNORE", OF_ASPECT_RATIO_IGNORE)},
    {SWIG_LUA_CONSTTAB_INT("OF_ASPECT_RATIO_KEEP", OF_ASPECT_RATIO_KEEP)},
    {SWIG_LUA_CONSTTAB_INT("OF_ASPECT_RATIO_KEEP_BY_EXPANDING", OF_ASPECT_RATIO_KEEP_BY_EXPANDING)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_VERT_IGNORE", OF_ALIGN_VERT_IGNORE)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_VERT_TOP", OF_ALIGN_VERT_TOP)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_VERT_BOTTOM", OF_ALIGN_VERT_BOTTOM)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_VERT_CENTER", OF_ALIGN_VERT_CENTER)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_HORZ_IGNORE", OF_ALIGN_HORZ_IGNORE)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_HORZ_LEFT", OF_ALIGN_HORZ_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_HORZ_RIGHT", OF_ALIGN_HORZ_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ALIGN_HORZ_CENTER", OF_ALIGN_HORZ_CENTER)},
    {SWIG_LUA_CONSTTAB_INT("OF_RECTMODE_CORNER", OF_RECTMODE_CORNER)},
    {SWIG_LUA_CONSTTAB_INT("OF_RECTMODE_CENTER", OF_RECTMODE_CENTER)},
    {SWIG_LUA_CONSTTAB_INT("OF_SCALEMODE_FIT", OF_SCALEMODE_FIT)},
    {SWIG_LUA_CONSTTAB_INT("OF_SCALEMODE_FILL", OF_SCALEMODE_FILL)},
    {SWIG_LUA_CONSTTAB_INT("OF_SCALEMODE_CENTER", OF_SCALEMODE_CENTER)},
    {SWIG_LUA_CONSTTAB_INT("OF_SCALEMODE_STRETCH_TO_FILL", OF_SCALEMODE_STRETCH_TO_FILL)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_GRAYSCALE", OF_IMAGE_GRAYSCALE)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_COLOR", OF_IMAGE_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_COLOR_ALPHA", OF_IMAGE_COLOR_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_UNDEFINED", OF_IMAGE_UNDEFINED)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_MONO", OF_PIXELS_MONO)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_RGB", OF_PIXELS_RGB)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_RGBA", OF_PIXELS_RGBA)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_BGRA", OF_PIXELS_BGRA)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_RGB565", OF_PIXELS_RGB565)},
    {SWIG_LUA_CONSTTAB_INT("OF_PIXELS_UNKNOWN", OF_PIXELS_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("OF_MAX_STYLE_HISTORY", 32)},
    {SWIG_LUA_CONSTTAB_INT("OF_MAX_VIEWPORT_HISTORY", 32)},
    {SWIG_LUA_CONSTTAB_INT("OF_MAX_CIRCLE_PTS", 1024)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_DISABLED", OF_BLENDMODE_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_ALPHA", OF_BLENDMODE_ALPHA)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_ADD", OF_BLENDMODE_ADD)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_SUBTRACT", OF_BLENDMODE_SUBTRACT)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_MULTIPLY", OF_BLENDMODE_MULTIPLY)},
    {SWIG_LUA_CONSTTAB_INT("OF_BLENDMODE_SCREEN", OF_BLENDMODE_SCREEN)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_DEFAULT", OF_ORIENTATION_DEFAULT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_180", OF_ORIENTATION_180)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_90_LEFT", OF_ORIENTATION_90_LEFT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_90_RIGHT", OF_ORIENTATION_90_RIGHT)},
    {SWIG_LUA_CONSTTAB_INT("OF_ORIENTATION_UNKNOWN", OF_ORIENTATION_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("OF_GRADIENT_LINEAR", OF_GRADIENT_LINEAR)},
    {SWIG_LUA_CONSTTAB_INT("OF_GRADIENT_CIRCULAR", OF_GRADIENT_CIRCULAR)},
    {SWIG_LUA_CONSTTAB_INT("OF_GRADIENT_BAR", OF_GRADIENT_BAR)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_ODD", OF_POLY_WINDING_ODD)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_NONZERO", OF_POLY_WINDING_NONZERO)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_POSITIVE", OF_POLY_WINDING_POSITIVE)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_NEGATIVE", OF_POLY_WINDING_NEGATIVE)},
    {SWIG_LUA_CONSTTAB_INT("OF_POLY_WINDING_ABS_GEQ_TWO", OF_POLY_WINDING_ABS_GEQ_TWO)},
    {SWIG_LUA_CONSTTAB_INT("OF_CLOSE", (true))},
    {SWIG_LUA_CONSTTAB_INT("OF_LEFT_HANDED", OF_LEFT_HANDED)},
    {SWIG_LUA_CONSTTAB_INT("OF_RIGHT_HANDED", OF_RIGHT_HANDED)},
    {SWIG_LUA_CONSTTAB_INT("OF_MATRIX_MODELVIEW", OF_MATRIX_MODELVIEW)},
    {SWIG_LUA_CONSTTAB_INT("OF_MATRIX_PROJECTION", OF_MATRIX_PROJECTION)},
    {SWIG_LUA_CONSTTAB_INT("OF_MATRIX_TEXTURE", OF_MATRIX_TEXTURE)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_MODIFIER", 0x0100)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RETURN", 13)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_ESC", 27)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_TAB", 9)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_BACKSPACE", 8)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_DEL", 127)},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F1", (1|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F2", (2|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F3", (3|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F4", (4|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F5", (5|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F6", (6|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F7", (7|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F8", (8|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F9", (9|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F10", (10|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F11", (11|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_F12", (12|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT", (100|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_UP", (101|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT", (102|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_DOWN", (103|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_PAGE_UP", (104|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_PAGE_DOWN", (105|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_HOME", (106|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_END", (107|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_INSERT", (108|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_CONTROL", (0x200|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_ALT", (0x400|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_SHIFT", (0x800|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_SUPER", (0x1000|0x0100))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_SHIFT", (0x1|(0x800|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_SHIFT", (0x2|(0x800|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_CONTROL", (0x1|(0x200|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_CONTROL", (0x2|(0x200|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_ALT", (0x1|(0x400|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_ALT", (0x2|(0x400|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_SUPER", (0x1|(0x1000|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_SUPER", (0x2|(0x1000|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_LEFT_COMMAND", (0x1|(0x1000|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_KEY_RIGHT_COMMAND", (0x2|(0x1000|0x0100)))},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_1", 0)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_2", 1)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_3", 2)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_4", 3)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_5", 4)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_6", 5)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_7", 6)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_8", 7)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_LAST", 7)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_LEFT", 0)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_MIDDLE", 1)},
    {SWIG_LUA_CONSTTAB_INT("OF_MOUSE_BUTTON_RIGHT", 2)},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_RESTORE", (0))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_BLACK", (30))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_RED", (31))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_GREEN", (32))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_YELLOW", (33))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_BLUE", (34))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_PURPLE", (35))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_CYAN", (36))},
    {SWIG_LUA_CONSTTAB_INT("OF_CONSOLE_COLOR_WHITE", (37))},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_SIMPLE", OF_BITMAPMODE_SIMPLE)},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_SCREEN", OF_BITMAPMODE_SCREEN)},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_VIEWPORT", OF_BITMAPMODE_VIEWPORT)},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_MODEL", OF_BITMAPMODE_MODEL)},
    {SWIG_LUA_CONSTTAB_INT("OF_BITMAPMODE_MODEL_BILLBOARD", OF_BITMAPMODE_MODEL_BILLBOARD)},
    {SWIG_LUA_CONSTTAB_INT("OF_ENCODING_UTF8", OF_ENCODING_UTF8)},
    {SWIG_LUA_CONSTTAB_INT("OF_ENCODING_ISO_8859_15", OF_ENCODING_ISO_8859_15)},
    {SWIG_LUA_CONSTTAB_INT("Vec2f_DIM", ofVec2f::DIM)},
    {SWIG_LUA_CONSTTAB_INT("Vec3f_DIM", ofVec3f::DIM)},
    {SWIG_LUA_CONSTTAB_INT("Vec4f_DIM", ofVec4f::DIM)},
    {SWIG_LUA_CONSTTAB_INT("OF_INTERPOLATE_NEAREST_NEIGHBOR", OF_INTERPOLATE_NEAREST_NEIGHBOR)},
    {SWIG_LUA_CONSTTAB_INT("OF_INTERPOLATE_BILINEAR", OF_INTERPOLATE_BILINEAR)},
    {SWIG_LUA_CONSTTAB_INT("OF_INTERPOLATE_BICUBIC", OF_INTERPOLATE_BICUBIC)},
    {SWIG_LUA_CONSTTAB_INT("Path_COMMANDS", ofPath::COMMANDS)},
    {SWIG_LUA_CONSTTAB_INT("Path_POLYLINES", ofPath::POLYLINES)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_BEST", OF_IMAGE_QUALITY_BEST)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_HIGH", OF_IMAGE_QUALITY_HIGH)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_MEDIUM", OF_IMAGE_QUALITY_MEDIUM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_LOW", OF_IMAGE_QUALITY_LOW)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_QUALITY_WORST", OF_IMAGE_QUALITY_WORST)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_BMP", OF_IMAGE_FORMAT_BMP)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_ICO", OF_IMAGE_FORMAT_ICO)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_JPEG", OF_IMAGE_FORMAT_JPEG)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_JNG", OF_IMAGE_FORMAT_JNG)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_KOALA", OF_IMAGE_FORMAT_KOALA)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_LBM", OF_IMAGE_FORMAT_LBM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_IFF", OF_IMAGE_FORMAT_IFF)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_MNG", OF_IMAGE_FORMAT_MNG)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PBM", OF_IMAGE_FORMAT_PBM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PBMRAW", OF_IMAGE_FORMAT_PBMRAW)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PCD", OF_IMAGE_FORMAT_PCD)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PCX", OF_IMAGE_FORMAT_PCX)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PGM", OF_IMAGE_FORMAT_PGM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PGMRAW", OF_IMAGE_FORMAT_PGMRAW)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PNG", OF_IMAGE_FORMAT_PNG)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PPM", OF_IMAGE_FORMAT_PPM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PPMRAW", OF_IMAGE_FORMAT_PPMRAW)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_RAS", OF_IMAGE_FORMAT_RAS)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_TARGA", OF_IMAGE_FORMAT_TARGA)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_TIFF", OF_IMAGE_FORMAT_TIFF)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_WBMP", OF_IMAGE_FORMAT_WBMP)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PSD", OF_IMAGE_FORMAT_PSD)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_CUT", OF_IMAGE_FORMAT_CUT)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_XBM", OF_IMAGE_FORMAT_XBM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_XPM", OF_IMAGE_FORMAT_XPM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_DDS", OF_IMAGE_FORMAT_DDS)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_GIF", OF_IMAGE_FORMAT_GIF)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_HDR", OF_IMAGE_FORMAT_HDR)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_FAXG3", OF_IMAGE_FORMAT_FAXG3)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_SGI", OF_IMAGE_FORMAT_SGI)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_EXR", OF_IMAGE_FORMAT_EXR)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_J2K", OF_IMAGE_FORMAT_J2K)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_JP2", OF_IMAGE_FORMAT_JP2)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PFM", OF_IMAGE_FORMAT_PFM)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_PICT", OF_IMAGE_FORMAT_PICT)},
    {SWIG_LUA_CONSTTAB_INT("OF_IMAGE_FORMAT_RAW", OF_IMAGE_FORMAT_RAW)},
    {SWIG_LUA_CONSTTAB_INT("OF_MAX_LIGHTS", 8)},
    {SWIG_LUA_CONSTTAB_INT("OF_LIGHT_POINT", OF_LIGHT_POINT)},
    {SWIG_LUA_CONSTTAB_INT("OF_LIGHT_SPOT", OF_LIGHT_SPOT)},
    {SWIG_LUA_CONSTTAB_INT("OF_LIGHT_DIRECTIONAL", OF_LIGHT_DIRECTIONAL)},
    {SWIG_LUA_CONSTTAB_INT("Shader_POSITION_ATTRIBUTE", ofShader::POSITION_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("Shader_COLOR_ATTRIBUTE", ofShader::COLOR_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("Shader_NORMAL_ATTRIBUTE", ofShader::NORMAL_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("Shader_TEXCOORD_ATTRIBUTE", ofShader::TEXCOORD_ATTRIBUTE)},
    {SWIG_LUA_CONSTTAB_INT("OF_COMPRESS_NONE", OF_COMPRESS_NONE)},
    {SWIG_LUA_CONSTTAB_INT("OF_COMPRESS_SRGB", OF_COMPRESS_SRGB)},
    {SWIG_LUA_CONSTTAB_INT("OF_COMPRESS_ARB", OF_COMPRESS_ARB)},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ofBaseFileSerializerTo_p_ofBaseSerializer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseSerializer *)  ((ofBaseFileSerializer *) x));
}
static void *_p_ofAbstractImageTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofAbstractImage *) x));
}
static void *_p_ofTextureTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofTexture *) x));
}
static void *_p_ofFboTo_p_ofBaseDraws(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseDraws *)  ((ofFbo *) x));
}
static void *_p_ofVboMeshTo_p_ofMesh(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofMesh *)  ((ofVboMesh *) x));
}
static void *_p_ofAbstractImageTo_p_ofBaseHasTexture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexture *)  ((ofAbstractImage *) x));
}
static void *_p_ofFboTo_p_ofBaseHasTexture(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseHasTexture *)  ((ofFbo *) x));
}
static void *_p_ofBaseGLRendererTo_p_ofBaseRenderer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseRenderer *)  ((ofBaseGLRenderer *) x));
}
static void *_p_ofLightTo_p_ofNode(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofNode *)  ((ofLight *) x));
}
static void *_p_ofBaseVideoDrawsTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *) (ofBaseVideo *) ((ofBaseVideoDraws *) x));
}
static void *_p_ofBaseVideoGrabberTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *) (ofBaseVideo *) ((ofBaseVideoGrabber *) x));
}
static void *_p_ofBaseVideoTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *)  ((ofBaseVideo *) x));
}
static void *_p_ofBaseVideoPlayerTo_p_ofBaseUpdates(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseUpdates *) (ofBaseVideo *) ((ofBaseVideoPlayer *) x));
}
static void *_p_ofBaseVideoDrawsTo_p_ofBaseVideo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideo *)  ((ofBaseVideoDraws *) x));
}
static void *_p_ofBaseVideoGrabberTo_p_ofBaseVideo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideo *)  ((ofBaseVideoGrabber *) x));
}
static void *_p_ofBaseVideoPlayerTo_p_ofBaseVideo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ofBaseVideo *)  ((ofBaseVideoPlayer *) x));
}
static swig_type_info _swigt__p_GLenum = {"_p_GLenum", "GLenum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLint = {"_p_GLint", "GLint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLsizei = {"_p_GLsizei", "GLsizei *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLuint = {"_p_GLuint", "GLuint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Poco__FastMutex = {"_p_Poco__FastMutex", "Poco::FastMutex *|ofMutex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Poco__FastMutex__ScopedLock = {"_p_Poco__FastMutex__ScopedLock", "Poco::FastMutex::ScopedLock *|ofScopedLock *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TESSindex = {"_p_TESSindex", "ofIndexType *|TESSindex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofAbstractHasPixels = {"_p_ofAbstractHasPixels", "ofAbstractHasPixels *", 0, 0, (void*)&_wrap_class_ofAbstractHasPixels, 0};
static swig_type_info _swigt__p_ofAbstractImage = {"_p_ofAbstractImage", "ofAbstractImage *", 0, 0, (void*)&_wrap_class_ofAbstractImage, 0};
static swig_type_info _swigt__p_ofAppBaseWindow = {"_p_ofAppBaseWindow", "ofAppBaseWindow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseApp = {"_p_ofBaseApp", "ofSimpleApp *|ofBaseApp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseDraws = {"_p_ofBaseDraws", "ofBaseDraws *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseGLRenderer = {"_p_ofBaseGLRenderer", "ofBaseGLRenderer *", 0, 0, (void*)&_wrap_class_ofBaseGLRenderer, 0};
static swig_type_info _swigt__p_ofBaseHasPixels_T_float_t = {"_p_ofBaseHasPixels_T_float_t", "ofBaseHasPixels_< float > *|ofBaseHasFloatPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseHasPixels_T_unsigned_short_t = {"_p_ofBaseHasPixels_T_unsigned_short_t", "ofBaseHasPixels_< unsigned short > *|ofBaseHasShortPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseHasTexture = {"_p_ofBaseHasTexture", "ofBaseHasTexture *", 0, 0, (void*)&_wrap_class_ofBaseHasTexture, 0};
static swig_type_info _swigt__p_ofBaseImage_T_float_t = {"_p_ofBaseImage_T_float_t", "ofBaseFloatImage *|ofBaseImage_< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseImage_T_unsigned_short_t = {"_p_ofBaseImage_T_unsigned_short_t", "ofBaseImage_< unsigned short > *|ofBaseShortImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseRenderer = {"_p_ofBaseRenderer", "ofBaseRenderer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseSerializer = {"_p_ofBaseSerializer", "ofBaseSerializer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseFileSerializer = {"_p_ofBaseFileSerializer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseSoundInput = {"_p_ofBaseSoundInput", "ofBaseSoundInput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseSoundOutput = {"_p_ofBaseSoundOutput", "ofBaseSoundOutput *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseUpdates = {"_p_ofBaseUpdates", "ofBaseUpdates *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBaseVideoDraws = {"_p_ofBaseVideoDraws", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseVideoGrabber = {"_p_ofBaseVideoGrabber", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseVideoPlayer = {"_p_ofBaseVideoPlayer", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_ofBaseVideo = {"_p_ofBaseVideo", "ofBaseVideo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofBuffer = {"_p_ofBuffer", "ofBuffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofColor_T_float_t = {"_p_ofColor_T_float_t", "ofColor_< float > *|ofFloatColor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofColor_T_unsigned_char_t = {"_p_ofColor_T_unsigned_char_t", "ofColor_< unsigned char > *|ofColor *", 0, 0, (void*)&_wrap_class_ofColor__Sl_unsigned_SS_char_Sg_, 0};
static swig_type_info _swigt__p_ofColor_T_unsigned_short_t = {"_p_ofColor_T_unsigned_short_t", "ofColor_< unsigned short > *|ofShortColor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofDragInfo = {"_p_ofDragInfo", "ofDragInfo *", 0, 0, (void*)&_wrap_class_ofDragInfo, 0};
static swig_type_info _swigt__p_ofFbo = {"_p_ofFbo", "ofFbo *", 0, 0, (void*)&_wrap_class_ofFbo, 0};
static swig_type_info _swigt__p_ofFbo__Settings = {"_p_ofFbo__Settings", "ofFbo::Settings *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofFile = {"_p_ofFile", "ofFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofImage_T_float_t = {"_p_ofImage_T_float_t", "ofFloatImage *|ofImage_< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofImage_T_unsigned_char_t = {"_p_ofImage_T_unsigned_char_t", "ofImage *|ofImage_< unsigned char > *", 0, 0, (void*)&_wrap_class_ofImage__Sl_unsigned_SS_char_Sg_, 0};
static swig_type_info _swigt__p_ofImage_T_unsigned_short_t = {"_p_ofImage_T_unsigned_short_t", "ofImage_< unsigned short > *|ofShortImage *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofLight = {"_p_ofLight", "ofLight *", 0, 0, (void*)&_wrap_class_ofLight, 0};
static swig_type_info _swigt__p_ofMaterial = {"_p_ofMaterial", "ofMaterial *", 0, 0, (void*)&_wrap_class_ofMaterial, 0};
static swig_type_info _swigt__p_ofMatrix3x3 = {"_p_ofMatrix3x3", "ofMatrix3x3 *", 0, 0, (void*)&_wrap_class_ofMatrix3x3, 0};
static swig_type_info _swigt__p_ofMatrix4x4 = {"_p_ofMatrix4x4", "ofMatrix4x4 *", 0, 0, (void*)&_wrap_class_ofMatrix4x4, 0};
static swig_type_info _swigt__p_ofMesh = {"_p_ofMesh", "ofMesh *", 0, 0, (void*)&_wrap_class_ofMesh, 0};
static swig_type_info _swigt__p_ofMeshFace = {"_p_ofMeshFace", "ofMeshFace *", 0, 0, (void*)&_wrap_class_ofMeshFace, 0};
static swig_type_info _swigt__p_ofNode = {"_p_ofNode", "ofNode *", 0, 0, (void*)&_wrap_class_ofNode, 0};
static swig_type_info _swigt__p_ofPath = {"_p_ofPath", "ofPath *", 0, 0, (void*)&_wrap_class_ofPath, 0};
static swig_type_info _swigt__p_ofPixels_T_float_t = {"_p_ofPixels_T_float_t", "ofPixels_< float > *|ofFloatPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPixels_T_unsigned_char_t = {"_p_ofPixels_T_unsigned_char_t", "ofPixels_< unsigned char > *|ofPixels *", 0, 0, (void*)&_wrap_class_ofPixels__Sl_unsigned_SS_char_Sg_, 0};
static swig_type_info _swigt__p_ofPixels_T_unsigned_short_t = {"_p_ofPixels_T_unsigned_short_t", "ofPixels_< unsigned short > *|ofShortPixels *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPolyRenderMode = {"_p_ofPolyRenderMode", "ofPolyRenderMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPolyline = {"_p_ofPolyline", "ofPolyline *", 0, 0, (void*)&_wrap_class_ofPolyline, 0};
static swig_type_info _swigt__p_ofPrimitiveMode = {"_p_ofPrimitiveMode", "ofPrimitiveMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofAppBaseWindow_t = {"_p_ofPtrT_ofAppBaseWindow_t", "ofPtr< ofAppBaseWindow > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofBaseApp_t = {"_p_ofPtrT_ofBaseApp_t", "ofPtr< ofBaseApp > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofBaseSoundPlayer_t = {"_p_ofPtrT_ofBaseSoundPlayer_t", "ofPtr< ofBaseSoundPlayer > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofPtrT_ofBaseSoundStream_t = {"_p_ofPtrT_ofBaseSoundStream_t", "ofPtr< ofBaseSoundStream > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofQuaternion = {"_p_ofQuaternion", "ofQuaternion *", 0, 0, (void*)&_wrap_class_ofQuaternion, 0};
static swig_type_info _swigt__p_ofRectangle = {"_p_ofRectangle", "ofRectangle *", 0, 0, (void*)&_wrap_class_ofRectangle, 0};
static swig_type_info _swigt__p_ofShader = {"_p_ofShader", "ofShader *", 0, 0, (void*)&_wrap_class_ofShader, 0};
static swig_type_info _swigt__p_ofSoundPlayer = {"_p_ofSoundPlayer", "ofSoundPlayer *", 0, 0, (void*)&_wrap_class_ofSoundPlayer, 0};
static swig_type_info _swigt__p_ofSoundStream = {"_p_ofSoundStream", "ofSoundStream *", 0, 0, (void*)&_wrap_class_ofSoundStream, 0};
static swig_type_info _swigt__p_ofStyle = {"_p_ofStyle", "ofStyle *", 0, 0, (void*)&_wrap_class_ofStyle, 0};
static swig_type_info _swigt__p_ofTTFCharacter = {"_p_ofTTFCharacter", "ofTTFCharacter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ofTexture = {"_p_ofTexture", "ofTexture *", 0, 0, (void*)&_wrap_class_ofTexture, 0};
static swig_type_info _swigt__p_ofTextureData = {"_p_ofTextureData", "ofTextureData *", 0, 0, (void*)&_wrap_class_ofTextureData, 0};
static swig_type_info _swigt__p_ofTrueTypeFont = {"_p_ofTrueTypeFont", "ofTrueTypeFont *", 0, 0, (void*)&_wrap_class_ofTrueTypeFont, 0};
static swig_type_info _swigt__p_ofVbo = {"_p_ofVbo", "ofVbo *", 0, 0, (void*)&_wrap_class_ofVbo, 0};
static swig_type_info _swigt__p_ofVboMesh = {"_p_ofVboMesh", "ofVboMesh *", 0, 0, (void*)&_wrap_class_ofVboMesh, 0};
static swig_type_info _swigt__p_ofVec2f = {"_p_ofVec2f", "ofVec2f *", 0, 0, (void*)&_wrap_class_ofVec2f, 0};
static swig_type_info _swigt__p_ofVec3f = {"_p_ofVec3f", "ofPoint *|ofVec3f *", 0, 0, (void*)&_wrap_class_ofVec3f, 0};
static swig_type_info _swigt__p_ofVec4f = {"_p_ofVec4f", "ofVec4f *", 0, 0, (void*)&_wrap_class_ofVec4f, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorT_TESSindex_t = {"_p_std__vectorT_TESSindex_t", "std::vector< TESSindex > *|std::vector< ofIndexType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_float_Sg_, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofColor_T_float_t_t = {"_p_std__vectorT_ofColor_T_float_t_t", "std::vector< ofColor_< float > > *|std::vector< ofFloatColor > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofMeshFace_t = {"_p_std__vectorT_ofMeshFace_t", "std::vector< ofMeshFace > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofPath__Command_t = {"_p_std__vectorT_ofPath__Command_t", "std::vector< ofPath::Command > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofPolyline_t = {"_p_std__vectorT_ofPolyline_t", "std::vector< ofPolyline > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofTTFCharacter_t = {"_p_std__vectorT_ofTTFCharacter_t", "std::vector< ofTTFCharacter > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec2f_t = {"_p_std__vectorT_ofVec2f_t", "std::vector< ofVec2f > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_ofVec3f_t = {"_p_std__vectorT_ofVec3f_t", "std::vector< ofVec3f > *|std::vector< ofPoint > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_std_string_Sg_, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GLenum,
  &_swigt__p_GLint,
  &_swigt__p_GLsizei,
  &_swigt__p_GLuint,
  &_swigt__p_Poco__FastMutex,
  &_swigt__p_Poco__FastMutex__ScopedLock,
  &_swigt__p_TESSindex,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_ofAbstractHasPixels,
  &_swigt__p_ofAbstractImage,
  &_swigt__p_ofAppBaseWindow,
  &_swigt__p_ofBaseApp,
  &_swigt__p_ofBaseDraws,
  &_swigt__p_ofBaseFileSerializer,
  &_swigt__p_ofBaseGLRenderer,
  &_swigt__p_ofBaseHasPixels_T_float_t,
  &_swigt__p_ofBaseHasPixels_T_unsigned_short_t,
  &_swigt__p_ofBaseHasTexture,
  &_swigt__p_ofBaseImage_T_float_t,
  &_swigt__p_ofBaseImage_T_unsigned_short_t,
  &_swigt__p_ofBaseRenderer,
  &_swigt__p_ofBaseSerializer,
  &_swigt__p_ofBaseSoundInput,
  &_swigt__p_ofBaseSoundOutput,
  &_swigt__p_ofBaseUpdates,
  &_swigt__p_ofBaseVideo,
  &_swigt__p_ofBaseVideoDraws,
  &_swigt__p_ofBaseVideoGrabber,
  &_swigt__p_ofBaseVideoPlayer,
  &_swigt__p_ofBuffer,
  &_swigt__p_ofColor_T_float_t,
  &_swigt__p_ofColor_T_unsigned_char_t,
  &_swigt__p_ofColor_T_unsigned_short_t,
  &_swigt__p_ofDragInfo,
  &_swigt__p_ofFbo,
  &_swigt__p_ofFbo__Settings,
  &_swigt__p_ofFile,
  &_swigt__p_ofImage_T_float_t,
  &_swigt__p_ofImage_T_unsigned_char_t,
  &_swigt__p_ofImage_T_unsigned_short_t,
  &_swigt__p_ofLight,
  &_swigt__p_ofMaterial,
  &_swigt__p_ofMatrix3x3,
  &_swigt__p_ofMatrix4x4,
  &_swigt__p_ofMesh,
  &_swigt__p_ofMeshFace,
  &_swigt__p_ofNode,
  &_swigt__p_ofPath,
  &_swigt__p_ofPixels_T_float_t,
  &_swigt__p_ofPixels_T_unsigned_char_t,
  &_swigt__p_ofPixels_T_unsigned_short_t,
  &_swigt__p_ofPolyRenderMode,
  &_swigt__p_ofPolyline,
  &_swigt__p_ofPrimitiveMode,
  &_swigt__p_ofPtrT_ofAppBaseWindow_t,
  &_swigt__p_ofPtrT_ofBaseApp_t,
  &_swigt__p_ofPtrT_ofBaseSoundPlayer_t,
  &_swigt__p_ofPtrT_ofBaseSoundStream_t,
  &_swigt__p_ofQuaternion,
  &_swigt__p_ofRectangle,
  &_swigt__p_ofShader,
  &_swigt__p_ofSoundPlayer,
  &_swigt__p_ofSoundStream,
  &_swigt__p_ofStyle,
  &_swigt__p_ofTTFCharacter,
  &_swigt__p_ofTexture,
  &_swigt__p_ofTextureData,
  &_swigt__p_ofTrueTypeFont,
  &_swigt__p_ofVbo,
  &_swigt__p_ofVboMesh,
  &_swigt__p_ofVec2f,
  &_swigt__p_ofVec3f,
  &_swigt__p_ofVec4f,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_TESSindex_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_ofColor_T_float_t_t,
  &_swigt__p_std__vectorT_ofMeshFace_t,
  &_swigt__p_std__vectorT_ofPath__Command_t,
  &_swigt__p_std__vectorT_ofPolyline_t,
  &_swigt__p_std__vectorT_ofTTFCharacter_t,
  &_swigt__p_std__vectorT_ofVec2f_t,
  &_swigt__p_std__vectorT_ofVec3f_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_GLenum[] = {  {&_swigt__p_GLenum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLint[] = {  {&_swigt__p_GLint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLsizei[] = {  {&_swigt__p_GLsizei, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLuint[] = {  {&_swigt__p_GLuint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Poco__FastMutex[] = {  {&_swigt__p_Poco__FastMutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Poco__FastMutex__ScopedLock[] = {  {&_swigt__p_Poco__FastMutex__ScopedLock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TESSindex[] = {  {&_swigt__p_TESSindex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofAbstractHasPixels[] = {  {&_swigt__p_ofAbstractHasPixels, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofAbstractImage[] = {  {&_swigt__p_ofAbstractImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofAppBaseWindow[] = {  {&_swigt__p_ofAppBaseWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseApp[] = {  {&_swigt__p_ofBaseApp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseDraws[] = {  {&_swigt__p_ofAbstractImage, _p_ofAbstractImageTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofBaseDraws, 0, 0, 0},  {&_swigt__p_ofTexture, _p_ofTextureTo_p_ofBaseDraws, 0, 0},  {&_swigt__p_ofFbo, _p_ofFboTo_p_ofBaseDraws, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseGLRenderer[] = {  {&_swigt__p_ofBaseGLRenderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseHasPixels_T_float_t[] = {  {&_swigt__p_ofBaseHasPixels_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseHasPixels_T_unsigned_short_t[] = {  {&_swigt__p_ofBaseHasPixels_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseHasTexture[] = {  {&_swigt__p_ofAbstractImage, _p_ofAbstractImageTo_p_ofBaseHasTexture, 0, 0},  {&_swigt__p_ofBaseHasTexture, 0, 0, 0},  {&_swigt__p_ofFbo, _p_ofFboTo_p_ofBaseHasTexture, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseImage_T_float_t[] = {  {&_swigt__p_ofBaseImage_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseImage_T_unsigned_short_t[] = {  {&_swigt__p_ofBaseImage_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseRenderer[] = {  {&_swigt__p_ofBaseRenderer, 0, 0, 0},  {&_swigt__p_ofBaseGLRenderer, _p_ofBaseGLRendererTo_p_ofBaseRenderer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseFileSerializer[] = {{&_swigt__p_ofBaseFileSerializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseSerializer[] = {  {&_swigt__p_ofBaseSerializer, 0, 0, 0},  {&_swigt__p_ofBaseFileSerializer, _p_ofBaseFileSerializerTo_p_ofBaseSerializer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseSoundInput[] = {  {&_swigt__p_ofBaseSoundInput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseSoundOutput[] = {  {&_swigt__p_ofBaseSoundOutput, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseVideoDraws[] = {{&_swigt__p_ofBaseVideoDraws, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseVideoGrabber[] = {{&_swigt__p_ofBaseVideoGrabber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseVideoPlayer[] = {{&_swigt__p_ofBaseVideoPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseUpdates[] = {  {&_swigt__p_ofBaseVideoDraws, _p_ofBaseVideoDrawsTo_p_ofBaseUpdates, 0, 0},  {&_swigt__p_ofBaseVideoGrabber, _p_ofBaseVideoGrabberTo_p_ofBaseUpdates, 0, 0},  {&_swigt__p_ofBaseVideo, _p_ofBaseVideoTo_p_ofBaseUpdates, 0, 0},  {&_swigt__p_ofBaseUpdates, 0, 0, 0},  {&_swigt__p_ofBaseVideoPlayer, _p_ofBaseVideoPlayerTo_p_ofBaseUpdates, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBaseVideo[] = {  {&_swigt__p_ofBaseVideoDraws, _p_ofBaseVideoDrawsTo_p_ofBaseVideo, 0, 0},  {&_swigt__p_ofBaseVideoGrabber, _p_ofBaseVideoGrabberTo_p_ofBaseVideo, 0, 0},  {&_swigt__p_ofBaseVideo, 0, 0, 0},  {&_swigt__p_ofBaseVideoPlayer, _p_ofBaseVideoPlayerTo_p_ofBaseVideo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofBuffer[] = {  {&_swigt__p_ofBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_float_t[] = {  {&_swigt__p_ofColor_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_unsigned_char_t[] = {  {&_swigt__p_ofColor_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofColor_T_unsigned_short_t[] = {  {&_swigt__p_ofColor_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofDragInfo[] = {  {&_swigt__p_ofDragInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFbo[] = {  {&_swigt__p_ofFbo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFbo__Settings[] = {  {&_swigt__p_ofFbo__Settings, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofFile[] = {  {&_swigt__p_ofFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_float_t[] = {  {&_swigt__p_ofImage_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_unsigned_char_t[] = {  {&_swigt__p_ofImage_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofImage_T_unsigned_short_t[] = {  {&_swigt__p_ofImage_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofLight[] = {  {&_swigt__p_ofLight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMaterial[] = {  {&_swigt__p_ofMaterial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMatrix3x3[] = {  {&_swigt__p_ofMatrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMatrix4x4[] = {  {&_swigt__p_ofMatrix4x4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMesh[] = {  {&_swigt__p_ofMesh, 0, 0, 0},  {&_swigt__p_ofVboMesh, _p_ofVboMeshTo_p_ofMesh, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofMeshFace[] = {  {&_swigt__p_ofMeshFace, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofNode[] = {  {&_swigt__p_ofNode, 0, 0, 0},  {&_swigt__p_ofLight, _p_ofLightTo_p_ofNode, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPath[] = {  {&_swigt__p_ofPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_float_t[] = {  {&_swigt__p_ofPixels_T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_unsigned_char_t[] = {  {&_swigt__p_ofPixels_T_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPixels_T_unsigned_short_t[] = {  {&_swigt__p_ofPixels_T_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPolyRenderMode[] = {  {&_swigt__p_ofPolyRenderMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPolyline[] = {  {&_swigt__p_ofPolyline, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPrimitiveMode[] = {  {&_swigt__p_ofPrimitiveMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofAppBaseWindow_t[] = {  {&_swigt__p_ofPtrT_ofAppBaseWindow_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofBaseApp_t[] = {  {&_swigt__p_ofPtrT_ofBaseApp_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofBaseSoundPlayer_t[] = {  {&_swigt__p_ofPtrT_ofBaseSoundPlayer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofPtrT_ofBaseSoundStream_t[] = {  {&_swigt__p_ofPtrT_ofBaseSoundStream_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofQuaternion[] = {  {&_swigt__p_ofQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofRectangle[] = {  {&_swigt__p_ofRectangle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofShader[] = {  {&_swigt__p_ofShader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSoundPlayer[] = {  {&_swigt__p_ofSoundPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofSoundStream[] = {  {&_swigt__p_ofSoundStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofStyle[] = {  {&_swigt__p_ofStyle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTTFCharacter[] = {  {&_swigt__p_ofTTFCharacter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTexture[] = {  {&_swigt__p_ofTexture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTextureData[] = {  {&_swigt__p_ofTextureData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofTrueTypeFont[] = {  {&_swigt__p_ofTrueTypeFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVbo[] = {  {&_swigt__p_ofVbo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVboMesh[] = {  {&_swigt__p_ofVboMesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec2f[] = {  {&_swigt__p_ofVec2f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec3f[] = {  {&_swigt__p_ofVec3f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ofVec4f[] = {  {&_swigt__p_ofVec4f, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_TESSindex_t[] = {  {&_swigt__p_std__vectorT_TESSindex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofColor_T_float_t_t[] = {  {&_swigt__p_std__vectorT_ofColor_T_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofMeshFace_t[] = {  {&_swigt__p_std__vectorT_ofMeshFace_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofPath__Command_t[] = {  {&_swigt__p_std__vectorT_ofPath__Command_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofPolyline_t[] = {  {&_swigt__p_std__vectorT_ofPolyline_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofTTFCharacter_t[] = {  {&_swigt__p_std__vectorT_ofTTFCharacter_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec2f_t[] = {  {&_swigt__p_std__vectorT_ofVec2f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_ofVec3f_t[] = {  {&_swigt__p_std__vectorT_ofVec3f_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GLenum,
  _swigc__p_GLint,
  _swigc__p_GLsizei,
  _swigc__p_GLuint,
  _swigc__p_Poco__FastMutex,
  _swigc__p_Poco__FastMutex__ScopedLock,
  _swigc__p_TESSindex,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_ofAbstractHasPixels,
  _swigc__p_ofAbstractImage,
  _swigc__p_ofAppBaseWindow,
  _swigc__p_ofBaseApp,
  _swigc__p_ofBaseDraws,
  _swigc__p_ofBaseFileSerializer,
  _swigc__p_ofBaseGLRenderer,
  _swigc__p_ofBaseHasPixels_T_float_t,
  _swigc__p_ofBaseHasPixels_T_unsigned_short_t,
  _swigc__p_ofBaseHasTexture,
  _swigc__p_ofBaseImage_T_float_t,
  _swigc__p_ofBaseImage_T_unsigned_short_t,
  _swigc__p_ofBaseRenderer,
  _swigc__p_ofBaseSerializer,
  _swigc__p_ofBaseSoundInput,
  _swigc__p_ofBaseSoundOutput,
  _swigc__p_ofBaseUpdates,
  _swigc__p_ofBaseVideo,
  _swigc__p_ofBaseVideoDraws,
  _swigc__p_ofBaseVideoGrabber,
  _swigc__p_ofBaseVideoPlayer,
  _swigc__p_ofBuffer,
  _swigc__p_ofColor_T_float_t,
  _swigc__p_ofColor_T_unsigned_char_t,
  _swigc__p_ofColor_T_unsigned_short_t,
  _swigc__p_ofDragInfo,
  _swigc__p_ofFbo,
  _swigc__p_ofFbo__Settings,
  _swigc__p_ofFile,
  _swigc__p_ofImage_T_float_t,
  _swigc__p_ofImage_T_unsigned_char_t,
  _swigc__p_ofImage_T_unsigned_short_t,
  _swigc__p_ofLight,
  _swigc__p_ofMaterial,
  _swigc__p_ofMatrix3x3,
  _swigc__p_ofMatrix4x4,
  _swigc__p_ofMesh,
  _swigc__p_ofMeshFace,
  _swigc__p_ofNode,
  _swigc__p_ofPath,
  _swigc__p_ofPixels_T_float_t,
  _swigc__p_ofPixels_T_unsigned_char_t,
  _swigc__p_ofPixels_T_unsigned_short_t,
  _swigc__p_ofPolyRenderMode,
  _swigc__p_ofPolyline,
  _swigc__p_ofPrimitiveMode,
  _swigc__p_ofPtrT_ofAppBaseWindow_t,
  _swigc__p_ofPtrT_ofBaseApp_t,
  _swigc__p_ofPtrT_ofBaseSoundPlayer_t,
  _swigc__p_ofPtrT_ofBaseSoundStream_t,
  _swigc__p_ofQuaternion,
  _swigc__p_ofRectangle,
  _swigc__p_ofShader,
  _swigc__p_ofSoundPlayer,
  _swigc__p_ofSoundStream,
  _swigc__p_ofStyle,
  _swigc__p_ofTTFCharacter,
  _swigc__p_ofTexture,
  _swigc__p_ofTextureData,
  _swigc__p_ofTrueTypeFont,
  _swigc__p_ofVbo,
  _swigc__p_ofVboMesh,
  _swigc__p_ofVec2f,
  _swigc__p_ofVec3f,
  _swigc__p_ofVec4f,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_TESSindex_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_ofColor_T_float_t_t,
  _swigc__p_std__vectorT_ofMeshFace_t,
  _swigc__p_std__vectorT_ofPath__Command_t,
  _swigc__p_std__vectorT_ofPolyline_t,
  _swigc__p_std__vectorT_ofTTFCharacter_t,
  _swigc__p_std__vectorT_ofVec2f_t,
  _swigc__p_std__vectorT_ofVec3f_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "\n"
  "-- class.lua\n"
  "-- Compatible with Lua 5.1 (not 5.0).\n"
  "function class(base, __init)\n"
  "   local c = {}    -- a new class instance\n"
  "   if not __init and type(base) == 'function' then\n"
  "      __init = base\n"
  "      base = nil\n"
  "   elseif type(base) == 'table' then\n"
  "    -- our new class is a shallow copy of the base class!\n"
  "      for i,v in pairs(base) do\n"
  "         c[i] = v\n"
  "      end\n"
  "      c._base = base\n"
  "   end\n"
  "   -- the class will be the metatable for all its objects,\n"
  "   -- and they will look up their methods in it.\n"
  "   c.__index = c\n"
  "\n"
  "   -- expose a constructor which can be called by <classname>(<args>)\n"
  "   local mt = {}\n"
  "   mt.__call = function(class_tbl, ...)\n"
  "   local obj = {}\n"
  "   setmetatable(obj,c)\n"
  "   if class_tbl.__init then\n"
  "      class_tbl.__init(obj,...)\n"
  "   else \n"
  "      -- make sure that any stuff from the base class is initialized!\n"
  "      if base and base.__init then\n"
  "      base.__init(obj, ...)\n"
  "      end\n"
  "   end\n"
  "   return obj\n"
  "   end\n"
  "   c.__init = __init\n"
  "   c.is_a = function(self, klass)\n"
  "      local m = getmetatable(self)\n"
  "      while m do \n"
  "         if m == klass then return true end\n"
  "         m = m._base\n"
  "      end\n"
  "      return false\n"
  "   end\n"
  "   setmetatable(c, mt)\n"
  "   return c\n"
  "end";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

